{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/index.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/generate-text.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/no-output-specified-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/model/resolve-model.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/index.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/invalid-argument-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/invalid-stream-part-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/invalid-tool-input-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/mcp-client-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/no-image-generated-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/no-object-generated-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/no-output-generated-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/no-such-tool-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/tool-call-repair-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/unsupported-model-version-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/invalid-data-content-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/invalid-message-role-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/message-conversion-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/download-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/retry-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/convert-to-language-model-prompt.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/detect-media-type.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/download.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/data-content.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/split-data-url.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/prepare-call-settings.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/prepare-tools-and-tool-choice.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/is-non-empty-object.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/standardize-prompt.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/message.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/types/provider-metadata.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/types/json-value.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/content-part.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/wrap-gateway-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/telemetry/assemble-operation-name.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/telemetry/get-base-telemetry-attributes.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/telemetry/get-tracer.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/telemetry/noop-tracer.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/telemetry/record-span.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/telemetry/select-telemetry-attributes.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/telemetry/stringify-for-telemetry.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/types/usage.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/as-array.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/retry-with-exponential-backoff.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/prepare-retries.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/extract-text-content.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/generated-file.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/parse-tool-call.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/step-result.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/stop-condition.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/prompt/create-tool-model-output.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/to-response-messages.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/stream-text.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/prepare-headers.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/text-stream/create-text-stream-response.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/write-to-server-response.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/text-stream/pipe-text-stream-to-response.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui-message-stream/json-to-sse-transform-stream.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui-message-stream/ui-message-stream-headers.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui-message-stream/create-ui-message-stream-response.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui-message-stream/get-response-ui-message-id.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/process-ui-message-stream.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui-message-stream/ui-message-chunks.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/merge-objects.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/parse-partial-json.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/fix-json.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/ui-messages.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui-message-stream/handle-ui-message-stream-finish.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui-message-stream/pipe-ui-message-stream-to-response.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/async-iterable-stream.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/consume-stream.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/create-resolvable-promise.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/create-stitchable-stream.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/delayed-promise.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/filter-stream-errors.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/now.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/run-tools-transformation.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/agent/agent.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/embed/embed.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/split-array.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/embed/embed-many.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-image/generate-image.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-object/generate-object.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/extract-reasoning-content.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-object/output-strategy.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-object/parse-and-validate-object-result.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-object/validate-object-generation-input.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-object/stream-object.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/cosine-similarity.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/data-url.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/is-deep-equal-data.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/serial-job-executor.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/simulate-readable-stream.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/no-speech-generated-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-speech/generated-audio-file.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-speech/generate-speech.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/output.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/generate-text/smooth-stream.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/middleware/default-settings-middleware.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/util/get-potential-start-index.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/middleware/extract-reasoning-middleware.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/middleware/simulate-streaming-middleware.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/middleware/wrap-language-model.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/middleware/wrap-provider.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/registry/custom-provider.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/registry/no-such-provider-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/registry/provider-registry.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/tool/mcp/mcp-client.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/tool/mcp/mcp-sse-transport.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/tool/mcp/json-rpc-message.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/tool/mcp/types.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/tool/mcp/mcp-transport.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/error/no-transcript-generated-error.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/transcribe/transcribe.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/call-completion-api.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/process-text-stream.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/chat.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/convert-file-list-to-file-ui-parts.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/default-chat-transport.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/http-chat-transport.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/convert-to-model-messages.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/last-assistant-message-is-complete-with-tool-calls.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/transform-text-to-ui-message-stream.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/text-stream-chat-transport.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui/validate-ui-messages.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui-message-stream/create-ui-message-stream.ts","file:///home/tom/www2026/8_server/vercel/fumadocs/node_modules/.pnpm/ai%405.0.18_zod%404.0.17/node_modules/ai/src/ui-message-stream/read-ui-message-stream.ts"],"sourcesContent":["// re-exports:\nexport {\n  asSchema,\n  createIdGenerator,\n  dynamicTool,\n  generateId,\n  jsonSchema,\n  tool,\n  zodSchema,\n  type IdGenerator,\n  type InferToolInput,\n  type InferToolOutput,\n  type Schema,\n  type Tool,\n  type ToolCallOptions,\n  type ToolExecuteFunction,\n} from '@ai-sdk/provider-utils';\n\n// directory exports\nexport * from './agent';\nexport * from './embed';\nexport * from './error';\nexport * from './generate-image';\nexport * from './generate-object';\nexport * from './generate-speech';\nexport * from './generate-text';\nexport * from './middleware';\nexport * from './prompt';\nexport * from './registry';\nexport * from './text-stream';\nexport * from './tool';\nexport * from './transcribe';\nexport * from './types';\nexport * from './ui';\nexport * from './ui-message-stream';\nexport * from './util';\n\n// telemetry types:\nexport type { TelemetrySettings } from './telemetry/telemetry-settings';\n\n// import globals\nimport './global';\n","import {\n  LanguageModelV2,\n  LanguageModelV2Content,\n  LanguageModelV2ToolCall,\n} from '@ai-sdk/provider';\nimport {\n  createIdGenerator,\n  executeTool,\n  getErrorMessage,\n  IdGenerator,\n  ProviderOptions,\n} from '@ai-sdk/provider-utils';\nimport { Tracer } from '@opentelemetry/api';\nimport { NoOutputSpecifiedError } from '../error/no-output-specified-error';\nimport { resolveLanguageModel } from '../model/resolve-model';\nimport { ModelMessage } from '../prompt';\nimport { CallSettings } from '../prompt/call-settings';\nimport { convertToLanguageModelPrompt } from '../prompt/convert-to-language-model-prompt';\nimport { prepareCallSettings } from '../prompt/prepare-call-settings';\nimport { prepareToolsAndToolChoice } from '../prompt/prepare-tools-and-tool-choice';\nimport { Prompt } from '../prompt/prompt';\nimport { standardizePrompt } from '../prompt/standardize-prompt';\nimport { wrapGatewayError } from '../prompt/wrap-gateway-error';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordErrorOnSpan, recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { stringifyForTelemetry } from '../telemetry/stringify-for-telemetry';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport { LanguageModel, ToolChoice } from '../types';\nimport { addLanguageModelUsage, LanguageModelUsage } from '../types/usage';\nimport { asArray } from '../util/as-array';\nimport { prepareRetries } from '../util/prepare-retries';\nimport { ContentPart } from './content-part';\nimport { extractTextContent } from './extract-text-content';\nimport { GenerateTextResult } from './generate-text-result';\nimport { DefaultGeneratedFile } from './generated-file';\nimport { Output } from './output';\nimport { parseToolCall } from './parse-tool-call';\nimport { PrepareStepFunction } from './prepare-step';\nimport { ResponseMessage } from './response-message';\nimport { DefaultStepResult, StepResult } from './step-result';\nimport {\n  isStopConditionMet,\n  stepCountIs,\n  StopCondition,\n} from './stop-condition';\nimport { toResponseMessages } from './to-response-messages';\nimport { TypedToolCall } from './tool-call';\nimport { ToolCallRepairFunction } from './tool-call-repair-function';\nimport { TypedToolError } from './tool-error';\nimport { ToolOutput } from './tool-output';\nimport { TypedToolResult } from './tool-result';\nimport { ToolSet } from './tool-set';\n\nconst originalGenerateId = createIdGenerator({\n  prefix: 'aitxt',\n  size: 24,\n});\n\n/**\nCallback that is set using the `onStepFinish` option.\n\n@param stepResult - The result of the step.\n */\nexport type GenerateTextOnStepFinishCallback<TOOLS extends ToolSet> = (\n  stepResult: StepResult<TOOLS>,\n) => Promise<void> | void;\n\n/**\nGenerate a text and call tools for a given prompt using a language model.\n\nThis function does not stream the output. If you want to stream the output, use `streamText` instead.\n\n@param model - The language model to use.\n\n@param tools - Tools that are accessible to and can be called by the model. The model needs to support calling tools.\n@param toolChoice - The tool choice strategy. Default: 'auto'.\n\n@param system - A system message that will be part of the prompt.\n@param prompt - A simple text prompt. You can either use `prompt` or `messages` but not both.\n@param messages - A list of messages. You can either use `prompt` or `messages` but not both.\n\n@param maxOutputTokens - Maximum number of tokens to generate.\n@param temperature - Temperature setting.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topP - Nucleus sampling.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topK - Only sample from the top K options for each subsequent token.\nUsed to remove \"long tail\" low probability responses.\nRecommended for advanced use cases only. You usually only need to use temperature.\n@param presencePenalty - Presence penalty setting.\nIt affects the likelihood of the model to repeat information that is already in the prompt.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param frequencyPenalty - Frequency penalty setting.\nIt affects the likelihood of the model to repeatedly use the same words or phrases.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param stopSequences - Stop sequences.\nIf set, the model will stop generating text when one of the stop sequences is generated.\n@param seed - The seed (integer) to use for random sampling.\nIf set and supported by the model, calls will generate deterministic results.\n\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@param experimental_generateMessageId - Generate a unique ID for each message.\n\n@param onStepFinish - Callback that is called when each step (LLM call) is finished, including intermediate steps.\n\n@returns\nA result object that contains the generated text, the results of the tool calls, and additional information.\n */\nexport async function generateText<\n  TOOLS extends ToolSet,\n  OUTPUT = never,\n  OUTPUT_PARTIAL = never,\n>({\n  model: modelArg,\n  tools,\n  toolChoice,\n  system,\n  prompt,\n  messages,\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n  stopWhen = stepCountIs(1),\n  experimental_output: output,\n  experimental_telemetry: telemetry,\n  providerOptions,\n  experimental_activeTools,\n  activeTools = experimental_activeTools,\n  experimental_prepareStep,\n  prepareStep = experimental_prepareStep,\n  experimental_repairToolCall: repairToolCall,\n  experimental_context,\n  _internal: {\n    generateId = originalGenerateId,\n    currentDate = () => new Date(),\n  } = {},\n  onStepFinish,\n  ...settings\n}: CallSettings &\n  Prompt & {\n    /**\nThe language model to use.\n     */\n    model: LanguageModel;\n\n    /**\nThe tools that the model can call. The model needs to support calling tools.\n*/\n    tools?: TOOLS;\n\n    /**\nThe tool choice strategy. Default: 'auto'.\n     */\n    toolChoice?: ToolChoice<NoInfer<TOOLS>>;\n\n    /**\nCondition for stopping the generation when there are tool results in the last step.\nWhen the condition is an array, any of the conditions can be met to stop the generation.\n\n@default stepCountIs(1)\n     */\n    stopWhen?:\n      | StopCondition<NoInfer<TOOLS>>\n      | Array<StopCondition<NoInfer<TOOLS>>>;\n\n    /**\nOptional telemetry configuration (experimental).\n     */\n    experimental_telemetry?: TelemetrySettings;\n\n    /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n    providerOptions?: ProviderOptions;\n\n    /**\n     * @deprecated Use `activeTools` instead.\n     */\n    experimental_activeTools?: Array<keyof NoInfer<TOOLS>>;\n\n    /**\nLimits the tools that are available for the model to call without\nchanging the tool call and result types in the result.\n     */\n    activeTools?: Array<keyof NoInfer<TOOLS>>;\n\n    /**\nOptional specification for parsing structured outputs from the LLM response.\n     */\n    experimental_output?: Output<OUTPUT, OUTPUT_PARTIAL>;\n\n    /**\n     * @deprecated Use `prepareStep` instead.\n     */\n    experimental_prepareStep?: PrepareStepFunction<NoInfer<TOOLS>>;\n\n    /**\nOptional function that you can use to provide different settings for a step.\n    */\n    prepareStep?: PrepareStepFunction<NoInfer<TOOLS>>;\n\n    /**\nA function that attempts to repair a tool call that failed to parse.\n     */\n    experimental_repairToolCall?: ToolCallRepairFunction<NoInfer<TOOLS>>;\n\n    /**\n    Callback that is called when each step (LLM call) is finished, including intermediate steps.\n    */\n    onStepFinish?: GenerateTextOnStepFinishCallback<NoInfer<TOOLS>>;\n\n    /**\n     * Context that is passed into tool execution.\n     *\n     * Experimental (can break in patch releases).\n     *\n     * @default undefined\n     */\n    experimental_context?: unknown;\n\n    /**\n     * Internal. For test use only. May change without notice.\n     */\n    _internal?: {\n      generateId?: IdGenerator;\n      currentDate?: () => Date;\n    };\n  }): Promise<GenerateTextResult<TOOLS, OUTPUT>> {\n  const model = resolveLanguageModel(modelArg);\n  const stopConditions = asArray(stopWhen);\n  const { maxRetries, retry } = prepareRetries({\n    maxRetries: maxRetriesArg,\n    abortSignal,\n  });\n\n  const callSettings = prepareCallSettings(settings);\n\n  const baseTelemetryAttributes = getBaseTelemetryAttributes({\n    model,\n    telemetry,\n    headers,\n    settings: { ...callSettings, maxRetries },\n  });\n\n  const initialPrompt = await standardizePrompt({\n    system,\n    prompt,\n    messages,\n  });\n\n  const tracer = getTracer(telemetry);\n\n  try {\n    return await recordSpan({\n      name: 'ai.generateText',\n      attributes: selectTelemetryAttributes({\n        telemetry,\n        attributes: {\n          ...assembleOperationName({\n            operationId: 'ai.generateText',\n            telemetry,\n          }),\n          ...baseTelemetryAttributes,\n          // model:\n          'ai.model.provider': model.provider,\n          'ai.model.id': model.modelId,\n          // specific settings that only make sense on the outer level:\n          'ai.prompt': {\n            input: () => JSON.stringify({ system, prompt, messages }),\n          },\n        },\n      }),\n      tracer,\n      fn: async span => {\n        const callSettings = prepareCallSettings(settings);\n\n        let currentModelResponse: Awaited<\n          ReturnType<LanguageModelV2['doGenerate']>\n        > & { response: { id: string; timestamp: Date; modelId: string } };\n        let clientToolCalls: Array<TypedToolCall<TOOLS>> = [];\n        let clientToolOutputs: Array<ToolOutput<TOOLS>> = [];\n        const responseMessages: Array<ResponseMessage> = [];\n        const steps: GenerateTextResult<TOOLS, OUTPUT>['steps'] = [];\n\n        do {\n          const stepInputMessages = [\n            ...initialPrompt.messages,\n            ...responseMessages,\n          ];\n\n          const prepareStepResult = await prepareStep?.({\n            model,\n            steps,\n            stepNumber: steps.length,\n            messages: stepInputMessages,\n          });\n\n          const promptMessages = await convertToLanguageModelPrompt({\n            prompt: {\n              system: prepareStepResult?.system ?? initialPrompt.system,\n              messages: prepareStepResult?.messages ?? stepInputMessages,\n            },\n            supportedUrls: await model.supportedUrls,\n          });\n\n          const stepModel = resolveLanguageModel(\n            prepareStepResult?.model ?? model,\n          );\n\n          const { toolChoice: stepToolChoice, tools: stepTools } =\n            prepareToolsAndToolChoice({\n              tools,\n              toolChoice: prepareStepResult?.toolChoice ?? toolChoice,\n              activeTools: prepareStepResult?.activeTools ?? activeTools,\n            });\n\n          currentModelResponse = await retry(() =>\n            recordSpan({\n              name: 'ai.generateText.doGenerate',\n              attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                  ...assembleOperationName({\n                    operationId: 'ai.generateText.doGenerate',\n                    telemetry,\n                  }),\n                  ...baseTelemetryAttributes,\n                  // model:\n                  'ai.model.provider': stepModel.provider,\n                  'ai.model.id': stepModel.modelId,\n                  // prompt:\n                  'ai.prompt.messages': {\n                    input: () => stringifyForTelemetry(promptMessages),\n                  },\n                  'ai.prompt.tools': {\n                    // convert the language model level tools:\n                    input: () => stepTools?.map(tool => JSON.stringify(tool)),\n                  },\n                  'ai.prompt.toolChoice': {\n                    input: () =>\n                      stepToolChoice != null\n                        ? JSON.stringify(stepToolChoice)\n                        : undefined,\n                  },\n\n                  // standardized gen-ai llm span attributes:\n                  'gen_ai.system': stepModel.provider,\n                  'gen_ai.request.model': stepModel.modelId,\n                  'gen_ai.request.frequency_penalty': settings.frequencyPenalty,\n                  'gen_ai.request.max_tokens': settings.maxOutputTokens,\n                  'gen_ai.request.presence_penalty': settings.presencePenalty,\n                  'gen_ai.request.stop_sequences': settings.stopSequences,\n                  'gen_ai.request.temperature':\n                    settings.temperature ?? undefined,\n                  'gen_ai.request.top_k': settings.topK,\n                  'gen_ai.request.top_p': settings.topP,\n                },\n              }),\n              tracer,\n              fn: async span => {\n                const result = await stepModel.doGenerate({\n                  ...callSettings,\n                  tools: stepTools,\n                  toolChoice: stepToolChoice,\n                  responseFormat: output?.responseFormat,\n                  prompt: promptMessages,\n                  providerOptions,\n                  abortSignal,\n                  headers,\n                });\n\n                // Fill in default values:\n                const responseData = {\n                  id: result.response?.id ?? generateId(),\n                  timestamp: result.response?.timestamp ?? currentDate(),\n                  modelId: result.response?.modelId ?? stepModel.modelId,\n                  headers: result.response?.headers,\n                  body: result.response?.body,\n                };\n\n                // Add response information to the span:\n                span.setAttributes(\n                  selectTelemetryAttributes({\n                    telemetry,\n                    attributes: {\n                      'ai.response.finishReason': result.finishReason,\n                      'ai.response.text': {\n                        output: () => extractTextContent(result.content),\n                      },\n                      'ai.response.toolCalls': {\n                        output: () => {\n                          const toolCalls = asToolCalls(result.content);\n                          return toolCalls == null\n                            ? undefined\n                            : JSON.stringify(toolCalls);\n                        },\n                      },\n                      'ai.response.id': responseData.id,\n                      'ai.response.model': responseData.modelId,\n                      'ai.response.timestamp':\n                        responseData.timestamp.toISOString(),\n                      'ai.response.providerMetadata': JSON.stringify(\n                        result.providerMetadata,\n                      ),\n\n                      // TODO rename telemetry attributes to inputTokens and outputTokens\n                      'ai.usage.promptTokens': result.usage.inputTokens,\n                      'ai.usage.completionTokens': result.usage.outputTokens,\n\n                      // standardized gen-ai llm span attributes:\n                      'gen_ai.response.finish_reasons': [result.finishReason],\n                      'gen_ai.response.id': responseData.id,\n                      'gen_ai.response.model': responseData.modelId,\n                      'gen_ai.usage.input_tokens': result.usage.inputTokens,\n                      'gen_ai.usage.output_tokens': result.usage.outputTokens,\n                    },\n                  }),\n                );\n\n                return { ...result, response: responseData };\n              },\n            }),\n          );\n\n          // parse tool calls:\n          const stepToolCalls: TypedToolCall<TOOLS>[] = await Promise.all(\n            currentModelResponse.content\n              .filter(\n                (part): part is LanguageModelV2ToolCall =>\n                  part.type === 'tool-call',\n              )\n              .map(toolCall =>\n                parseToolCall({\n                  toolCall,\n                  tools,\n                  repairToolCall,\n                  system,\n                  messages: stepInputMessages,\n                }),\n              ),\n          );\n\n          // notify the tools that the tool calls are available:\n          for (const toolCall of stepToolCalls) {\n            if (toolCall.invalid) {\n              continue; // ignore invalid tool calls\n            }\n\n            const tool = tools![toolCall.toolName];\n            if (tool?.onInputAvailable != null) {\n              await tool.onInputAvailable({\n                input: toolCall.input,\n                toolCallId: toolCall.toolCallId,\n                messages: stepInputMessages,\n                abortSignal,\n                experimental_context,\n              });\n            }\n          }\n\n          // insert error tool outputs for invalid tool calls:\n          // TODO AI SDK 6: invalid inputs should not require output parts\n          const invalidToolCalls = stepToolCalls.filter(\n            toolCall => toolCall.invalid && toolCall.dynamic,\n          );\n\n          clientToolOutputs = [];\n\n          for (const toolCall of invalidToolCalls) {\n            clientToolOutputs.push({\n              type: 'tool-error',\n              toolCallId: toolCall.toolCallId,\n              toolName: toolCall.toolName,\n              input: toolCall.input,\n              error: getErrorMessage(toolCall.error!),\n              dynamic: true,\n            });\n          }\n\n          // execute client tool calls:\n          clientToolCalls = stepToolCalls.filter(\n            toolCall => !toolCall.providerExecuted,\n          );\n\n          if (tools != null) {\n            clientToolOutputs.push(\n              ...(await executeTools({\n                toolCalls: clientToolCalls.filter(\n                  toolCall => !toolCall.invalid,\n                ),\n                tools,\n                tracer,\n                telemetry,\n                messages: stepInputMessages,\n                abortSignal,\n                experimental_context,\n              })),\n            );\n          }\n\n          // content:\n          const stepContent = asContent({\n            content: currentModelResponse.content,\n            toolCalls: stepToolCalls,\n            toolOutputs: clientToolOutputs,\n          });\n\n          // append to messages for potential next step:\n          responseMessages.push(\n            ...toResponseMessages({\n              content: stepContent,\n              tools,\n            }),\n          );\n\n          // Add step information (after response messages are updated):\n          const currentStepResult: StepResult<TOOLS> = new DefaultStepResult({\n            content: stepContent,\n            finishReason: currentModelResponse.finishReason,\n            usage: currentModelResponse.usage,\n            warnings: currentModelResponse.warnings,\n            providerMetadata: currentModelResponse.providerMetadata,\n            request: currentModelResponse.request ?? {},\n            response: {\n              ...currentModelResponse.response,\n              // deep clone msgs to avoid mutating past messages in multi-step:\n              messages: structuredClone(responseMessages),\n            },\n          });\n\n          steps.push(currentStepResult);\n          await onStepFinish?.(currentStepResult);\n        } while (\n          // there are tool calls:\n          clientToolCalls.length > 0 &&\n          // all current tool calls have outputs (incl. execution errors):\n          clientToolOutputs.length === clientToolCalls.length &&\n          // continue until a stop condition is met:\n          !(await isStopConditionMet({ stopConditions, steps }))\n        );\n\n        // Add response information to the span:\n        span.setAttributes(\n          selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n              'ai.response.finishReason': currentModelResponse.finishReason,\n              'ai.response.text': {\n                output: () => extractTextContent(currentModelResponse.content),\n              },\n              'ai.response.toolCalls': {\n                output: () => {\n                  const toolCalls = asToolCalls(currentModelResponse.content);\n                  return toolCalls == null\n                    ? undefined\n                    : JSON.stringify(toolCalls);\n                },\n              },\n              'ai.response.providerMetadata': JSON.stringify(\n                currentModelResponse.providerMetadata,\n              ),\n\n              // TODO rename telemetry attributes to inputTokens and outputTokens\n              'ai.usage.promptTokens': currentModelResponse.usage.inputTokens,\n              'ai.usage.completionTokens':\n                currentModelResponse.usage.outputTokens,\n            },\n          }),\n        );\n\n        const lastStep = steps[steps.length - 1];\n\n        return new DefaultGenerateTextResult({\n          steps,\n          resolvedOutput: await output?.parseOutput(\n            { text: lastStep.text },\n            {\n              response: lastStep.response,\n              usage: lastStep.usage,\n              finishReason: lastStep.finishReason,\n            },\n          ),\n        });\n      },\n    });\n  } catch (error) {\n    throw wrapGatewayError(error);\n  }\n}\n\nasync function executeTools<TOOLS extends ToolSet>({\n  toolCalls,\n  tools,\n  tracer,\n  telemetry,\n  messages,\n  abortSignal,\n  experimental_context,\n}: {\n  toolCalls: Array<TypedToolCall<TOOLS>>;\n  tools: TOOLS;\n  tracer: Tracer;\n  telemetry: TelemetrySettings | undefined;\n  messages: ModelMessage[];\n  abortSignal: AbortSignal | undefined;\n  experimental_context: unknown;\n}): Promise<Array<ToolOutput<TOOLS>>> {\n  const toolOutputs = await Promise.all(\n    toolCalls.map(async ({ toolCallId, toolName, input }) => {\n      const tool = tools[toolName];\n\n      if (tool?.execute == null) {\n        return undefined;\n      }\n\n      return recordSpan({\n        name: 'ai.toolCall',\n        attributes: selectTelemetryAttributes({\n          telemetry,\n          attributes: {\n            ...assembleOperationName({\n              operationId: 'ai.toolCall',\n              telemetry,\n            }),\n            'ai.toolCall.name': toolName,\n            'ai.toolCall.id': toolCallId,\n            'ai.toolCall.args': {\n              output: () => JSON.stringify(input),\n            },\n          },\n        }),\n        tracer,\n        fn: async span => {\n          try {\n            const stream = executeTool({\n              execute: tool.execute!.bind(tool),\n              input,\n              options: {\n                toolCallId,\n                messages,\n                abortSignal,\n                experimental_context,\n              },\n            });\n\n            let output: unknown;\n            for await (const part of stream) {\n              if (part.type === 'final') {\n                output = part.output;\n              }\n            }\n            try {\n              span.setAttributes(\n                selectTelemetryAttributes({\n                  telemetry,\n                  attributes: {\n                    'ai.toolCall.result': {\n                      output: () => JSON.stringify(output),\n                    },\n                  },\n                }),\n              );\n            } catch (ignored) {\n              // JSON stringify might fail if the result is not serializable,\n              // in which case we just ignore it. In the future we might want to\n              // add an optional serialize method to the tool interface and warn\n              // if the result is not serializable.\n            }\n\n            return {\n              type: 'tool-result',\n              toolCallId,\n              toolName,\n              input,\n              output,\n              dynamic: tool.type === 'dynamic',\n            } as TypedToolResult<TOOLS>;\n          } catch (error) {\n            recordErrorOnSpan(span, error);\n            return {\n              type: 'tool-error',\n              toolCallId,\n              toolName,\n              input,\n              error,\n              dynamic: tool.type === 'dynamic',\n            } as TypedToolError<TOOLS>;\n          }\n        },\n      });\n    }),\n  );\n\n  return toolOutputs.filter(\n    (output): output is NonNullable<typeof output> => output != null,\n  );\n}\n\nclass DefaultGenerateTextResult<TOOLS extends ToolSet, OUTPUT>\n  implements GenerateTextResult<TOOLS, OUTPUT>\n{\n  readonly steps: GenerateTextResult<TOOLS, OUTPUT>['steps'];\n\n  private readonly resolvedOutput: OUTPUT;\n\n  constructor(options: {\n    steps: GenerateTextResult<TOOLS, OUTPUT>['steps'];\n    resolvedOutput: OUTPUT;\n  }) {\n    this.steps = options.steps;\n    this.resolvedOutput = options.resolvedOutput;\n  }\n\n  private get finalStep() {\n    return this.steps[this.steps.length - 1];\n  }\n\n  get content() {\n    return this.finalStep.content;\n  }\n\n  get text() {\n    return this.finalStep.text;\n  }\n\n  get files() {\n    return this.finalStep.files;\n  }\n\n  get reasoningText() {\n    return this.finalStep.reasoningText;\n  }\n\n  get reasoning() {\n    return this.finalStep.reasoning;\n  }\n\n  get toolCalls() {\n    return this.finalStep.toolCalls;\n  }\n\n  get staticToolCalls() {\n    return this.finalStep.staticToolCalls;\n  }\n\n  get dynamicToolCalls() {\n    return this.finalStep.dynamicToolCalls;\n  }\n\n  get toolResults() {\n    return this.finalStep.toolResults;\n  }\n\n  get staticToolResults() {\n    return this.finalStep.staticToolResults;\n  }\n\n  get dynamicToolResults() {\n    return this.finalStep.dynamicToolResults;\n  }\n\n  get sources() {\n    return this.finalStep.sources;\n  }\n\n  get finishReason() {\n    return this.finalStep.finishReason;\n  }\n\n  get warnings() {\n    return this.finalStep.warnings;\n  }\n\n  get providerMetadata() {\n    return this.finalStep.providerMetadata;\n  }\n\n  get response() {\n    return this.finalStep.response;\n  }\n\n  get request() {\n    return this.finalStep.request;\n  }\n\n  get usage() {\n    return this.finalStep.usage;\n  }\n\n  get totalUsage() {\n    return this.steps.reduce(\n      (totalUsage, step) => {\n        return addLanguageModelUsage(totalUsage, step.usage);\n      },\n      {\n        inputTokens: undefined,\n        outputTokens: undefined,\n        totalTokens: undefined,\n        reasoningTokens: undefined,\n        cachedInputTokens: undefined,\n      } as LanguageModelUsage,\n    );\n  }\n\n  get experimental_output() {\n    if (this.resolvedOutput == null) {\n      throw new NoOutputSpecifiedError();\n    }\n\n    return this.resolvedOutput;\n  }\n}\n\nfunction asToolCalls(content: Array<LanguageModelV2Content>) {\n  const parts = content.filter(\n    (part): part is LanguageModelV2ToolCall => part.type === 'tool-call',\n  );\n\n  if (parts.length === 0) {\n    return undefined;\n  }\n\n  return parts.map(toolCall => ({\n    toolCallId: toolCall.toolCallId,\n    toolName: toolCall.toolName,\n    input: toolCall.input,\n  }));\n}\n\nfunction asContent<TOOLS extends ToolSet>({\n  content,\n  toolCalls,\n  toolOutputs,\n}: {\n  content: Array<LanguageModelV2Content>;\n  toolCalls: Array<TypedToolCall<TOOLS>>;\n  toolOutputs: Array<ToolOutput<TOOLS>>;\n}): Array<ContentPart<TOOLS>> {\n  return [\n    ...content.map(part => {\n      switch (part.type) {\n        case 'text':\n        case 'reasoning':\n        case 'source':\n          return part;\n\n        case 'file': {\n          return {\n            type: 'file' as const,\n            file: new DefaultGeneratedFile(part),\n          };\n        }\n\n        case 'tool-call': {\n          return toolCalls.find(\n            toolCall => toolCall.toolCallId === part.toolCallId,\n          )!;\n        }\n\n        case 'tool-result': {\n          const toolCall = toolCalls.find(\n            toolCall => toolCall.toolCallId === part.toolCallId,\n          )!;\n\n          if (toolCall == null) {\n            throw new Error(`Tool call ${part.toolCallId} not found.`);\n          }\n\n          if (part.isError) {\n            return {\n              type: 'tool-error' as const,\n              toolCallId: part.toolCallId,\n              toolName: part.toolName as keyof TOOLS & string,\n              input: toolCall.input,\n              error: part.result,\n              providerExecuted: true,\n              dynamic: toolCall.dynamic,\n            } as TypedToolError<TOOLS>;\n          }\n\n          return {\n            type: 'tool-result' as const,\n            toolCallId: part.toolCallId,\n            toolName: part.toolName as keyof TOOLS & string,\n            input: toolCall.input,\n            output: part.result,\n            providerExecuted: true,\n            dynamic: toolCall.dynamic,\n          } as TypedToolResult<TOOLS>;\n        }\n      }\n    }),\n    ...toolOutputs,\n  ];\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_NoOutputSpecifiedError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\nThrown when no output type is specified and output-related methods are called.\n */\nexport class NoOutputSpecifiedError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  constructor({ message = 'No output specified.' }: { message?: string } = {}) {\n    super({ name, message });\n  }\n\n  static isInstance(error: unknown): error is NoOutputSpecifiedError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { gateway } from '@ai-sdk/gateway';\nimport {\n  EmbeddingModelV2,\n  LanguageModelV2,\n  ProviderV2,\n} from '@ai-sdk/provider';\nimport { UnsupportedModelVersionError } from '../error';\nimport { EmbeddingModel } from '../types/embedding-model';\nimport { LanguageModel } from '../types/language-model';\n\nexport function resolveLanguageModel(model: LanguageModel): LanguageModelV2 {\n  if (typeof model !== 'string') {\n    if (model.specificationVersion !== 'v2') {\n      throw new UnsupportedModelVersionError({\n        version: model.specificationVersion,\n        provider: model.provider,\n        modelId: model.modelId,\n      });\n    }\n\n    return model;\n  }\n\n  return getGlobalProvider().languageModel(model);\n}\n\nexport function resolveEmbeddingModel<VALUE = string>(\n  model: EmbeddingModel<VALUE>,\n): EmbeddingModelV2<VALUE> {\n  if (typeof model !== 'string') {\n    if (model.specificationVersion !== 'v2') {\n      throw new UnsupportedModelVersionError({\n        version: model.specificationVersion,\n        provider: model.provider,\n        modelId: model.modelId,\n      });\n    }\n\n    return model;\n  }\n\n  // TODO AI SDK 6: figure out how to cleanly support different generic types\n  return getGlobalProvider().textEmbeddingModel(\n    model,\n  ) as EmbeddingModelV2<VALUE>;\n}\n\nfunction getGlobalProvider(): ProviderV2 {\n  return globalThis.AI_SDK_DEFAULT_PROVIDER ?? gateway;\n}\n","export {\n  AISDKError,\n  APICallError,\n  EmptyResponseBodyError,\n  InvalidPromptError,\n  InvalidResponseDataError,\n  JSONParseError,\n  LoadAPIKeyError,\n  NoContentGeneratedError,\n  NoSuchModelError,\n  TypeValidationError,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\n\nexport { InvalidArgumentError } from './invalid-argument-error';\nexport { InvalidStreamPartError } from './invalid-stream-part-error';\nexport { InvalidToolInputError } from './invalid-tool-input-error';\nexport { MCPClientError } from './mcp-client-error';\nexport { NoImageGeneratedError } from './no-image-generated-error';\nexport { NoObjectGeneratedError } from './no-object-generated-error';\nexport { NoOutputGeneratedError } from './no-output-generated-error';\nexport { NoOutputSpecifiedError } from './no-output-specified-error';\nexport { NoSuchToolError } from './no-such-tool-error';\nexport { ToolCallRepairError } from './tool-call-repair-error';\nexport { UnsupportedModelVersionError } from './unsupported-model-version-error';\n\nexport { InvalidDataContentError } from '../prompt/invalid-data-content-error';\nexport { InvalidMessageRoleError } from '../prompt/invalid-message-role-error';\nexport { MessageConversionError } from '../prompt/message-conversion-error';\nexport { DownloadError } from '../util/download-error';\nexport { RetryError } from '../util/retry-error';\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_InvalidArgumentError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class InvalidArgumentError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly parameter: string;\n  readonly value: unknown;\n\n  constructor({\n    parameter,\n    value,\n    message,\n  }: {\n    parameter: string;\n    value: unknown;\n    message: string;\n  }) {\n    super({\n      name,\n      message: `Invalid argument for parameter ${parameter}: ${message}`,\n    });\n\n    this.parameter = parameter;\n    this.value = value;\n  }\n\n  static isInstance(error: unknown): error is InvalidArgumentError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\nimport { SingleRequestTextStreamPart } from '../generate-text/run-tools-transformation';\n\nconst name = 'AI_InvalidStreamPartError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class InvalidStreamPartError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly chunk: SingleRequestTextStreamPart<any>;\n\n  constructor({\n    chunk,\n    message,\n  }: {\n    chunk: SingleRequestTextStreamPart<any>;\n    message: string;\n  }) {\n    super({ name, message });\n\n    this.chunk = chunk;\n  }\n\n  static isInstance(error: unknown): error is InvalidStreamPartError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError, getErrorMessage } from '@ai-sdk/provider';\n\nconst name = 'AI_InvalidToolInputError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class InvalidToolInputError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly toolName: string;\n  readonly toolInput: string;\n\n  constructor({\n    toolInput,\n    toolName,\n    cause,\n    message = `Invalid input for tool ${toolName}: ${getErrorMessage(cause)}`,\n  }: {\n    message?: string;\n    toolInput: string;\n    toolName: string;\n    cause: unknown;\n  }) {\n    super({ name, message, cause });\n\n    this.toolInput = toolInput;\n    this.toolName = toolName;\n  }\n\n  static isInstance(error: unknown): error is InvalidToolInputError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_MCPClientError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * An error occurred with the MCP client.\n */\nexport class MCPClientError extends AISDKError {\n  private readonly [symbol] = true;\n\n  constructor({\n    name = 'MCPClientError',\n    message,\n    cause,\n  }: {\n    name?: string;\n    message: string;\n    cause?: unknown;\n  }) {\n    super({ name, message, cause });\n  }\n\n  static isInstance(error: unknown): error is MCPClientError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\nimport { ImageModelResponseMetadata } from '../types/image-model-response-metadata';\n\nconst name = 'AI_NoImageGeneratedError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\nThrown when no image could be generated. This can have multiple causes:\n\n- The model failed to generate a response.\n- The model generated a response that could not be parsed.\n */\nexport class NoImageGeneratedError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  /**\nThe response metadata for each call.\n   */\n  readonly responses: Array<ImageModelResponseMetadata> | undefined;\n\n  constructor({\n    message = 'No image generated.',\n    cause,\n    responses,\n  }: {\n    message?: string;\n    cause?: Error;\n    responses?: Array<ImageModelResponseMetadata>;\n  }) {\n    super({ name, message, cause });\n\n    this.responses = responses;\n  }\n\n  static isInstance(error: unknown): error is NoImageGeneratedError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\nimport { FinishReason } from '../types/language-model';\nimport { LanguageModelResponseMetadata } from '../types/language-model-response-metadata';\nimport { LanguageModelUsage } from '../types/usage';\n\nconst name = 'AI_NoObjectGeneratedError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\nThrown when no object could be generated. This can have several causes:\n\n- The model failed to generate a response.\n- The model generated a response that could not be parsed.\n- The model generated a response that could not be validated against the schema.\n\nThe error contains the following properties:\n\n- `text`: The text that was generated by the model. This can be the raw text or the tool call text, depending on the model.\n */\nexport class NoObjectGeneratedError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  /**\n  The text that was generated by the model. This can be the raw text or the tool call text, depending on the model.\n   */\n  readonly text: string | undefined;\n\n  /**\n  The response metadata.\n   */\n  readonly response: LanguageModelResponseMetadata | undefined;\n\n  /**\n  The usage of the model.\n   */\n  readonly usage: LanguageModelUsage | undefined;\n\n  /**\n  Reason why the model finished generating a response.\n   */\n  readonly finishReason: FinishReason | undefined;\n\n  constructor({\n    message = 'No object generated.',\n    cause,\n    text,\n    response,\n    usage,\n    finishReason,\n  }: {\n    message?: string;\n    cause?: Error;\n    text?: string;\n    response: LanguageModelResponseMetadata;\n    usage: LanguageModelUsage;\n    finishReason: FinishReason;\n  }) {\n    super({ name, message, cause });\n\n    this.text = text;\n    this.response = response;\n    this.usage = usage;\n    this.finishReason = finishReason;\n  }\n\n  static isInstance(error: unknown): error is NoObjectGeneratedError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n\nexport function verifyNoObjectGeneratedError(\n  error: unknown,\n  expected: {\n    message: string;\n    response: LanguageModelResponseMetadata & {\n      body?: string;\n    };\n    usage: LanguageModelUsage;\n    finishReason: FinishReason;\n  },\n) {\n  expect(NoObjectGeneratedError.isInstance(error)).toBeTruthy();\n  const noObjectGeneratedError = error as NoObjectGeneratedError;\n  expect(noObjectGeneratedError.message).toEqual(expected.message);\n  expect(noObjectGeneratedError.response).toEqual(expected.response);\n  expect(noObjectGeneratedError.usage).toEqual(expected.usage);\n  expect(noObjectGeneratedError.finishReason).toEqual(expected.finishReason);\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_NoOutputGeneratedError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\nThrown when no LLM output was generated, e.g. because of errors.\n */\nexport class NoOutputGeneratedError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  constructor({\n    message = 'No output generated.',\n    cause,\n  }: {\n    message?: string;\n    cause?: Error;\n  } = {}) {\n    super({ name, message, cause });\n  }\n\n  static isInstance(error: unknown): error is NoOutputGeneratedError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_NoSuchToolError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class NoSuchToolError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly toolName: string;\n  readonly availableTools: string[] | undefined;\n\n  constructor({\n    toolName,\n    availableTools = undefined,\n    message = `Model tried to call unavailable tool '${toolName}'. ${\n      availableTools === undefined\n        ? 'No tools are available.'\n        : `Available tools: ${availableTools.join(', ')}.`\n    }`,\n  }: {\n    toolName: string;\n    availableTools?: string[] | undefined;\n    message?: string;\n  }) {\n    super({ name, message });\n\n    this.toolName = toolName;\n    this.availableTools = availableTools;\n  }\n\n  static isInstance(error: unknown): error is NoSuchToolError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError, getErrorMessage } from '@ai-sdk/provider';\nimport { InvalidToolInputError } from './invalid-tool-input-error';\nimport { NoSuchToolError } from './no-such-tool-error';\n\nconst name = 'AI_ToolCallRepairError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class ToolCallRepairError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly originalError: NoSuchToolError | InvalidToolInputError;\n\n  constructor({\n    cause,\n    originalError,\n    message = `Error repairing tool call: ${getErrorMessage(cause)}`,\n  }: {\n    message?: string;\n    cause: unknown;\n    originalError: NoSuchToolError | InvalidToolInputError;\n  }) {\n    super({ name, message, cause });\n    this.originalError = originalError;\n  }\n\n  static isInstance(error: unknown): error is ToolCallRepairError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\n/**\nError that is thrown when a model with an unsupported version is used.\n */\nexport class UnsupportedModelVersionError extends AISDKError {\n  readonly version: string;\n  readonly provider: string;\n  readonly modelId: string;\n\n  constructor(options: { version: string; provider: string; modelId: string }) {\n    super({\n      name: 'AI_UnsupportedModelVersionError',\n      message:\n        `Unsupported model version ${options.version} for provider \"${options.provider}\" and model \"${options.modelId}\". ` +\n        `AI SDK 5 only supports models that implement specification version \"v2\".`,\n    });\n\n    this.version = options.version;\n    this.provider = options.provider;\n    this.modelId = options.modelId;\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_InvalidDataContentError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class InvalidDataContentError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly content: unknown;\n\n  constructor({\n    content,\n    cause,\n    message = `Invalid data content. Expected a base64 string, Uint8Array, ArrayBuffer, or Buffer, but got ${typeof content}.`,\n  }: {\n    content: unknown;\n    cause?: unknown;\n    message?: string;\n  }) {\n    super({ name, message, cause });\n\n    this.content = content;\n  }\n\n  static isInstance(error: unknown): error is InvalidDataContentError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_InvalidMessageRoleError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class InvalidMessageRoleError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly role: string;\n\n  constructor({\n    role,\n    message = `Invalid message role: '${role}'. Must be one of: \"system\", \"user\", \"assistant\", \"tool\".`,\n  }: {\n    role: string;\n    message?: string;\n  }) {\n    super({ name, message });\n\n    this.role = role;\n  }\n\n  static isInstance(error: unknown): error is InvalidMessageRoleError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\nimport { UIMessage } from '../ui/ui-messages';\n\nconst name = 'AI_MessageConversionError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class MessageConversionError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly originalMessage: Omit<UIMessage, 'id'>;\n\n  constructor({\n    originalMessage,\n    message,\n  }: {\n    originalMessage: Omit<UIMessage, 'id'>;\n    message: string;\n  }) {\n    super({ name, message });\n\n    this.originalMessage = originalMessage;\n  }\n\n  static isInstance(error: unknown): error is MessageConversionError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_DownloadError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class DownloadError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly url: string;\n  readonly statusCode?: number;\n  readonly statusText?: string;\n\n  constructor({\n    url,\n    statusCode,\n    statusText,\n    cause,\n    message = cause == null\n      ? `Failed to download ${url}: ${statusCode} ${statusText}`\n      : `Failed to download ${url}: ${cause}`,\n  }: {\n    url: string;\n    statusCode?: number;\n    statusText?: string;\n    message?: string;\n    cause?: unknown;\n  }) {\n    super({ name, message, cause });\n\n    this.url = url;\n    this.statusCode = statusCode;\n    this.statusText = statusText;\n  }\n\n  static isInstance(error: unknown): error is DownloadError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from '@ai-sdk/provider';\n\nconst name = 'AI_RetryError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport type RetryErrorReason =\n  | 'maxRetriesExceeded'\n  | 'errorNotRetryable'\n  | 'abort';\n\nexport class RetryError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  // note: property order determines debugging output\n  readonly reason: RetryErrorReason;\n  readonly lastError: unknown;\n  readonly errors: Array<unknown>;\n\n  constructor({\n    message,\n    reason,\n    errors,\n  }: {\n    message: string;\n    reason: RetryErrorReason;\n    errors: Array<unknown>;\n  }) {\n    super({ name, message });\n\n    this.reason = reason;\n    this.errors = errors;\n\n    // separate our last error to make debugging via log easier:\n    this.lastError = errors[errors.length - 1];\n  }\n\n  static isInstance(error: unknown): error is RetryError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import {\n  LanguageModelV2FilePart,\n  LanguageModelV2Message,\n  LanguageModelV2Prompt,\n  LanguageModelV2TextPart,\n} from '@ai-sdk/provider';\nimport {\n  DataContent,\n  FilePart,\n  ImagePart,\n  isUrlSupported,\n  ModelMessage,\n  TextPart,\n} from '@ai-sdk/provider-utils';\nimport {\n  detectMediaType,\n  imageMediaTypeSignatures,\n} from '../util/detect-media-type';\nimport { download } from '../util/download';\nimport { convertToLanguageModelV2DataContent } from './data-content';\nimport { InvalidMessageRoleError } from './invalid-message-role-error';\nimport { StandardizedPrompt } from './standardize-prompt';\n\nexport async function convertToLanguageModelPrompt({\n  prompt,\n  supportedUrls,\n  downloadImplementation = download,\n}: {\n  prompt: StandardizedPrompt;\n  supportedUrls: Record<string, RegExp[]>;\n  downloadImplementation?: typeof download;\n}): Promise<LanguageModelV2Prompt> {\n  const downloadedAssets = await downloadAssets(\n    prompt.messages,\n    downloadImplementation,\n    supportedUrls,\n  );\n\n  return [\n    ...(prompt.system != null\n      ? [{ role: 'system' as const, content: prompt.system }]\n      : []),\n    ...prompt.messages.map(message =>\n      convertToLanguageModelMessage({ message, downloadedAssets }),\n    ),\n  ];\n}\n\n/**\n * Convert a ModelMessage to a LanguageModelV2Message.\n *\n * @param message The ModelMessage to convert.\n * @param downloadedAssets A map of URLs to their downloaded data. Only\n *   available if the model does not support URLs, null otherwise.\n */\nexport function convertToLanguageModelMessage({\n  message,\n  downloadedAssets,\n}: {\n  message: ModelMessage;\n  downloadedAssets: Record<\n    string,\n    { mediaType: string | undefined; data: Uint8Array }\n  >;\n}): LanguageModelV2Message {\n  const role = message.role;\n  switch (role) {\n    case 'system': {\n      return {\n        role: 'system',\n        content: message.content,\n        providerOptions: message.providerOptions,\n      };\n    }\n\n    case 'user': {\n      if (typeof message.content === 'string') {\n        return {\n          role: 'user',\n          content: [{ type: 'text', text: message.content }],\n          providerOptions: message.providerOptions,\n        };\n      }\n\n      return {\n        role: 'user',\n        content: message.content\n          .map(part => convertPartToLanguageModelPart(part, downloadedAssets))\n          // remove empty text parts:\n          .filter(part => part.type !== 'text' || part.text !== ''),\n        providerOptions: message.providerOptions,\n      };\n    }\n\n    case 'assistant': {\n      if (typeof message.content === 'string') {\n        return {\n          role: 'assistant',\n          content: [{ type: 'text', text: message.content }],\n          providerOptions: message.providerOptions,\n        };\n      }\n\n      return {\n        role: 'assistant',\n        content: message.content\n          .filter(\n            // remove empty text parts:\n            part => part.type !== 'text' || part.text !== '',\n          )\n          .map(part => {\n            const providerOptions = part.providerOptions;\n\n            switch (part.type) {\n              case 'file': {\n                const { data, mediaType } = convertToLanguageModelV2DataContent(\n                  part.data,\n                );\n                return {\n                  type: 'file',\n                  data,\n                  filename: part.filename,\n                  mediaType: mediaType ?? part.mediaType,\n                  providerOptions,\n                };\n              }\n              case 'reasoning': {\n                return {\n                  type: 'reasoning',\n                  text: part.text,\n                  providerOptions,\n                };\n              }\n              case 'text': {\n                return {\n                  type: 'text' as const,\n                  text: part.text,\n                  providerOptions,\n                };\n              }\n              case 'tool-call': {\n                return {\n                  type: 'tool-call' as const,\n                  toolCallId: part.toolCallId,\n                  toolName: part.toolName,\n                  input: part.input,\n                  providerExecuted: part.providerExecuted,\n                  providerOptions,\n                };\n              }\n              case 'tool-result': {\n                return {\n                  type: 'tool-result' as const,\n                  toolCallId: part.toolCallId,\n                  toolName: part.toolName,\n                  output: part.output,\n                  providerOptions,\n                };\n              }\n            }\n          }),\n        providerOptions: message.providerOptions,\n      };\n    }\n\n    case 'tool': {\n      return {\n        role: 'tool',\n        content: message.content.map(part => ({\n          type: 'tool-result' as const,\n          toolCallId: part.toolCallId,\n          toolName: part.toolName,\n          output: part.output,\n          providerOptions: part.providerOptions,\n        })),\n        providerOptions: message.providerOptions,\n      };\n    }\n\n    default: {\n      const _exhaustiveCheck: never = role;\n      throw new InvalidMessageRoleError({ role: _exhaustiveCheck });\n    }\n  }\n}\n\n/**\n * Downloads images and files from URLs in the messages.\n */\nasync function downloadAssets(\n  messages: ModelMessage[],\n  downloadImplementation: typeof download,\n  supportedUrls: Record<string, RegExp[]>,\n): Promise<\n  Record<string, { mediaType: string | undefined; data: Uint8Array }>\n> {\n  const urls = messages\n    .filter(message => message.role === 'user')\n    .map(message => message.content)\n    .filter((content): content is Array<TextPart | ImagePart | FilePart> =>\n      Array.isArray(content),\n    )\n    .flat()\n    .filter(\n      (part): part is ImagePart | FilePart =>\n        part.type === 'image' || part.type === 'file',\n    )\n    .map(part => {\n      const mediaType =\n        part.mediaType ?? (part.type === 'image' ? 'image/*' : undefined);\n\n      let data = part.type === 'image' ? part.image : part.data;\n      if (typeof data === 'string') {\n        try {\n          data = new URL(data);\n        } catch (ignored) {}\n      }\n\n      return { mediaType, data };\n    })\n    /**\n     * Filter out URLs that the model supports natively, so we don't download them.\n     */\n    .filter(\n      (part): part is { mediaType: string; data: URL } =>\n        part.data instanceof URL &&\n        part.mediaType != null &&\n        !isUrlSupported({\n          url: part.data.toString(),\n          mediaType: part.mediaType,\n          supportedUrls,\n        }),\n    )\n    .map(part => part.data);\n\n  // download in parallel:\n  const downloadedImages = await Promise.all(\n    urls.map(async url => ({\n      url,\n      data: await downloadImplementation({ url }),\n    })),\n  );\n\n  return Object.fromEntries(\n    downloadedImages.map(({ url, data }) => [url.toString(), data]),\n  );\n}\n\n/**\n * Convert part of a message to a LanguageModelV2Part.\n * @param part The part to convert.\n * @param downloadedAssets A map of URLs to their downloaded data. Only\n *  available if the model does not support URLs, null otherwise.\n *\n * @returns The converted part.\n */\nfunction convertPartToLanguageModelPart(\n  part: TextPart | ImagePart | FilePart,\n  downloadedAssets: Record<\n    string,\n    { mediaType: string | undefined; data: Uint8Array }\n  >,\n): LanguageModelV2TextPart | LanguageModelV2FilePart {\n  if (part.type === 'text') {\n    return {\n      type: 'text',\n      text: part.text,\n      providerOptions: part.providerOptions,\n    };\n  }\n\n  let originalData: DataContent | URL;\n  const type = part.type;\n  switch (type) {\n    case 'image':\n      originalData = part.image;\n      break;\n    case 'file':\n      originalData = part.data;\n\n      break;\n    default:\n      throw new Error(`Unsupported part type: ${type}`);\n  }\n\n  const { data: convertedData, mediaType: convertedMediaType } =\n    convertToLanguageModelV2DataContent(originalData);\n\n  let mediaType: string | undefined = convertedMediaType ?? part.mediaType;\n  let data: Uint8Array | string | URL = convertedData; // binary | base64 | url\n\n  // If the content is a URL, we check if it was downloaded:\n  if (data instanceof URL) {\n    const downloadedFile = downloadedAssets[data.toString()];\n    if (downloadedFile) {\n      data = downloadedFile.data;\n      mediaType ??= downloadedFile.mediaType;\n    }\n  }\n\n  // Now that we have the normalized data either as a URL or a Uint8Array,\n  // we can create the LanguageModelV2Part.\n  switch (type) {\n    case 'image': {\n      // When possible, try to detect the media type automatically\n      // to deal with incorrect media type inputs.\n      // When detection fails, use provided media type.\n      if (data instanceof Uint8Array || typeof data === 'string') {\n        mediaType =\n          detectMediaType({ data, signatures: imageMediaTypeSignatures }) ??\n          mediaType;\n      }\n\n      return {\n        type: 'file',\n        mediaType: mediaType ?? 'image/*', // any image\n        filename: undefined,\n        data,\n        providerOptions: part.providerOptions,\n      };\n    }\n\n    case 'file': {\n      // We must have a mediaType for files, if not, throw an error.\n      if (mediaType == null) {\n        throw new Error(`Media type is missing for file part`);\n      }\n\n      return {\n        type: 'file',\n        mediaType,\n        filename: part.filename,\n        data,\n        providerOptions: part.providerOptions,\n      };\n    }\n  }\n}\n","import { convertBase64ToUint8Array } from '@ai-sdk/provider-utils';\n\nexport const imageMediaTypeSignatures = [\n  {\n    mediaType: 'image/gif' as const,\n    bytesPrefix: [0x47, 0x49, 0x46],\n    base64Prefix: 'R0lG',\n  },\n  {\n    mediaType: 'image/png' as const,\n    bytesPrefix: [0x89, 0x50, 0x4e, 0x47],\n    base64Prefix: 'iVBORw',\n  },\n  {\n    mediaType: 'image/jpeg' as const,\n    bytesPrefix: [0xff, 0xd8],\n    base64Prefix: '/9j/',\n  },\n  {\n    mediaType: 'image/webp' as const,\n    bytesPrefix: [0x52, 0x49, 0x46, 0x46],\n    base64Prefix: 'UklGRg',\n  },\n  {\n    mediaType: 'image/bmp' as const,\n    bytesPrefix: [0x42, 0x4d],\n    base64Prefix: 'Qk',\n  },\n  {\n    mediaType: 'image/tiff' as const,\n    bytesPrefix: [0x49, 0x49, 0x2a, 0x00],\n    base64Prefix: 'SUkqAA',\n  },\n  {\n    mediaType: 'image/tiff' as const,\n    bytesPrefix: [0x4d, 0x4d, 0x00, 0x2a],\n    base64Prefix: 'TU0AKg',\n  },\n  {\n    mediaType: 'image/avif' as const,\n    bytesPrefix: [\n      0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70, 0x61, 0x76, 0x69, 0x66,\n    ],\n    base64Prefix: 'AAAAIGZ0eXBhdmlm',\n  },\n  {\n    mediaType: 'image/heic' as const,\n    bytesPrefix: [\n      0x00, 0x00, 0x00, 0x20, 0x66, 0x74, 0x79, 0x70, 0x68, 0x65, 0x69, 0x63,\n    ],\n    base64Prefix: 'AAAAIGZ0eXBoZWlj',\n  },\n] as const;\n\nexport const audioMediaTypeSignatures = [\n  {\n    mediaType: 'audio/mpeg' as const,\n    bytesPrefix: [0xff, 0xfb],\n    base64Prefix: '//s=',\n  },\n  {\n    mediaType: 'audio/mpeg' as const,\n    bytesPrefix: [0xff, 0xfa],\n    base64Prefix: '//o=',\n  },\n  {\n    mediaType: 'audio/mpeg' as const,\n    bytesPrefix: [0xff, 0xf3],\n    base64Prefix: '//M=',\n  },\n  {\n    mediaType: 'audio/mpeg' as const,\n    bytesPrefix: [0xff, 0xf2],\n    base64Prefix: '//I=',\n  },\n  {\n    mediaType: 'audio/mpeg' as const,\n    bytesPrefix: [0xff, 0xe3],\n    base64Prefix: '/+M=',\n  },\n  {\n    mediaType: 'audio/mpeg' as const,\n    bytesPrefix: [0xff, 0xe2],\n    base64Prefix: '/+I=',\n  },\n  {\n    mediaType: 'audio/wav' as const,\n    bytesPrefix: [0x52, 0x49, 0x46, 0x46],\n    base64Prefix: 'UklGR',\n  },\n  {\n    mediaType: 'audio/ogg' as const,\n    bytesPrefix: [0x4f, 0x67, 0x67, 0x53],\n    base64Prefix: 'T2dnUw',\n  },\n  {\n    mediaType: 'audio/flac' as const,\n    bytesPrefix: [0x66, 0x4c, 0x61, 0x43],\n    base64Prefix: 'ZkxhQw',\n  },\n  {\n    mediaType: 'audio/aac' as const,\n    bytesPrefix: [0x40, 0x15, 0x00, 0x00],\n    base64Prefix: 'QBUA',\n  },\n  {\n    mediaType: 'audio/mp4' as const,\n    bytesPrefix: [0x66, 0x74, 0x79, 0x70],\n    base64Prefix: 'ZnR5cA',\n  },\n  {\n    mediaType: 'audio/webm',\n    bytesPrefix: [0x1a, 0x45, 0xdf, 0xa3],\n    base64Prefix: 'GkXf',\n  },\n] as const;\n\nconst stripID3 = (data: Uint8Array | string) => {\n  const bytes =\n    typeof data === 'string' ? convertBase64ToUint8Array(data) : data;\n  const id3Size =\n    ((bytes[6] & 0x7f) << 21) |\n    ((bytes[7] & 0x7f) << 14) |\n    ((bytes[8] & 0x7f) << 7) |\n    (bytes[9] & 0x7f);\n\n  // The raw MP3 starts here\n  return bytes.slice(id3Size + 10);\n};\n\nfunction stripID3TagsIfPresent(data: Uint8Array | string): Uint8Array | string {\n  const hasId3 =\n    (typeof data === 'string' && data.startsWith('SUQz')) ||\n    (typeof data !== 'string' &&\n      data.length > 10 &&\n      data[0] === 0x49 && // 'I'\n      data[1] === 0x44 && // 'D'\n      data[2] === 0x33); // '3'\n\n  return hasId3 ? stripID3(data) : data;\n}\n\n/**\n * Detect the media IANA media type of a file using a list of signatures.\n *\n * @param data - The file data.\n * @param signatures - The signatures to use for detection.\n * @returns The media type of the file.\n */\nexport function detectMediaType({\n  data,\n  signatures,\n}: {\n  data: Uint8Array | string;\n  signatures: typeof audioMediaTypeSignatures | typeof imageMediaTypeSignatures;\n}): (typeof signatures)[number]['mediaType'] | undefined {\n  const processedData = stripID3TagsIfPresent(data);\n\n  for (const signature of signatures) {\n    if (\n      typeof processedData === 'string'\n        ? processedData.startsWith(signature.base64Prefix)\n        : processedData.length >= signature.bytesPrefix.length &&\n          signature.bytesPrefix.every(\n            (byte, index) => processedData[index] === byte,\n          )\n    ) {\n      return signature.mediaType;\n    }\n  }\n\n  return undefined;\n}\n","import { DownloadError } from './download-error';\n\nexport async function download({ url }: { url: URL }): Promise<{\n  data: Uint8Array;\n  mediaType: string | undefined;\n}> {\n  const urlText = url.toString();\n  try {\n    const response = await fetch(urlText);\n\n    if (!response.ok) {\n      throw new DownloadError({\n        url: urlText,\n        statusCode: response.status,\n        statusText: response.statusText,\n      });\n    }\n\n    return {\n      data: new Uint8Array(await response.arrayBuffer()),\n      mediaType: response.headers.get('content-type') ?? undefined,\n    };\n  } catch (error) {\n    if (DownloadError.isInstance(error)) {\n      throw error;\n    }\n\n    throw new DownloadError({ url: urlText, cause: error });\n  }\n}\n","import { AISDKError, LanguageModelV2DataContent } from '@ai-sdk/provider';\nimport {\n  convertBase64ToUint8Array,\n  convertUint8ArrayToBase64,\n  DataContent,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { InvalidDataContentError } from './invalid-data-content-error';\nimport { splitDataUrl } from './split-data-url';\n\n/**\n@internal\n */\nexport const dataContentSchema: z.ZodType<DataContent> = z.union([\n  z.string(),\n  z.instanceof(Uint8Array),\n  z.instanceof(ArrayBuffer),\n  z.custom<Buffer>(\n    // Buffer might not be available in some environments such as CloudFlare:\n    (value: unknown): value is Buffer =>\n      globalThis.Buffer?.isBuffer(value) ?? false,\n    { message: 'Must be a Buffer' },\n  ),\n]);\n\nexport function convertToLanguageModelV2DataContent(\n  content: DataContent | URL,\n): {\n  data: LanguageModelV2DataContent;\n  mediaType: string | undefined;\n} {\n  // Buffer & Uint8Array:\n  if (content instanceof Uint8Array) {\n    return { data: content, mediaType: undefined };\n  }\n\n  // ArrayBuffer needs conversion to Uint8Array (lightweight):\n  if (content instanceof ArrayBuffer) {\n    return { data: new Uint8Array(content), mediaType: undefined };\n  }\n\n  // Attempt to create a URL from the data. If it fails, we can assume the data\n  // is not a URL and likely some other sort of data.\n  if (typeof content === 'string') {\n    try {\n      content = new URL(content);\n    } catch (error) {\n      // ignored\n    }\n  }\n\n  // Extract data from data URL:\n  if (content instanceof URL && content.protocol === 'data:') {\n    const { mediaType: dataUrlMediaType, base64Content } = splitDataUrl(\n      content.toString(),\n    );\n\n    if (dataUrlMediaType == null || base64Content == null) {\n      throw new AISDKError({\n        name: 'InvalidDataContentError',\n        message: `Invalid data URL format in content ${content.toString()}`,\n      });\n    }\n\n    return { data: base64Content, mediaType: dataUrlMediaType };\n  }\n\n  return { data: content, mediaType: undefined };\n}\n\n/**\nConverts data content to a base64-encoded string.\n\n@param content - Data content to convert.\n@returns Base64-encoded string.\n*/\nexport function convertDataContentToBase64String(content: DataContent): string {\n  if (typeof content === 'string') {\n    return content;\n  }\n\n  if (content instanceof ArrayBuffer) {\n    return convertUint8ArrayToBase64(new Uint8Array(content));\n  }\n\n  return convertUint8ArrayToBase64(content);\n}\n\n/**\nConverts data content to a Uint8Array.\n\n@param content - Data content to convert.\n@returns Uint8Array.\n */\nexport function convertDataContentToUint8Array(\n  content: DataContent,\n): Uint8Array {\n  if (content instanceof Uint8Array) {\n    return content;\n  }\n\n  if (typeof content === 'string') {\n    try {\n      return convertBase64ToUint8Array(content);\n    } catch (error) {\n      throw new InvalidDataContentError({\n        message:\n          'Invalid data content. Content string is not a base64-encoded media.',\n        content,\n        cause: error,\n      });\n    }\n  }\n\n  if (content instanceof ArrayBuffer) {\n    return new Uint8Array(content);\n  }\n\n  throw new InvalidDataContentError({ content });\n}\n\n/**\n * Converts a Uint8Array to a string of text.\n *\n * @param uint8Array - The Uint8Array to convert.\n * @returns The converted string.\n */\nexport function convertUint8ArrayToText(uint8Array: Uint8Array): string {\n  try {\n    return new TextDecoder().decode(uint8Array);\n  } catch (error) {\n    throw new Error('Error decoding Uint8Array to text');\n  }\n}\n","export function splitDataUrl(dataUrl: string): {\n  mediaType: string | undefined;\n  base64Content: string | undefined;\n} {\n  try {\n    const [header, base64Content] = dataUrl.split(',');\n    return {\n      mediaType: header.split(';')[0].split(':')[1],\n      base64Content,\n    };\n  } catch (error) {\n    return {\n      mediaType: undefined,\n      base64Content: undefined,\n    };\n  }\n}\n","import { InvalidArgumentError } from '../error/invalid-argument-error';\nimport { CallSettings } from './call-settings';\n\n/**\n * Validates call settings and returns a new object with limited values.\n */\nexport function prepareCallSettings({\n  maxOutputTokens,\n  temperature,\n  topP,\n  topK,\n  presencePenalty,\n  frequencyPenalty,\n  seed,\n  stopSequences,\n}: Omit<CallSettings, 'abortSignal' | 'headers' | 'maxRetries'>): Omit<\n  CallSettings,\n  'abortSignal' | 'headers' | 'maxRetries'\n> {\n  if (maxOutputTokens != null) {\n    if (!Number.isInteger(maxOutputTokens)) {\n      throw new InvalidArgumentError({\n        parameter: 'maxOutputTokens',\n        value: maxOutputTokens,\n        message: 'maxOutputTokens must be an integer',\n      });\n    }\n\n    if (maxOutputTokens < 1) {\n      throw new InvalidArgumentError({\n        parameter: 'maxOutputTokens',\n        value: maxOutputTokens,\n        message: 'maxOutputTokens must be >= 1',\n      });\n    }\n  }\n\n  if (temperature != null) {\n    if (typeof temperature !== 'number') {\n      throw new InvalidArgumentError({\n        parameter: 'temperature',\n        value: temperature,\n        message: 'temperature must be a number',\n      });\n    }\n  }\n\n  if (topP != null) {\n    if (typeof topP !== 'number') {\n      throw new InvalidArgumentError({\n        parameter: 'topP',\n        value: topP,\n        message: 'topP must be a number',\n      });\n    }\n  }\n\n  if (topK != null) {\n    if (typeof topK !== 'number') {\n      throw new InvalidArgumentError({\n        parameter: 'topK',\n        value: topK,\n        message: 'topK must be a number',\n      });\n    }\n  }\n\n  if (presencePenalty != null) {\n    if (typeof presencePenalty !== 'number') {\n      throw new InvalidArgumentError({\n        parameter: 'presencePenalty',\n        value: presencePenalty,\n        message: 'presencePenalty must be a number',\n      });\n    }\n  }\n\n  if (frequencyPenalty != null) {\n    if (typeof frequencyPenalty !== 'number') {\n      throw new InvalidArgumentError({\n        parameter: 'frequencyPenalty',\n        value: frequencyPenalty,\n        message: 'frequencyPenalty must be a number',\n      });\n    }\n  }\n\n  if (seed != null) {\n    if (!Number.isInteger(seed)) {\n      throw new InvalidArgumentError({\n        parameter: 'seed',\n        value: seed,\n        message: 'seed must be an integer',\n      });\n    }\n  }\n\n  return {\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    presencePenalty,\n    frequencyPenalty,\n    stopSequences,\n    seed,\n  };\n}\n","import {\n  LanguageModelV2FunctionTool,\n  LanguageModelV2ProviderDefinedTool,\n  LanguageModelV2ToolChoice,\n} from '@ai-sdk/provider';\nimport { asSchema } from '@ai-sdk/provider-utils';\nimport { isNonEmptyObject } from '../util/is-non-empty-object';\nimport { ToolSet } from '../generate-text';\nimport { ToolChoice } from '../types/language-model';\n\nexport function prepareToolsAndToolChoice<TOOLS extends ToolSet>({\n  tools,\n  toolChoice,\n  activeTools,\n}: {\n  tools: TOOLS | undefined;\n  toolChoice: ToolChoice<TOOLS> | undefined;\n  activeTools: Array<keyof TOOLS> | undefined;\n}): {\n  tools:\n    | Array<LanguageModelV2FunctionTool | LanguageModelV2ProviderDefinedTool>\n    | undefined;\n  toolChoice: LanguageModelV2ToolChoice | undefined;\n} {\n  if (!isNonEmptyObject(tools)) {\n    return {\n      tools: undefined,\n      toolChoice: undefined,\n    };\n  }\n\n  // when activeTools is provided, we only include the tools that are in the list:\n  const filteredTools =\n    activeTools != null\n      ? Object.entries(tools).filter(([name]) =>\n          activeTools.includes(name as keyof TOOLS),\n        )\n      : Object.entries(tools);\n\n  return {\n    tools: filteredTools.map(([name, tool]) => {\n      const toolType = tool.type;\n      switch (toolType) {\n        case undefined:\n        case 'dynamic':\n        case 'function':\n          return {\n            type: 'function' as const,\n            name,\n            description: tool.description,\n            inputSchema: asSchema(tool.inputSchema).jsonSchema,\n            providerOptions: tool.providerOptions,\n          };\n        case 'provider-defined':\n          return {\n            type: 'provider-defined' as const,\n            name,\n            id: tool.id,\n            args: tool.args,\n          };\n        default: {\n          const exhaustiveCheck: never = toolType;\n          throw new Error(`Unsupported tool type: ${exhaustiveCheck}`);\n        }\n      }\n    }),\n    toolChoice:\n      toolChoice == null\n        ? { type: 'auto' }\n        : typeof toolChoice === 'string'\n          ? { type: toolChoice }\n          : { type: 'tool' as const, toolName: toolChoice.toolName as string },\n  };\n}\n","export function isNonEmptyObject(\n  object: Record<string, unknown> | undefined | null,\n): object is Record<string, unknown> {\n  return object != null && Object.keys(object).length > 0;\n}\n","import { InvalidPromptError } from '@ai-sdk/provider';\nimport { ModelMessage, safeValidateTypes } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { modelMessageSchema } from './message';\nimport { Prompt } from './prompt';\n\nexport type StandardizedPrompt = {\n  /**\n   * System message.\n   */\n  system?: string;\n\n  /**\n   * Messages.\n   */\n  messages: ModelMessage[];\n};\n\nexport async function standardizePrompt(\n  prompt: Prompt,\n): Promise<StandardizedPrompt> {\n  if (prompt.prompt == null && prompt.messages == null) {\n    throw new InvalidPromptError({\n      prompt,\n      message: 'prompt or messages must be defined',\n    });\n  }\n\n  if (prompt.prompt != null && prompt.messages != null) {\n    throw new InvalidPromptError({\n      prompt,\n      message: 'prompt and messages cannot be defined at the same time',\n    });\n  }\n\n  // validate that system is a string\n  if (prompt.system != null && typeof prompt.system !== 'string') {\n    throw new InvalidPromptError({\n      prompt,\n      message: 'system must be a string',\n    });\n  }\n\n  let messages: ModelMessage[];\n\n  if (prompt.prompt != null && typeof prompt.prompt === 'string') {\n    messages = [{ role: 'user', content: prompt.prompt }];\n  } else if (prompt.prompt != null && Array.isArray(prompt.prompt)) {\n    messages = prompt.prompt;\n  } else if (prompt.messages != null) {\n    messages = prompt.messages;\n  } else {\n    throw new InvalidPromptError({\n      prompt,\n      message: 'prompt or messages must be defined',\n    });\n  }\n\n  if (messages.length === 0) {\n    throw new InvalidPromptError({\n      prompt,\n      message: 'messages must not be empty',\n    });\n  }\n\n  const validationResult = await safeValidateTypes({\n    value: messages,\n    schema: z.array(modelMessageSchema),\n  });\n\n  if (!validationResult.success) {\n    throw new InvalidPromptError({\n      prompt,\n      message:\n        'The messages must be a ModelMessage[]. ' +\n        'If you have passed a UIMessage[], you can use convertToModelMessages to convert them.',\n      cause: validationResult.error,\n    });\n  }\n\n  return {\n    messages,\n    system: prompt.system,\n  };\n}\n","import {\n  AssistantModelMessage,\n  ModelMessage,\n  SystemModelMessage,\n  ToolModelMessage,\n  UserModelMessage,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { providerMetadataSchema } from '../types/provider-metadata';\nimport {\n  filePartSchema,\n  imagePartSchema,\n  reasoningPartSchema,\n  textPartSchema,\n  toolCallPartSchema,\n  toolResultPartSchema,\n} from './content-part';\n\n/**\n@deprecated Use `SystemModelMessage` instead.\n */\n// TODO remove in AI SDK 6\nexport type CoreSystemMessage = SystemModelMessage;\n\nexport const systemModelMessageSchema: z.ZodType<SystemModelMessage> = z.object(\n  {\n    role: z.literal('system'),\n    content: z.string(),\n    providerOptions: providerMetadataSchema.optional(),\n  },\n);\n\n/**\n@deprecated Use `systemModelMessageSchema` instead.\n */\n// TODO remove in AI SDK 6\nexport const coreSystemMessageSchema = systemModelMessageSchema;\n\n/**\n@deprecated Use `UserModelMessage` instead.\n */\n// TODO remove in AI SDK 6\nexport type CoreUserMessage = UserModelMessage;\n\nexport const userModelMessageSchema: z.ZodType<UserModelMessage> = z.object({\n  role: z.literal('user'),\n  content: z.union([\n    z.string(),\n    z.array(z.union([textPartSchema, imagePartSchema, filePartSchema])),\n  ]),\n  providerOptions: providerMetadataSchema.optional(),\n});\n\n/**\n@deprecated Use `userModelMessageSchema` instead.\n */\n// TODO remove in AI SDK 6\nexport const coreUserMessageSchema = userModelMessageSchema;\n\n/**\n@deprecated Use `AssistantModelMessage` instead.\n */\n// TODO remove in AI SDK 6\nexport type CoreAssistantMessage = AssistantModelMessage;\n\nexport const assistantModelMessageSchema: z.ZodType<AssistantModelMessage> =\n  z.object({\n    role: z.literal('assistant'),\n    content: z.union([\n      z.string(),\n      z.array(\n        z.union([\n          textPartSchema,\n          filePartSchema,\n          reasoningPartSchema,\n          toolCallPartSchema,\n          toolResultPartSchema,\n        ]),\n      ),\n    ]),\n    providerOptions: providerMetadataSchema.optional(),\n  });\n\n/**\n@deprecated Use `assistantModelMessageSchema` instead.\n */\n// TODO remove in AI SDK 6\nexport const coreAssistantMessageSchema = assistantModelMessageSchema;\n\n/**\n@deprecated Use `ToolModelMessage` instead.\n */\n// TODO remove in AI SDK 6\nexport type CoreToolMessage = ToolModelMessage;\n\nexport const toolModelMessageSchema: z.ZodType<ToolModelMessage> = z.object({\n  role: z.literal('tool'),\n  content: z.array(toolResultPartSchema),\n  providerOptions: providerMetadataSchema.optional(),\n});\n\n/**\n@deprecated Use `toolModelMessageSchema` instead.\n */\n// TODO remove in AI SDK 6\nexport const coreToolMessageSchema = toolModelMessageSchema;\n\n/**\n@deprecated Use `ModelMessage` instead.\n   */\n// TODO remove in AI SDK 6\nexport type CoreMessage = ModelMessage;\n\nexport const modelMessageSchema: z.ZodType<ModelMessage> = z.union([\n  systemModelMessageSchema,\n  userModelMessageSchema,\n  assistantModelMessageSchema,\n  toolModelMessageSchema,\n]);\n\n/**\n@deprecated Use `modelMessageSchema` instead.\n */\n// TODO remove in AI SDK 6\nexport const coreMessageSchema: z.ZodType<CoreMessage> = modelMessageSchema;\n","import { SharedV2ProviderMetadata } from '@ai-sdk/provider';\nimport { z } from 'zod/v4';\nimport { jsonValueSchema } from './json-value';\n\n/**\nAdditional provider-specific metadata that is returned from the provider.\n\nThis is needed to enable provider-specific functionality that can be\nfully encapsulated in the provider.\n */\nexport type ProviderMetadata = SharedV2ProviderMetadata;\n\nexport const providerMetadataSchema: z.ZodType<ProviderMetadata> = z.record(\n  z.string(),\n  z.record(z.string(), jsonValueSchema),\n);\n","import { JSONValue as OriginalJSONValue } from '@ai-sdk/provider';\nimport { z } from 'zod/v4';\n\nexport const jsonValueSchema: z.ZodType<JSONValue> = z.lazy(() =>\n  z.union([\n    z.null(),\n    z.string(),\n    z.number(),\n    z.boolean(),\n    z.record(z.string(), jsonValueSchema),\n    z.array(jsonValueSchema),\n  ]),\n);\n\nexport type JSONValue = OriginalJSONValue;\n","import { LanguageModelV2ToolResultOutput } from '@ai-sdk/provider';\nimport {\n  FilePart,\n  ImagePart,\n  ProviderOptions,\n  ReasoningPart,\n  TextPart,\n  ToolResultPart,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { jsonValueSchema } from '../types/json-value';\nimport { providerMetadataSchema } from '../types/provider-metadata';\nimport { dataContentSchema } from './data-content';\n\n/**\n@internal\n */\nexport const textPartSchema: z.ZodType<TextPart> = z.object({\n  type: z.literal('text'),\n  text: z.string(),\n  providerOptions: providerMetadataSchema.optional(),\n});\n\n/**\n@internal\n */\nexport const imagePartSchema: z.ZodType<ImagePart> = z.object({\n  type: z.literal('image'),\n  image: z.union([dataContentSchema, z.instanceof(URL)]),\n  mediaType: z.string().optional(),\n  providerOptions: providerMetadataSchema.optional(),\n});\n\n/**\n@internal\n */\nexport const filePartSchema: z.ZodType<FilePart> = z.object({\n  type: z.literal('file'),\n  data: z.union([dataContentSchema, z.instanceof(URL)]),\n  filename: z.string().optional(),\n  mediaType: z.string(),\n  providerOptions: providerMetadataSchema.optional(),\n});\n\n/**\n@internal\n */\nexport const reasoningPartSchema: z.ZodType<ReasoningPart> = z.object({\n  type: z.literal('reasoning'),\n  text: z.string(),\n  providerOptions: providerMetadataSchema.optional(),\n});\n\n/**\nTool call content part of a prompt. It contains a tool call (usually generated by the AI model).\n */\nexport interface ToolCallPart {\n  type: 'tool-call';\n\n  /**\nID of the tool call. This ID is used to match the tool call with the tool result.\n */\n  toolCallId: string;\n\n  /**\nName of the tool that is being called.\n */\n  toolName: string;\n\n  /**\nArguments of the tool call. This is a JSON-serializable object that matches the tool's input schema.\n   */\n  input: unknown;\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n  providerOptions?: ProviderOptions;\n}\n\n/**\n@internal\n */\nexport const toolCallPartSchema: z.ZodType<ToolCallPart> = z.object({\n  type: z.literal('tool-call'),\n  toolCallId: z.string(),\n  toolName: z.string(),\n  input: z.unknown(),\n  providerOptions: providerMetadataSchema.optional(),\n  providerExecuted: z.boolean().optional(),\n}) as z.ZodType<ToolCallPart>; // necessary bc input is optional on Zod type\n\n/**\n@internal\n */\nexport const outputSchema: z.ZodType<LanguageModelV2ToolResultOutput> =\n  z.discriminatedUnion('type', [\n    z.object({\n      type: z.literal('text'),\n      value: z.string(),\n    }),\n    z.object({\n      type: z.literal('json'),\n      value: jsonValueSchema,\n    }),\n    z.object({\n      type: z.literal('error-text'),\n      value: z.string(),\n    }),\n    z.object({\n      type: z.literal('error-json'),\n      value: jsonValueSchema,\n    }),\n    z.object({\n      type: z.literal('content'),\n      value: z.array(\n        z.union([\n          z.object({\n            type: z.literal('text'),\n            text: z.string(),\n          }),\n          z.object({\n            type: z.literal('media'),\n            data: z.string(),\n            mediaType: z.string(),\n          }),\n        ]),\n      ),\n    }),\n  ]);\n\n/**\n@internal\n */\nexport const toolResultPartSchema: z.ZodType<ToolResultPart> = z.object({\n  type: z.literal('tool-result'),\n  toolCallId: z.string(),\n  toolName: z.string(),\n  output: outputSchema,\n  providerOptions: providerMetadataSchema.optional(),\n}) as z.ZodType<ToolResultPart>; // necessary bc result is optional on Zod type\n","import {\n  GatewayAuthenticationError,\n  GatewayModelNotFoundError,\n} from '@ai-sdk/gateway';\nimport { AISDKError } from '@ai-sdk/provider';\n\nexport function wrapGatewayError(error: unknown): unknown {\n  if (\n    GatewayAuthenticationError.isInstance(error) ||\n    GatewayModelNotFoundError.isInstance(error)\n  ) {\n    return new AISDKError({\n      name: 'GatewayError',\n      message:\n        'Vercel AI Gateway access failed. ' +\n        'If you want to use AI SDK providers directly, use the providers, e.g. @ai-sdk/openai, ' +\n        'or register a different global default provider.',\n      cause: error,\n    });\n  }\n\n  return error;\n}\n","import { TelemetrySettings } from './telemetry-settings';\n\nexport function assembleOperationName({\n  operationId,\n  telemetry,\n}: {\n  operationId: string;\n  telemetry?: TelemetrySettings;\n}) {\n  return {\n    // standardized operation and resource name:\n    'operation.name': `${operationId}${\n      telemetry?.functionId != null ? ` ${telemetry.functionId}` : ''\n    }`,\n    'resource.name': telemetry?.functionId,\n\n    // detailed, AI SDK specific data:\n    'ai.operationId': operationId,\n    'ai.telemetry.functionId': telemetry?.functionId,\n  };\n}\n","import { Attributes } from '@opentelemetry/api';\nimport { CallSettings } from '../prompt/call-settings';\nimport { TelemetrySettings } from './telemetry-settings';\n\nexport function getBaseTelemetryAttributes({\n  model,\n  settings,\n  telemetry,\n  headers,\n}: {\n  model: { modelId: string; provider: string };\n  settings: Omit<CallSettings, 'abortSignal' | 'headers' | 'temperature'>;\n  telemetry: TelemetrySettings | undefined;\n  headers: Record<string, string | undefined> | undefined;\n}): Attributes {\n  return {\n    'ai.model.provider': model.provider,\n    'ai.model.id': model.modelId,\n\n    // settings:\n    ...Object.entries(settings).reduce((attributes, [key, value]) => {\n      attributes[`ai.settings.${key}`] = value;\n      return attributes;\n    }, {} as Attributes),\n\n    // add metadata as attributes:\n    ...Object.entries(telemetry?.metadata ?? {}).reduce(\n      (attributes, [key, value]) => {\n        attributes[`ai.telemetry.metadata.${key}`] = value;\n        return attributes;\n      },\n      {} as Attributes,\n    ),\n\n    // request headers\n    ...Object.entries(headers ?? {}).reduce((attributes, [key, value]) => {\n      if (value !== undefined) {\n        attributes[`ai.request.headers.${key}`] = value;\n      }\n      return attributes;\n    }, {} as Attributes),\n  };\n}\n","import { Tracer, trace } from '@opentelemetry/api';\nimport { noopTracer } from './noop-tracer';\n\nexport function getTracer({\n  isEnabled = false,\n  tracer,\n}: {\n  isEnabled?: boolean;\n  tracer?: Tracer;\n} = {}): Tracer {\n  if (!isEnabled) {\n    return noopTracer;\n  }\n\n  if (tracer) {\n    return tracer;\n  }\n\n  return trace.getTracer('ai');\n}\n","import { Span, SpanContext, Tracer } from '@opentelemetry/api';\n\n/**\n * Tracer implementation that does nothing (null object).\n */\nexport const noopTracer: Tracer = {\n  startSpan(): Span {\n    return noopSpan;\n  },\n\n  startActiveSpan<F extends (span: Span) => unknown>(\n    name: unknown,\n    arg1: unknown,\n    arg2?: unknown,\n    arg3?: F,\n  ): ReturnType<any> {\n    if (typeof arg1 === 'function') {\n      return arg1(noopSpan);\n    }\n    if (typeof arg2 === 'function') {\n      return arg2(noopSpan);\n    }\n    if (typeof arg3 === 'function') {\n      return arg3(noopSpan);\n    }\n  },\n};\n\nconst noopSpan: Span = {\n  spanContext() {\n    return noopSpanContext;\n  },\n  setAttribute() {\n    return this;\n  },\n  setAttributes() {\n    return this;\n  },\n  addEvent() {\n    return this;\n  },\n  addLink() {\n    return this;\n  },\n  addLinks() {\n    return this;\n  },\n  setStatus() {\n    return this;\n  },\n  updateName() {\n    return this;\n  },\n  end() {\n    return this;\n  },\n  isRecording() {\n    return false;\n  },\n  recordException() {\n    return this;\n  },\n};\n\nconst noopSpanContext: SpanContext = {\n  traceId: '',\n  spanId: '',\n  traceFlags: 0,\n};\n","import { Attributes, Span, Tracer, SpanStatusCode } from '@opentelemetry/api';\n\nexport function recordSpan<T>({\n  name,\n  tracer,\n  attributes,\n  fn,\n  endWhenDone = true,\n}: {\n  name: string;\n  tracer: Tracer;\n  attributes: Attributes;\n  fn: (span: Span) => Promise<T>;\n  endWhenDone?: boolean;\n}) {\n  return tracer.startActiveSpan(name, { attributes }, async span => {\n    try {\n      const result = await fn(span);\n\n      if (endWhenDone) {\n        span.end();\n      }\n\n      return result;\n    } catch (error) {\n      try {\n        recordErrorOnSpan(span, error);\n      } finally {\n        // always stop the span when there is an error:\n        span.end();\n      }\n\n      throw error;\n    }\n  });\n}\n\n/**\n * Record an error on a span. If the error is an instance of Error, an exception event will be recorded on the span, otherwise\n * the span will be set to an error status.\n *\n * @param span - The span to record the error on.\n * @param error - The error to record on the span.\n */\nexport function recordErrorOnSpan(span: Span, error: unknown) {\n  if (error instanceof Error) {\n    span.recordException({\n      name: error.name,\n      message: error.message,\n      stack: error.stack,\n    });\n    span.setStatus({\n      code: SpanStatusCode.ERROR,\n      message: error.message,\n    });\n  } else {\n    span.setStatus({ code: SpanStatusCode.ERROR });\n  }\n}\n","import type { Attributes, AttributeValue } from '@opentelemetry/api';\nimport type { TelemetrySettings } from './telemetry-settings';\n\nexport function selectTelemetryAttributes({\n  telemetry,\n  attributes,\n}: {\n  telemetry?: TelemetrySettings;\n  attributes: {\n    [attributeKey: string]:\n      | AttributeValue\n      | { input: () => AttributeValue | undefined }\n      | { output: () => AttributeValue | undefined }\n      | undefined;\n  };\n}): Attributes {\n  // when telemetry is disabled, return an empty object to avoid serialization overhead:\n  if (telemetry?.isEnabled !== true) {\n    return {};\n  }\n\n  return Object.entries(attributes).reduce((attributes, [key, value]) => {\n    if (value == null) {\n      return attributes;\n    }\n\n    // input value, check if it should be recorded:\n    if (\n      typeof value === 'object' &&\n      'input' in value &&\n      typeof value.input === 'function'\n    ) {\n      // default to true:\n      if (telemetry?.recordInputs === false) {\n        return attributes;\n      }\n\n      const result = value.input();\n\n      return result == null ? attributes : { ...attributes, [key]: result };\n    }\n\n    // output value, check if it should be recorded:\n    if (\n      typeof value === 'object' &&\n      'output' in value &&\n      typeof value.output === 'function'\n    ) {\n      // default to true:\n      if (telemetry?.recordOutputs === false) {\n        return attributes;\n      }\n\n      const result = value.output();\n\n      return result == null ? attributes : { ...attributes, [key]: result };\n    }\n\n    // value is an attribute value already:\n    return { ...attributes, [key]: value };\n  }, {});\n}\n","import {\n  LanguageModelV2Message,\n  LanguageModelV2Prompt,\n} from '@ai-sdk/provider';\nimport { convertDataContentToBase64String } from '../prompt/data-content';\n\n/**\n * Helper utility to serialize prompt content for OpenTelemetry tracing.\n * It is initially created because normalized LanguageModelV1Prompt carries\n * images as Uint8Arrays, on which JSON.stringify acts weirdly, converting\n * them to objects with stringified indices as keys, e.g. {\"0\": 42, \"1\": 69 }.\n */\nexport function stringifyForTelemetry(prompt: LanguageModelV2Prompt): string {\n  return JSON.stringify(\n    prompt.map((message: LanguageModelV2Message) => ({\n      ...message,\n      content:\n        typeof message.content === 'string'\n          ? message.content\n          : message.content.map(part =>\n              part.type === 'file'\n                ? {\n                    ...part,\n                    data:\n                      part.data instanceof Uint8Array\n                        ? convertDataContentToBase64String(part.data)\n                        : part.data,\n                  }\n                : part,\n            ),\n    })),\n  );\n}\n","import { LanguageModelV2Usage } from '@ai-sdk/provider';\n\n/**\nRepresents the number of tokens used in a prompt and completion.\n */\nexport type LanguageModelUsage = LanguageModelV2Usage;\n\n/**\nRepresents the number of tokens used in an embedding.\n */\n// TODO replace with EmbeddingModelV2Usage\nexport type EmbeddingModelUsage = {\n  /**\nThe number of tokens used in the embedding.\n   */\n  tokens: number;\n};\n\nexport function addLanguageModelUsage(\n  usage1: LanguageModelUsage,\n  usage2: LanguageModelUsage,\n): LanguageModelUsage {\n  return {\n    inputTokens: addTokenCounts(usage1.inputTokens, usage2.inputTokens),\n    outputTokens: addTokenCounts(usage1.outputTokens, usage2.outputTokens),\n    totalTokens: addTokenCounts(usage1.totalTokens, usage2.totalTokens),\n    reasoningTokens: addTokenCounts(\n      usage1.reasoningTokens,\n      usage2.reasoningTokens,\n    ),\n    cachedInputTokens: addTokenCounts(\n      usage1.cachedInputTokens,\n      usage2.cachedInputTokens,\n    ),\n  };\n}\n\nfunction addTokenCounts(\n  tokenCount1: number | undefined,\n  tokenCount2: number | undefined,\n): number | undefined {\n  return tokenCount1 == null && tokenCount2 == null\n    ? undefined\n    : (tokenCount1 ?? 0) + (tokenCount2 ?? 0);\n}\n","export function asArray<T>(value: T | T[] | undefined): T[] {\n  return value === undefined ? [] : Array.isArray(value) ? value : [value];\n}\n","import { APICallError } from '@ai-sdk/provider';\nimport { delay, getErrorMessage, isAbortError } from '@ai-sdk/provider-utils';\nimport { RetryError } from './retry-error';\n\nexport type RetryFunction = <OUTPUT>(\n  fn: () => PromiseLike<OUTPUT>,\n) => PromiseLike<OUTPUT>;\n\nfunction getRetryDelayInMs({\n  error,\n  exponentialBackoffDelay,\n}: {\n  error: APICallError;\n  exponentialBackoffDelay: number;\n}): number {\n  const headers = error.responseHeaders;\n\n  if (!headers) return exponentialBackoffDelay;\n\n  let ms: number | undefined;\n\n  // retry-ms is more precise than retry-after and used by e.g. OpenAI\n  const retryAfterMs = headers['retry-after-ms'];\n  if (retryAfterMs) {\n    const timeoutMs = parseFloat(retryAfterMs);\n    if (!Number.isNaN(timeoutMs)) {\n      ms = timeoutMs;\n    }\n  }\n\n  // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n  const retryAfter = headers['retry-after'];\n  if (retryAfter && ms === undefined) {\n    const timeoutSeconds = parseFloat(retryAfter);\n    if (!Number.isNaN(timeoutSeconds)) {\n      ms = timeoutSeconds * 1000;\n    } else {\n      ms = Date.parse(retryAfter) - Date.now();\n    }\n  }\n\n  // check that the delay is reasonable:\n  if (\n    ms != null &&\n    !Number.isNaN(ms) &&\n    0 <= ms &&\n    (ms < 60 * 1000 || ms < exponentialBackoffDelay)\n  ) {\n    return ms;\n  }\n\n  return exponentialBackoffDelay;\n}\n\n/**\nThe `retryWithExponentialBackoffRespectingRetryHeaders` strategy retries a failed API call with an exponential backoff,\nwhile respecting rate limit headers (retry-after-ms and retry-after) if they are provided and reasonable (0-60 seconds).\nYou can configure the maximum number of retries, the initial delay, and the backoff factor.\n */\nexport const retryWithExponentialBackoffRespectingRetryHeaders =\n  ({\n    maxRetries = 2,\n    initialDelayInMs = 2000,\n    backoffFactor = 2,\n    abortSignal,\n  }: {\n    maxRetries?: number;\n    initialDelayInMs?: number;\n    backoffFactor?: number;\n    abortSignal?: AbortSignal;\n  } = {}): RetryFunction =>\n  async <OUTPUT>(f: () => PromiseLike<OUTPUT>) =>\n    _retryWithExponentialBackoff(f, {\n      maxRetries,\n      delayInMs: initialDelayInMs,\n      backoffFactor,\n      abortSignal,\n    });\n\nasync function _retryWithExponentialBackoff<OUTPUT>(\n  f: () => PromiseLike<OUTPUT>,\n  {\n    maxRetries,\n    delayInMs,\n    backoffFactor,\n    abortSignal,\n  }: {\n    maxRetries: number;\n    delayInMs: number;\n    backoffFactor: number;\n    abortSignal: AbortSignal | undefined;\n  },\n  errors: unknown[] = [],\n): Promise<OUTPUT> {\n  try {\n    return await f();\n  } catch (error) {\n    if (isAbortError(error)) {\n      throw error; // don't retry when the request was aborted\n    }\n\n    if (maxRetries === 0) {\n      throw error; // don't wrap the error when retries are disabled\n    }\n\n    const errorMessage = getErrorMessage(error);\n    const newErrors = [...errors, error];\n    const tryNumber = newErrors.length;\n\n    if (tryNumber > maxRetries) {\n      throw new RetryError({\n        message: `Failed after ${tryNumber} attempts. Last error: ${errorMessage}`,\n        reason: 'maxRetriesExceeded',\n        errors: newErrors,\n      });\n    }\n\n    if (\n      error instanceof Error &&\n      APICallError.isInstance(error) &&\n      error.isRetryable === true &&\n      tryNumber <= maxRetries\n    ) {\n      await delay(\n        getRetryDelayInMs({\n          error,\n          exponentialBackoffDelay: delayInMs,\n        }),\n        { abortSignal },\n      );\n\n      return _retryWithExponentialBackoff(\n        f,\n        {\n          maxRetries,\n          delayInMs: backoffFactor * delayInMs,\n          backoffFactor,\n          abortSignal,\n        },\n        newErrors,\n      );\n    }\n\n    if (tryNumber === 1) {\n      throw error; // don't wrap the error when a non-retryable error occurs on the first try\n    }\n\n    throw new RetryError({\n      message: `Failed after ${tryNumber} attempts with non-retryable error: '${errorMessage}'`,\n      reason: 'errorNotRetryable',\n      errors: newErrors,\n    });\n  }\n}\n","import { InvalidArgumentError } from '../error/invalid-argument-error';\nimport {\n  RetryFunction,\n  retryWithExponentialBackoffRespectingRetryHeaders,\n} from '../util/retry-with-exponential-backoff';\n\n/**\n * Validate and prepare retries.\n */\nexport function prepareRetries({\n  maxRetries,\n  abortSignal,\n}: {\n  maxRetries: number | undefined;\n  abortSignal: AbortSignal | undefined;\n}): {\n  maxRetries: number;\n  retry: RetryFunction;\n} {\n  if (maxRetries != null) {\n    if (!Number.isInteger(maxRetries)) {\n      throw new InvalidArgumentError({\n        parameter: 'maxRetries',\n        value: maxRetries,\n        message: 'maxRetries must be an integer',\n      });\n    }\n\n    if (maxRetries < 0) {\n      throw new InvalidArgumentError({\n        parameter: 'maxRetries',\n        value: maxRetries,\n        message: 'maxRetries must be >= 0',\n      });\n    }\n  }\n\n  const maxRetriesResult = maxRetries ?? 2;\n\n  return {\n    maxRetries: maxRetriesResult,\n    retry: retryWithExponentialBackoffRespectingRetryHeaders({\n      maxRetries: maxRetriesResult,\n      abortSignal,\n    }),\n  };\n}\n","import { LanguageModelV2Content, LanguageModelV2Text } from '@ai-sdk/provider';\n\nexport function extractTextContent(\n  content: LanguageModelV2Content[],\n): string | undefined {\n  const parts = content.filter(\n    (content): content is LanguageModelV2Text => content.type === 'text',\n  );\n\n  if (parts.length === 0) {\n    return undefined;\n  }\n\n  return parts.map(content => content.text).join('');\n}\n","import {\n  convertBase64ToUint8Array,\n  convertUint8ArrayToBase64,\n} from '@ai-sdk/provider-utils';\n\n/**\n * A generated file.\n */\nexport interface GeneratedFile {\n  /**\nFile as a base64 encoded string.\n     */\n  readonly base64: string;\n\n  /**\nFile as a Uint8Array.\n     */\n  readonly uint8Array: Uint8Array;\n\n  /**\nThe IANA media type of the file.\n\n@see https://www.iana.org/assignments/media-types/media-types.xhtml\n   */\n  readonly mediaType: string;\n}\n\nexport class DefaultGeneratedFile implements GeneratedFile {\n  private base64Data: string | undefined;\n  private uint8ArrayData: Uint8Array | undefined;\n\n  readonly mediaType: string;\n\n  constructor({\n    data,\n    mediaType,\n  }: {\n    data: string | Uint8Array;\n    mediaType: string;\n  }) {\n    const isUint8Array = data instanceof Uint8Array;\n    this.base64Data = isUint8Array ? undefined : data;\n    this.uint8ArrayData = isUint8Array ? data : undefined;\n    this.mediaType = mediaType;\n  }\n\n  // lazy conversion with caching to avoid unnecessary conversion overhead:\n  get base64() {\n    if (this.base64Data == null) {\n      this.base64Data = convertUint8ArrayToBase64(this.uint8ArrayData!);\n    }\n    return this.base64Data;\n  }\n\n  // lazy conversion with caching to avoid unnecessary conversion overhead:\n  get uint8Array() {\n    if (this.uint8ArrayData == null) {\n      this.uint8ArrayData = convertBase64ToUint8Array(this.base64Data!);\n    }\n    return this.uint8ArrayData;\n  }\n}\n\nexport class DefaultGeneratedFileWithType extends DefaultGeneratedFile {\n  readonly type = 'file';\n\n  constructor(options: { data: string | Uint8Array; mediaType: string }) {\n    super(options);\n  }\n}\n","import { LanguageModelV2ToolCall } from '@ai-sdk/provider';\nimport {\n  asSchema,\n  ModelMessage,\n  safeParseJSON,\n  safeValidateTypes,\n} from '@ai-sdk/provider-utils';\nimport { InvalidToolInputError } from '../error/invalid-tool-input-error';\nimport { NoSuchToolError } from '../error/no-such-tool-error';\nimport { ToolCallRepairError } from '../error/tool-call-repair-error';\nimport { TypedToolCall } from './tool-call';\nimport { ToolCallRepairFunction } from './tool-call-repair-function';\nimport { ToolSet } from './tool-set';\n\nexport async function parseToolCall<TOOLS extends ToolSet>({\n  toolCall,\n  tools,\n  repairToolCall,\n  system,\n  messages,\n}: {\n  toolCall: LanguageModelV2ToolCall;\n  tools: TOOLS | undefined;\n  repairToolCall: ToolCallRepairFunction<TOOLS> | undefined;\n  system: string | undefined;\n  messages: ModelMessage[];\n}): Promise<TypedToolCall<TOOLS>> {\n  try {\n    if (tools == null) {\n      throw new NoSuchToolError({ toolName: toolCall.toolName });\n    }\n\n    try {\n      return await doParseToolCall({ toolCall, tools });\n    } catch (error) {\n      if (\n        repairToolCall == null ||\n        !(\n          NoSuchToolError.isInstance(error) ||\n          InvalidToolInputError.isInstance(error)\n        )\n      ) {\n        throw error;\n      }\n\n      let repairedToolCall: LanguageModelV2ToolCall | null = null;\n\n      try {\n        repairedToolCall = await repairToolCall({\n          toolCall,\n          tools,\n          inputSchema: ({ toolName }) => {\n            const { inputSchema } = tools[toolName];\n            return asSchema(inputSchema).jsonSchema;\n          },\n          system,\n          messages,\n          error,\n        });\n      } catch (repairError) {\n        throw new ToolCallRepairError({\n          cause: repairError,\n          originalError: error,\n        });\n      }\n\n      // no repaired tool call returned\n      if (repairedToolCall == null) {\n        throw error;\n      }\n\n      return await doParseToolCall({ toolCall: repairedToolCall, tools });\n    }\n  } catch (error) {\n    // TODO AI SDK 6: special invalid tool call parts\n    return {\n      type: 'tool-call',\n      toolCallId: toolCall.toolCallId,\n      toolName: toolCall.toolName,\n      input: toolCall.input,\n      dynamic: true,\n      invalid: true,\n      error,\n    };\n  }\n}\n\nasync function doParseToolCall<TOOLS extends ToolSet>({\n  toolCall,\n  tools,\n}: {\n  toolCall: LanguageModelV2ToolCall;\n  tools: TOOLS;\n}): Promise<TypedToolCall<TOOLS>> {\n  const toolName = toolCall.toolName as keyof TOOLS & string;\n\n  const tool = tools[toolName];\n\n  if (tool == null) {\n    throw new NoSuchToolError({\n      toolName: toolCall.toolName,\n      availableTools: Object.keys(tools),\n    });\n  }\n\n  const schema = asSchema(tool.inputSchema);\n\n  // when the tool call has no arguments, we try passing an empty object to the schema\n  // (many LLMs generate empty strings for tool calls with no arguments)\n  const parseResult =\n    toolCall.input.trim() === ''\n      ? await safeValidateTypes({ value: {}, schema })\n      : await safeParseJSON({ text: toolCall.input, schema });\n\n  if (parseResult.success === false) {\n    throw new InvalidToolInputError({\n      toolName,\n      toolInput: toolCall.input,\n      cause: parseResult.error,\n    });\n  }\n\n  return tool.type === 'dynamic'\n    ? {\n        type: 'tool-call',\n        toolCallId: toolCall.toolCallId,\n        toolName: toolCall.toolName,\n        input: parseResult.value,\n        providerExecuted: toolCall.providerExecuted,\n        providerMetadata: toolCall.providerMetadata,\n        dynamic: true,\n      }\n    : {\n        type: 'tool-call',\n        toolCallId: toolCall.toolCallId,\n        toolName,\n        input: parseResult.value,\n        providerExecuted: toolCall.providerExecuted,\n        providerMetadata: toolCall.providerMetadata,\n      };\n}\n","import { ReasoningPart } from '@ai-sdk/provider-utils';\nimport {\n  CallWarning,\n  FinishReason,\n  LanguageModelRequestMetadata,\n  LanguageModelResponseMetadata,\n  ProviderMetadata,\n} from '../types';\nimport { Source } from '../types/language-model';\nimport { LanguageModelUsage } from '../types/usage';\nimport { ContentPart } from './content-part';\nimport { GeneratedFile } from './generated-file';\nimport { ResponseMessage } from './response-message';\nimport { DynamicToolCall, StaticToolCall, TypedToolCall } from './tool-call';\nimport {\n  DynamicToolResult,\n  StaticToolResult,\n  TypedToolResult,\n} from './tool-result';\nimport { ToolSet } from './tool-set';\n\n/**\n * The result of a single step in the generation process.\n */\nexport type StepResult<TOOLS extends ToolSet> = {\n  /**\nThe content that was generated in the last step.\n   */\n  readonly content: Array<ContentPart<TOOLS>>;\n\n  /**\nThe generated text.\n*/\n  readonly text: string;\n\n  /**\nThe reasoning that was generated during the generation.\n*/\n  readonly reasoning: Array<ReasoningPart>;\n\n  /**\nThe reasoning text that was generated during the generation.\n*/\n  readonly reasoningText: string | undefined;\n\n  /**\nThe files that were generated during the generation.\n*/\n  readonly files: Array<GeneratedFile>;\n\n  /**\nThe sources that were used to generate the text.\n*/\n  readonly sources: Array<Source>;\n\n  /**\nThe tool calls that were made during the generation.\n*/\n  readonly toolCalls: Array<TypedToolCall<TOOLS>>;\n\n  /**\nThe static tool calls that were made in the last step.\n*/\n  readonly staticToolCalls: Array<StaticToolCall<TOOLS>>;\n\n  /**\nThe dynamic tool calls that were made in the last step.\n*/\n  readonly dynamicToolCalls: Array<DynamicToolCall>;\n\n  /**\nThe results of the tool calls.\n*/\n  readonly toolResults: Array<TypedToolResult<TOOLS>>;\n\n  /**\nThe static tool results that were made in the last step.\n*/\n  readonly staticToolResults: Array<StaticToolResult<TOOLS>>;\n\n  /**\nThe dynamic tool results that were made in the last step.\n*/\n  readonly dynamicToolResults: Array<DynamicToolResult>;\n\n  /**\nThe reason why the generation finished.\n*/\n  readonly finishReason: FinishReason;\n\n  /**\nThe token usage of the generated text.\n*/\n  readonly usage: LanguageModelUsage;\n\n  /**\nWarnings from the model provider (e.g. unsupported settings).\n*/\n  readonly warnings: CallWarning[] | undefined;\n\n  /**\nAdditional request information.\n   */\n  readonly request: LanguageModelRequestMetadata;\n\n  /**\nAdditional response information.\n*/\n  readonly response: LanguageModelResponseMetadata & {\n    /**\nThe response messages that were generated during the call.\nResponse messages can be either assistant messages or tool messages.\nThey contain a generated id.\n*/\n    readonly messages: Array<ResponseMessage>;\n\n    /**\nResponse body (available only for providers that use HTTP requests).\n     */\n    body?: unknown;\n  };\n\n  /**\nAdditional provider-specific metadata. They are passed through\nfrom the provider to the AI SDK and enable provider-specific\nresults that can be fully encapsulated in the provider.\n   */\n  readonly providerMetadata: ProviderMetadata | undefined;\n};\n\nexport class DefaultStepResult<TOOLS extends ToolSet>\n  implements StepResult<TOOLS>\n{\n  readonly content: StepResult<TOOLS>['content'];\n  readonly finishReason: StepResult<TOOLS>['finishReason'];\n  readonly usage: StepResult<TOOLS>['usage'];\n  readonly warnings: StepResult<TOOLS>['warnings'];\n  readonly request: StepResult<TOOLS>['request'];\n  readonly response: StepResult<TOOLS>['response'];\n  readonly providerMetadata: StepResult<TOOLS>['providerMetadata'];\n\n  constructor({\n    content,\n    finishReason,\n    usage,\n    warnings,\n    request,\n    response,\n    providerMetadata,\n  }: {\n    content: StepResult<TOOLS>['content'];\n    finishReason: StepResult<TOOLS>['finishReason'];\n    usage: StepResult<TOOLS>['usage'];\n    warnings: StepResult<TOOLS>['warnings'];\n    request: StepResult<TOOLS>['request'];\n    response: StepResult<TOOLS>['response'];\n    providerMetadata: StepResult<TOOLS>['providerMetadata'];\n  }) {\n    this.content = content;\n    this.finishReason = finishReason;\n    this.usage = usage;\n    this.warnings = warnings;\n    this.request = request;\n    this.response = response;\n    this.providerMetadata = providerMetadata;\n  }\n\n  get text() {\n    return this.content\n      .filter(part => part.type === 'text')\n      .map(part => part.text)\n      .join('');\n  }\n\n  get reasoning() {\n    return this.content.filter(part => part.type === 'reasoning');\n  }\n\n  get reasoningText() {\n    return this.reasoning.length === 0\n      ? undefined\n      : this.reasoning.map(part => part.text).join('');\n  }\n\n  get files() {\n    return this.content\n      .filter(part => part.type === 'file')\n      .map(part => part.file);\n  }\n\n  get sources() {\n    return this.content.filter(part => part.type === 'source');\n  }\n\n  get toolCalls() {\n    return this.content.filter(part => part.type === 'tool-call');\n  }\n\n  get staticToolCalls() {\n    return this.toolCalls.filter(\n      (toolCall): toolCall is StaticToolCall<TOOLS> =>\n        toolCall.dynamic === false,\n    );\n  }\n\n  get dynamicToolCalls() {\n    return this.toolCalls.filter(\n      (toolCall): toolCall is DynamicToolCall => toolCall.dynamic === true,\n    );\n  }\n\n  get toolResults() {\n    return this.content.filter(part => part.type === 'tool-result');\n  }\n\n  get staticToolResults() {\n    return this.toolResults.filter(\n      (toolResult): toolResult is StaticToolResult<TOOLS> =>\n        toolResult.dynamic === false,\n    );\n  }\n\n  get dynamicToolResults() {\n    return this.toolResults.filter(\n      (toolResult): toolResult is DynamicToolResult =>\n        toolResult.dynamic === true,\n    );\n  }\n}\n","import { StepResult } from './step-result';\nimport { ToolSet } from './tool-set';\n\nexport type StopCondition<TOOLS extends ToolSet> = (options: {\n  steps: Array<StepResult<TOOLS>>;\n}) => PromiseLike<boolean> | boolean;\n\nexport function stepCountIs(stepCount: number): StopCondition<any> {\n  return ({ steps }) => steps.length === stepCount;\n}\n\nexport function hasToolCall(toolName: string): StopCondition<any> {\n  return ({ steps }) =>\n    steps[steps.length - 1]?.toolCalls?.some(\n      toolCall => toolCall.toolName === toolName,\n    ) ?? false;\n}\n\nexport async function isStopConditionMet<TOOLS extends ToolSet>({\n  stopConditions,\n  steps,\n}: {\n  stopConditions: Array<StopCondition<TOOLS>>;\n  steps: Array<StepResult<TOOLS>>;\n}): Promise<boolean> {\n  return (\n    await Promise.all(stopConditions.map(condition => condition({ steps })))\n  ).some(result => result);\n}\n","import {\n  getErrorMessage,\n  JSONValue,\n  LanguageModelV2ToolResultOutput,\n} from '@ai-sdk/provider';\nimport { Tool } from '@ai-sdk/provider-utils';\n\nexport function createToolModelOutput({\n  output,\n  tool,\n  errorMode,\n}: {\n  output: unknown;\n  tool: Tool | undefined;\n  errorMode: 'none' | 'text' | 'json';\n}): LanguageModelV2ToolResultOutput {\n  if (errorMode === 'text') {\n    return { type: 'error-text', value: getErrorMessage(output) };\n  } else if (errorMode === 'json') {\n    return { type: 'error-json', value: toJSONValue(output) };\n  }\n\n  if (tool?.toModelOutput) {\n    return tool.toModelOutput(output);\n  }\n\n  return typeof output === 'string'\n    ? { type: 'text', value: output }\n    : { type: 'json', value: toJSONValue(output) };\n}\n\nfunction toJSONValue(value: unknown): JSONValue {\n  return value === undefined ? null : (value as JSONValue);\n}\n","import {\n  AssistantContent,\n  AssistantModelMessage,\n  ToolContent,\n  ToolModelMessage,\n} from '../prompt';\nimport { createToolModelOutput } from '../prompt/create-tool-model-output';\nimport { ContentPart } from './content-part';\nimport { ToolSet } from './tool-set';\n\n/**\nConverts the result of a `generateText` or `streamText` call to a list of response messages.\n */\nexport function toResponseMessages<TOOLS extends ToolSet>({\n  content: inputContent,\n  tools,\n}: {\n  content: Array<ContentPart<TOOLS>>;\n  tools: TOOLS | undefined;\n}): Array<AssistantModelMessage | ToolModelMessage> {\n  const responseMessages: Array<AssistantModelMessage | ToolModelMessage> = [];\n\n  const content: AssistantContent = inputContent\n    .filter(part => part.type !== 'source')\n    .filter(\n      part =>\n        (part.type !== 'tool-result' || part.providerExecuted) &&\n        (part.type !== 'tool-error' || part.providerExecuted),\n    )\n    .filter(part => part.type !== 'text' || part.text.length > 0)\n    .map(part => {\n      switch (part.type) {\n        case 'text':\n          return {\n            type: 'text',\n            text: part.text,\n            providerOptions: part.providerMetadata,\n          };\n        case 'reasoning':\n          return {\n            type: 'reasoning',\n            text: part.text,\n            providerOptions: part.providerMetadata,\n          };\n        case 'file':\n          return {\n            type: 'file',\n            data: part.file.base64,\n            mediaType: part.file.mediaType,\n            providerOptions: part.providerMetadata,\n          };\n        case 'tool-call':\n          return {\n            type: 'tool-call',\n            toolCallId: part.toolCallId,\n            toolName: part.toolName,\n            input: part.input,\n            providerExecuted: part.providerExecuted,\n            providerOptions: part.providerMetadata,\n          };\n        case 'tool-result':\n          return {\n            type: 'tool-result',\n            toolCallId: part.toolCallId,\n            toolName: part.toolName,\n            output: createToolModelOutput({\n              tool: tools?.[part.toolName],\n              output: part.output,\n              errorMode: 'none',\n            }),\n            providerExecuted: true,\n            providerOptions: part.providerMetadata,\n          };\n        case 'tool-error':\n          return {\n            type: 'tool-result',\n            toolCallId: part.toolCallId,\n            toolName: part.toolName,\n            output: createToolModelOutput({\n              tool: tools?.[part.toolName],\n              output: part.error,\n              errorMode: 'json',\n            }),\n            providerOptions: part.providerMetadata,\n          };\n      }\n    });\n\n  if (content.length > 0) {\n    responseMessages.push({\n      role: 'assistant',\n      content,\n    });\n  }\n\n  const toolResultContent: ToolContent = inputContent\n    .filter(part => part.type === 'tool-result' || part.type === 'tool-error')\n    .filter(part => !part.providerExecuted)\n    .map(toolResult => ({\n      type: 'tool-result',\n      toolCallId: toolResult.toolCallId,\n      toolName: toolResult.toolName,\n      output: createToolModelOutput({\n        tool: tools?.[toolResult.toolName],\n        output:\n          toolResult.type === 'tool-result'\n            ? toolResult.output\n            : toolResult.error,\n        errorMode: toolResult.type === 'tool-error' ? 'text' : 'none',\n      }),\n    }));\n\n  if (toolResultContent.length > 0) {\n    responseMessages.push({\n      role: 'tool',\n      content: toolResultContent,\n    });\n  }\n\n  return responseMessages;\n}\n","import {\n  getErrorMessage,\n  LanguageModelV2,\n  LanguageModelV2CallWarning,\n} from '@ai-sdk/provider';\nimport {\n  createIdGenerator,\n  IdGenerator,\n  isAbortError,\n  ProviderOptions,\n} from '@ai-sdk/provider-utils';\nimport { Span } from '@opentelemetry/api';\nimport { ServerResponse } from 'node:http';\nimport { NoOutputGeneratedError } from '../error';\nimport { NoOutputSpecifiedError } from '../error/no-output-specified-error';\nimport { resolveLanguageModel } from '../model/resolve-model';\nimport { CallSettings } from '../prompt/call-settings';\nimport { convertToLanguageModelPrompt } from '../prompt/convert-to-language-model-prompt';\nimport { prepareCallSettings } from '../prompt/prepare-call-settings';\nimport { prepareToolsAndToolChoice } from '../prompt/prepare-tools-and-tool-choice';\nimport { Prompt } from '../prompt/prompt';\nimport { standardizePrompt } from '../prompt/standardize-prompt';\nimport { wrapGatewayError } from '../prompt/wrap-gateway-error';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { stringifyForTelemetry } from '../telemetry/stringify-for-telemetry';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport { createTextStreamResponse } from '../text-stream/create-text-stream-response';\nimport { pipeTextStreamToResponse } from '../text-stream/pipe-text-stream-to-response';\nimport { LanguageModelRequestMetadata } from '../types';\nimport {\n  CallWarning,\n  FinishReason,\n  LanguageModel,\n  ToolChoice,\n} from '../types/language-model';\nimport { ProviderMetadata } from '../types/provider-metadata';\nimport { addLanguageModelUsage, LanguageModelUsage } from '../types/usage';\nimport { UIMessage } from '../ui';\nimport { createUIMessageStreamResponse } from '../ui-message-stream/create-ui-message-stream-response';\nimport { getResponseUIMessageId } from '../ui-message-stream/get-response-ui-message-id';\nimport { handleUIMessageStreamFinish } from '../ui-message-stream/handle-ui-message-stream-finish';\nimport { pipeUIMessageStreamToResponse } from '../ui-message-stream/pipe-ui-message-stream-to-response';\nimport {\n  InferUIMessageChunk,\n  UIMessageChunk,\n} from '../ui-message-stream/ui-message-chunks';\nimport { UIMessageStreamResponseInit } from '../ui-message-stream/ui-message-stream-response-init';\nimport { InferUIMessageData, InferUIMessageMetadata } from '../ui/ui-messages';\nimport { asArray } from '../util/as-array';\nimport {\n  AsyncIterableStream,\n  createAsyncIterableStream,\n} from '../util/async-iterable-stream';\nimport { consumeStream } from '../util/consume-stream';\nimport { createStitchableStream } from '../util/create-stitchable-stream';\nimport { DelayedPromise } from '../util/delayed-promise';\nimport { filterStreamErrors } from '../util/filter-stream-errors';\nimport { now as originalNow } from '../util/now';\nimport { prepareRetries } from '../util/prepare-retries';\nimport { ContentPart } from './content-part';\nimport { Output } from './output';\nimport { PrepareStepFunction } from './prepare-step';\nimport { ResponseMessage } from './response-message';\nimport {\n  runToolsTransformation,\n  SingleRequestTextStreamPart,\n} from './run-tools-transformation';\nimport { DefaultStepResult, StepResult } from './step-result';\nimport {\n  isStopConditionMet,\n  stepCountIs,\n  StopCondition,\n} from './stop-condition';\nimport {\n  ConsumeStreamOptions,\n  StreamTextResult,\n  TextStreamPart,\n  UIMessageStreamOptions,\n} from './stream-text-result';\nimport { toResponseMessages } from './to-response-messages';\nimport { TypedToolCall } from './tool-call';\nimport { ToolCallRepairFunction } from './tool-call-repair-function';\nimport { ToolOutput } from './tool-output';\nimport { ToolSet } from './tool-set';\n\nconst originalGenerateId = createIdGenerator({\n  prefix: 'aitxt',\n  size: 24,\n});\n\n/**\nA transformation that is applied to the stream.\n\n@param stopStream - A function that stops the source stream.\n@param tools - The tools that are accessible to and can be called by the model. The model needs to support calling tools.\n */\nexport type StreamTextTransform<TOOLS extends ToolSet> = (options: {\n  tools: TOOLS; // for type inference\n  stopStream: () => void;\n}) => TransformStream<TextStreamPart<TOOLS>, TextStreamPart<TOOLS>>;\n\n/**\nCallback that is set using the `onError` option.\n\n@param event - The event that is passed to the callback.\n */\nexport type StreamTextOnErrorCallback = (event: {\n  error: unknown;\n}) => PromiseLike<void> | void;\n\n/**\nCallback that is set using the `onStepFinish` option.\n\n@param stepResult - The result of the step.\n */\nexport type StreamTextOnStepFinishCallback<TOOLS extends ToolSet> = (\n  stepResult: StepResult<TOOLS>,\n) => PromiseLike<void> | void;\n\n/**\nCallback that is set using the `onChunk` option.\n\n@param event - The event that is passed to the callback.\n */\nexport type StreamTextOnChunkCallback<TOOLS extends ToolSet> = (event: {\n  chunk: Extract<\n    TextStreamPart<TOOLS>,\n    {\n      type:\n        | 'text-delta'\n        | 'reasoning-delta'\n        | 'source'\n        | 'tool-call'\n        | 'tool-input-start'\n        | 'tool-input-delta'\n        | 'tool-result'\n        | 'raw';\n    }\n  >;\n}) => PromiseLike<void> | void;\n\n/**\nCallback that is set using the `onFinish` option.\n\n@param event - The event that is passed to the callback.\n */\nexport type StreamTextOnFinishCallback<TOOLS extends ToolSet> = (\n  event: StepResult<TOOLS> & {\n    /**\nDetails for all steps.\n   */\n    readonly steps: StepResult<TOOLS>[];\n\n    /**\nTotal usage for all steps. This is the sum of the usage of all steps.\n     */\n    readonly totalUsage: LanguageModelUsage;\n  },\n) => PromiseLike<void> | void;\n\n/**\nCallback that is set using the `onAbort` option.\n\n@param event - The event that is passed to the callback.\n */\nexport type StreamTextOnAbortCallback<TOOLS extends ToolSet> = (event: {\n  /**\nDetails for all previously finished steps.\n   */\n  readonly steps: StepResult<TOOLS>[];\n}) => PromiseLike<void> | void;\n\n/**\nGenerate a text and call tools for a given prompt using a language model.\n\nThis function streams the output. If you do not want to stream the output, use `generateText` instead.\n\n@param model - The language model to use.\n@param tools - Tools that are accessible to and can be called by the model. The model needs to support calling tools.\n\n@param system - A system message that will be part of the prompt.\n@param prompt - A simple text prompt. You can either use `prompt` or `messages` but not both.\n@param messages - A list of messages. You can either use `prompt` or `messages` but not both.\n\n@param maxOutputTokens - Maximum number of tokens to generate.\n@param temperature - Temperature setting.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topP - Nucleus sampling.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topK - Only sample from the top K options for each subsequent token.\nUsed to remove \"long tail\" low probability responses.\nRecommended for advanced use cases only. You usually only need to use temperature.\n@param presencePenalty - Presence penalty setting.\nIt affects the likelihood of the model to repeat information that is already in the prompt.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param frequencyPenalty - Frequency penalty setting.\nIt affects the likelihood of the model to repeatedly use the same words or phrases.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param stopSequences - Stop sequences.\nIf set, the model will stop generating text when one of the stop sequences is generated.\n@param seed - The seed (integer) to use for random sampling.\nIf set and supported by the model, calls will generate deterministic results.\n\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@param maxSteps - Maximum number of sequential LLM calls (steps), e.g. when you use tool calls.\n\n@param onChunk - Callback that is called for each chunk of the stream. The stream processing will pause until the callback promise is resolved.\n@param onError - Callback that is called when an error occurs during streaming. You can use it to log errors.\n@param onStepFinish - Callback that is called when each step (LLM call) is finished, including intermediate steps.\n@param onFinish - Callback that is called when the LLM response and all request tool executions\n(for tools that have an `execute` function) are finished.\n\n@return\nA result object for accessing different stream types and additional information.\n */\nexport function streamText<\n  TOOLS extends ToolSet,\n  OUTPUT = never,\n  PARTIAL_OUTPUT = never,\n>({\n  model,\n  tools,\n  toolChoice,\n  system,\n  prompt,\n  messages,\n  maxRetries,\n  abortSignal,\n  headers,\n  stopWhen = stepCountIs(1),\n  experimental_output: output,\n  experimental_telemetry: telemetry,\n  prepareStep,\n  providerOptions,\n  experimental_activeTools,\n  activeTools = experimental_activeTools,\n  experimental_repairToolCall: repairToolCall,\n  experimental_transform: transform,\n  includeRawChunks = false,\n  onChunk,\n  onError = ({ error }) => {\n    console.error(error);\n  },\n  onFinish,\n  onAbort,\n  onStepFinish,\n  experimental_context,\n  _internal: {\n    now = originalNow,\n    generateId = originalGenerateId,\n    currentDate = () => new Date(),\n  } = {},\n  ...settings\n}: CallSettings &\n  Prompt & {\n    /**\nThe language model to use.\n     */\n    model: LanguageModel;\n\n    /**\nThe tools that the model can call. The model needs to support calling tools.\n    */\n    tools?: TOOLS;\n\n    /**\nThe tool choice strategy. Default: 'auto'.\n     */\n    toolChoice?: ToolChoice<TOOLS>;\n\n    /**\nCondition for stopping the generation when there are tool results in the last step.\nWhen the condition is an array, any of the conditions can be met to stop the generation.\n\n@default stepCountIs(1)\n     */\n    stopWhen?:\n      | StopCondition<NoInfer<TOOLS>>\n      | Array<StopCondition<NoInfer<TOOLS>>>;\n\n    /**\nOptional telemetry configuration (experimental).\n     */\n    experimental_telemetry?: TelemetrySettings;\n\n    /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n    providerOptions?: ProviderOptions;\n\n    /**\n     * @deprecated Use `activeTools` instead.\n     */\n    experimental_activeTools?: Array<keyof NoInfer<TOOLS>>;\n\n    /**\n   Limits the tools that are available for the model to call without\n   changing the tool call and result types in the result.\n        */\n    activeTools?: Array<keyof NoInfer<TOOLS>>;\n\n    /**\nOptional specification for parsing structured outputs from the LLM response.\n     */\n    experimental_output?: Output<OUTPUT, PARTIAL_OUTPUT>;\n\n    /**\nOptional function that you can use to provide different settings for a step.\n\n@param options - The options for the step.\n@param options.steps - The steps that have been executed so far.\n@param options.stepNumber - The number of the step that is being executed.\n@param options.model - The model that is being used.\n\n@returns An object that contains the settings for the step.\nIf you return undefined (or for undefined settings), the settings from the outer level will be used.\n    */\n    prepareStep?: PrepareStepFunction<NoInfer<TOOLS>>;\n\n    /**\nA function that attempts to repair a tool call that failed to parse.\n     */\n    experimental_repairToolCall?: ToolCallRepairFunction<TOOLS>;\n\n    /**\nOptional stream transformations.\nThey are applied in the order they are provided.\nThe stream transformations must maintain the stream structure for streamText to work correctly.\n     */\n    experimental_transform?:\n      | StreamTextTransform<TOOLS>\n      | Array<StreamTextTransform<TOOLS>>;\n\n    /**\nWhether to include raw chunks from the provider in the stream.\nWhen enabled, you will receive raw chunks with type 'raw' that contain the unprocessed data from the provider.\nThis allows access to cutting-edge provider features not yet wrapped by the AI SDK.\nDefaults to false.\n     */\n    includeRawChunks?: boolean;\n\n    /**\nCallback that is called for each chunk of the stream.\nThe stream processing will pause until the callback promise is resolved.\n     */\n    onChunk?: StreamTextOnChunkCallback<TOOLS>;\n\n    /**\nCallback that is invoked when an error occurs during streaming.\nYou can use it to log errors.\nThe stream processing will pause until the callback promise is resolved.\n     */\n    onError?: StreamTextOnErrorCallback;\n\n    /**\nCallback that is called when the LLM response and all request tool executions\n(for tools that have an `execute` function) are finished.\n\nThe usage is the combined usage of all steps.\n     */\n    onFinish?: StreamTextOnFinishCallback<TOOLS>;\n\n    onAbort?: StreamTextOnAbortCallback<TOOLS>;\n\n    /**\nCallback that is called when each step (LLM call) is finished, including intermediate steps.\n    */\n    onStepFinish?: StreamTextOnStepFinishCallback<TOOLS>;\n\n    /**\n     * Context that is passed into tool execution.\n     *\n     * Experimental (can break in patch releases).\n     *\n     * @default undefined\n     */\n    experimental_context?: unknown;\n\n    /**\nInternal. For test use only. May change without notice.\n     */\n    _internal?: {\n      now?: () => number;\n      generateId?: IdGenerator;\n      currentDate?: () => Date;\n    };\n  }): StreamTextResult<TOOLS, PARTIAL_OUTPUT> {\n  return new DefaultStreamTextResult<TOOLS, OUTPUT, PARTIAL_OUTPUT>({\n    model: resolveLanguageModel(model),\n    telemetry,\n    headers,\n    settings,\n    maxRetries,\n    abortSignal,\n    system,\n    prompt,\n    messages,\n    tools,\n    toolChoice,\n    transforms: asArray(transform),\n    activeTools,\n    repairToolCall,\n    stopConditions: asArray(stopWhen),\n    output,\n    providerOptions,\n    prepareStep,\n    includeRawChunks,\n    onChunk,\n    onError,\n    onFinish,\n    onAbort,\n    onStepFinish,\n    now,\n    currentDate,\n    generateId,\n    experimental_context,\n  });\n}\n\ntype EnrichedStreamPart<TOOLS extends ToolSet, PARTIAL_OUTPUT> = {\n  part: TextStreamPart<TOOLS>;\n  partialOutput: PARTIAL_OUTPUT | undefined;\n};\n\nfunction createOutputTransformStream<\n  TOOLS extends ToolSet,\n  OUTPUT,\n  PARTIAL_OUTPUT,\n>(\n  output: Output<OUTPUT, PARTIAL_OUTPUT> | undefined,\n): TransformStream<\n  TextStreamPart<TOOLS>,\n  EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>\n> {\n  if (!output) {\n    return new TransformStream<\n      TextStreamPart<TOOLS>,\n      EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>\n    >({\n      transform(chunk, controller) {\n        controller.enqueue({ part: chunk, partialOutput: undefined });\n      },\n    });\n  }\n\n  let firstTextChunkId: string | undefined = undefined;\n  let text = '';\n  let textChunk = '';\n  let lastPublishedJson = '';\n\n  function publishTextChunk({\n    controller,\n    partialOutput = undefined,\n  }: {\n    controller: TransformStreamDefaultController<\n      EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>\n    >;\n    partialOutput?: PARTIAL_OUTPUT;\n  }) {\n    controller.enqueue({\n      part: {\n        type: 'text-delta',\n        id: firstTextChunkId!,\n        text: textChunk,\n      },\n      partialOutput,\n    });\n    textChunk = '';\n  }\n\n  return new TransformStream<\n    TextStreamPart<TOOLS>,\n    EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>\n  >({\n    async transform(chunk, controller) {\n      // ensure that we publish the last text chunk before the step finish:\n      if (chunk.type === 'finish-step' && textChunk.length > 0) {\n        publishTextChunk({ controller });\n      }\n\n      if (\n        chunk.type !== 'text-delta' &&\n        chunk.type !== 'text-start' &&\n        chunk.type !== 'text-end'\n      ) {\n        controller.enqueue({ part: chunk, partialOutput: undefined });\n        return;\n      }\n\n      // we have to pick a text chunk which contains the json text\n      // since we are streaming, we have to pick the first text chunk\n      if (firstTextChunkId == null) {\n        firstTextChunkId = chunk.id;\n      } else if (chunk.id !== firstTextChunkId) {\n        controller.enqueue({ part: chunk, partialOutput: undefined });\n        return;\n      }\n\n      if (chunk.type === 'text-start') {\n        controller.enqueue({ part: chunk, partialOutput: undefined });\n        return;\n      }\n\n      if (chunk.type === 'text-end') {\n        if (textChunk.length > 0) {\n          publishTextChunk({ controller });\n        }\n        controller.enqueue({ part: chunk, partialOutput: undefined });\n        return;\n      }\n\n      text += chunk.text;\n      textChunk += chunk.text;\n\n      // only publish if partial json can be parsed:\n      const result = await output.parsePartial({ text });\n      if (result != null) {\n        // only send new json if it has changed:\n        const currentJson = JSON.stringify(result.partial);\n        if (currentJson !== lastPublishedJson) {\n          publishTextChunk({ controller, partialOutput: result.partial });\n          lastPublishedJson = currentJson;\n        }\n      }\n    },\n  });\n}\n\nclass DefaultStreamTextResult<TOOLS extends ToolSet, OUTPUT, PARTIAL_OUTPUT>\n  implements StreamTextResult<TOOLS, PARTIAL_OUTPUT>\n{\n  private readonly _totalUsage = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['usage']>\n  >();\n  private readonly _finishReason = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['finishReason']>\n  >();\n  private readonly _steps = new DelayedPromise<\n    Awaited<StreamTextResult<TOOLS, PARTIAL_OUTPUT>['steps']>\n  >();\n\n  private readonly addStream: (\n    stream: ReadableStream<TextStreamPart<TOOLS>>,\n  ) => void;\n\n  private readonly closeStream: () => void;\n\n  private baseStream: ReadableStream<EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>>;\n\n  private output: Output<OUTPUT, PARTIAL_OUTPUT> | undefined;\n\n  private includeRawChunks: boolean;\n\n  private tools: TOOLS | undefined;\n\n  constructor({\n    model,\n    telemetry,\n    headers,\n    settings,\n    maxRetries: maxRetriesArg,\n    abortSignal,\n    system,\n    prompt,\n    messages,\n    tools,\n    toolChoice,\n    transforms,\n    activeTools,\n    repairToolCall,\n    stopConditions,\n    output,\n    providerOptions,\n    prepareStep,\n    includeRawChunks,\n    now,\n    currentDate,\n    generateId,\n    onChunk,\n    onError,\n    onFinish,\n    onAbort,\n    onStepFinish,\n    experimental_context,\n  }: {\n    model: LanguageModelV2;\n    telemetry: TelemetrySettings | undefined;\n    headers: Record<string, string | undefined> | undefined;\n    settings: Omit<CallSettings, 'abortSignal' | 'headers'>;\n    maxRetries: number | undefined;\n    abortSignal: AbortSignal | undefined;\n    system: Prompt['system'];\n    prompt: Prompt['prompt'];\n    messages: Prompt['messages'];\n    tools: TOOLS | undefined;\n    toolChoice: ToolChoice<TOOLS> | undefined;\n    transforms: Array<StreamTextTransform<TOOLS>>;\n    activeTools: Array<keyof TOOLS> | undefined;\n    repairToolCall: ToolCallRepairFunction<TOOLS> | undefined;\n    stopConditions: Array<StopCondition<NoInfer<TOOLS>>>;\n    output: Output<OUTPUT, PARTIAL_OUTPUT> | undefined;\n    providerOptions: ProviderOptions | undefined;\n    prepareStep: PrepareStepFunction<NoInfer<TOOLS>> | undefined;\n    includeRawChunks: boolean;\n    now: () => number;\n    currentDate: () => Date;\n    generateId: () => string;\n    experimental_context: unknown;\n\n    // callbacks:\n    onChunk: undefined | StreamTextOnChunkCallback<TOOLS>;\n    onError: StreamTextOnErrorCallback;\n    onFinish: undefined | StreamTextOnFinishCallback<TOOLS>;\n    onAbort: undefined | StreamTextOnAbortCallback<TOOLS>;\n    onStepFinish: undefined | StreamTextOnStepFinishCallback<TOOLS>;\n  }) {\n    this.output = output;\n    this.includeRawChunks = includeRawChunks;\n    this.tools = tools;\n\n    // promise to ensure that the step has been fully processed by the event processor\n    // before a new step is started. This is required because the continuation condition\n    // needs the updated steps to determine if another step is needed.\n    let stepFinish!: DelayedPromise<void>;\n\n    let recordedContent: Array<ContentPart<TOOLS>> = [];\n    const recordedResponseMessages: Array<ResponseMessage> = [];\n    let recordedFinishReason: FinishReason | undefined = undefined;\n    let recordedTotalUsage: LanguageModelUsage | undefined = undefined;\n    let recordedRequest: LanguageModelRequestMetadata = {};\n    let recordedWarnings: Array<CallWarning> = [];\n    const recordedSteps: StepResult<TOOLS>[] = [];\n\n    let rootSpan!: Span;\n\n    let activeTextContent: Record<\n      string,\n      {\n        type: 'text';\n        text: string;\n        providerMetadata: ProviderMetadata | undefined;\n      }\n    > = {};\n\n    let activeReasoningContent: Record<\n      string,\n      {\n        type: 'reasoning';\n        text: string;\n        providerMetadata: ProviderMetadata | undefined;\n      }\n    > = {};\n\n    const eventProcessor = new TransformStream<\n      EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>,\n      EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>\n    >({\n      async transform(chunk, controller) {\n        controller.enqueue(chunk); // forward the chunk to the next stream\n\n        const { part } = chunk;\n\n        if (\n          part.type === 'text-delta' ||\n          part.type === 'reasoning-delta' ||\n          part.type === 'source' ||\n          part.type === 'tool-call' ||\n          part.type === 'tool-result' ||\n          part.type === 'tool-input-start' ||\n          part.type === 'tool-input-delta' ||\n          part.type === 'raw'\n        ) {\n          await onChunk?.({ chunk: part });\n        }\n\n        if (part.type === 'error') {\n          await onError({ error: wrapGatewayError(part.error) });\n        }\n\n        if (part.type === 'text-start') {\n          activeTextContent[part.id] = {\n            type: 'text',\n            text: '',\n            providerMetadata: part.providerMetadata,\n          };\n\n          recordedContent.push(activeTextContent[part.id]);\n        }\n\n        if (part.type === 'text-delta') {\n          const activeText = activeTextContent[part.id];\n\n          if (activeText == null) {\n            controller.enqueue({\n              part: {\n                type: 'error',\n                error: `text part ${part.id} not found`,\n              },\n              partialOutput: undefined,\n            });\n            return;\n          }\n\n          activeText.text += part.text;\n          activeText.providerMetadata =\n            part.providerMetadata ?? activeText.providerMetadata;\n        }\n\n        if (part.type === 'text-end') {\n          delete activeTextContent[part.id];\n        }\n\n        if (part.type === 'reasoning-start') {\n          activeReasoningContent[part.id] = {\n            type: 'reasoning',\n            text: '',\n            providerMetadata: part.providerMetadata,\n          };\n\n          recordedContent.push(activeReasoningContent[part.id]);\n        }\n\n        if (part.type === 'reasoning-delta') {\n          const activeReasoning = activeReasoningContent[part.id];\n\n          if (activeReasoning == null) {\n            controller.enqueue({\n              part: {\n                type: 'error',\n                error: `reasoning part ${part.id} not found`,\n              },\n              partialOutput: undefined,\n            });\n            return;\n          }\n\n          activeReasoning.text += part.text;\n          activeReasoning.providerMetadata =\n            part.providerMetadata ?? activeReasoning.providerMetadata;\n        }\n\n        if (part.type === 'reasoning-end') {\n          const activeReasoning = activeReasoningContent[part.id];\n\n          if (activeReasoning == null) {\n            controller.enqueue({\n              part: {\n                type: 'error',\n                error: `reasoning part ${part.id} not found`,\n              },\n              partialOutput: undefined,\n            });\n            return;\n          }\n\n          activeReasoning.providerMetadata =\n            part.providerMetadata ?? activeReasoning.providerMetadata;\n\n          delete activeReasoningContent[part.id];\n        }\n\n        if (part.type === 'file') {\n          recordedContent.push({ type: 'file', file: part.file });\n        }\n\n        if (part.type === 'source') {\n          recordedContent.push(part);\n        }\n\n        if (part.type === 'tool-call') {\n          recordedContent.push(part);\n        }\n\n        if (part.type === 'tool-result' && !part.preliminary) {\n          recordedContent.push(part);\n        }\n\n        if (part.type === 'tool-error') {\n          recordedContent.push(part);\n        }\n\n        if (part.type === 'start-step') {\n          recordedRequest = part.request;\n          recordedWarnings = part.warnings;\n        }\n\n        if (part.type === 'finish-step') {\n          const stepMessages = toResponseMessages({\n            content: recordedContent,\n            tools,\n          });\n\n          // Add step information (after response messages are updated):\n          const currentStepResult: StepResult<TOOLS> = new DefaultStepResult({\n            content: recordedContent,\n            finishReason: part.finishReason,\n            usage: part.usage,\n            warnings: recordedWarnings,\n            request: recordedRequest,\n            response: {\n              ...part.response,\n              messages: [...recordedResponseMessages, ...stepMessages],\n            },\n            providerMetadata: part.providerMetadata,\n          });\n\n          await onStepFinish?.(currentStepResult);\n\n          recordedSteps.push(currentStepResult);\n\n          recordedContent = [];\n          activeReasoningContent = {};\n          activeTextContent = {};\n\n          recordedResponseMessages.push(...stepMessages);\n\n          // resolve the promise to signal that the step has been fully processed\n          // by the event processor:\n          stepFinish.resolve();\n        }\n\n        if (part.type === 'finish') {\n          recordedTotalUsage = part.totalUsage;\n          recordedFinishReason = part.finishReason;\n        }\n      },\n\n      async flush(controller) {\n        try {\n          if (recordedSteps.length === 0) {\n            const error = new NoOutputGeneratedError({\n              message: 'No output generated. Check the stream for errors.',\n            });\n\n            self._finishReason.reject(error);\n            self._totalUsage.reject(error);\n            self._steps.reject(error);\n\n            return; // no steps recorded (e.g. in error scenario)\n          }\n\n          // derived:\n          const finishReason = recordedFinishReason ?? 'unknown';\n          const totalUsage = recordedTotalUsage ?? {\n            inputTokens: undefined,\n            outputTokens: undefined,\n            totalTokens: undefined,\n          };\n\n          // from finish:\n          self._finishReason.resolve(finishReason);\n          self._totalUsage.resolve(totalUsage);\n\n          // aggregate results:\n          self._steps.resolve(recordedSteps);\n\n          // call onFinish callback:\n          const finalStep = recordedSteps[recordedSteps.length - 1];\n          await onFinish?.({\n            finishReason,\n            totalUsage,\n            usage: finalStep.usage,\n            content: finalStep.content,\n            text: finalStep.text,\n            reasoningText: finalStep.reasoningText,\n            reasoning: finalStep.reasoning,\n            files: finalStep.files,\n            sources: finalStep.sources,\n            toolCalls: finalStep.toolCalls,\n            staticToolCalls: finalStep.staticToolCalls,\n            dynamicToolCalls: finalStep.dynamicToolCalls,\n            toolResults: finalStep.toolResults,\n            staticToolResults: finalStep.staticToolResults,\n            dynamicToolResults: finalStep.dynamicToolResults,\n            request: finalStep.request,\n            response: finalStep.response,\n            warnings: finalStep.warnings,\n            providerMetadata: finalStep.providerMetadata,\n            steps: recordedSteps,\n          });\n\n          // Add response information to the root span:\n          rootSpan.setAttributes(\n            selectTelemetryAttributes({\n              telemetry,\n              attributes: {\n                'ai.response.finishReason': finishReason,\n                'ai.response.text': { output: () => finalStep.text },\n                'ai.response.toolCalls': {\n                  output: () =>\n                    finalStep.toolCalls?.length\n                      ? JSON.stringify(finalStep.toolCalls)\n                      : undefined,\n                },\n                'ai.response.providerMetadata': JSON.stringify(\n                  finalStep.providerMetadata,\n                ),\n\n                'ai.usage.inputTokens': totalUsage.inputTokens,\n                'ai.usage.outputTokens': totalUsage.outputTokens,\n                'ai.usage.totalTokens': totalUsage.totalTokens,\n                'ai.usage.reasoningTokens': totalUsage.reasoningTokens,\n                'ai.usage.cachedInputTokens': totalUsage.cachedInputTokens,\n              },\n            }),\n          );\n        } catch (error) {\n          controller.error(error);\n        } finally {\n          rootSpan.end();\n        }\n      },\n    });\n\n    // initialize the stitchable stream and the transformed stream:\n    const stitchableStream = createStitchableStream<TextStreamPart<TOOLS>>();\n    this.addStream = stitchableStream.addStream;\n    this.closeStream = stitchableStream.close;\n\n    let stream = stitchableStream.stream;\n\n    // filter out abort errors:\n    stream = filterStreamErrors(stream, ({ error, controller }) => {\n      if (isAbortError(error) && abortSignal?.aborted) {\n        onAbort?.({ steps: recordedSteps });\n        controller.enqueue({ type: 'abort' });\n        controller.close();\n      } else {\n        controller.error(error);\n      }\n    });\n\n    // add a stream that emits a start event:\n    stream = stream.pipeThrough(\n      new TransformStream<TextStreamPart<TOOLS>, TextStreamPart<TOOLS>>({\n        start(controller) {\n          controller.enqueue({ type: 'start' });\n        },\n      }),\n    );\n\n    // transform the stream before output parsing\n    // to enable replacement of stream segments:\n    for (const transform of transforms) {\n      stream = stream.pipeThrough(\n        transform({\n          tools: tools as TOOLS,\n          stopStream() {\n            stitchableStream.terminate();\n          },\n        }),\n      );\n    }\n\n    this.baseStream = stream\n      .pipeThrough(createOutputTransformStream(output))\n      .pipeThrough(eventProcessor);\n\n    const { maxRetries, retry } = prepareRetries({\n      maxRetries: maxRetriesArg,\n      abortSignal,\n    });\n\n    const tracer = getTracer(telemetry);\n\n    const callSettings = prepareCallSettings(settings);\n\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n      model,\n      telemetry,\n      headers,\n      settings: { ...callSettings, maxRetries },\n    });\n\n    const self = this;\n\n    recordSpan({\n      name: 'ai.streamText',\n      attributes: selectTelemetryAttributes({\n        telemetry,\n        attributes: {\n          ...assembleOperationName({ operationId: 'ai.streamText', telemetry }),\n          ...baseTelemetryAttributes,\n          // specific settings that only make sense on the outer level:\n          'ai.prompt': {\n            input: () => JSON.stringify({ system, prompt, messages }),\n          },\n        },\n      }),\n      tracer,\n      endWhenDone: false,\n      fn: async rootSpanArg => {\n        rootSpan = rootSpanArg;\n\n        async function streamStep({\n          currentStep,\n          responseMessages,\n          usage,\n        }: {\n          currentStep: number;\n          responseMessages: Array<ResponseMessage>;\n          usage: LanguageModelUsage;\n        }) {\n          const includeRawChunks = self.includeRawChunks;\n\n          stepFinish = new DelayedPromise<void>();\n\n          const initialPrompt = await standardizePrompt({\n            system,\n            prompt,\n            messages,\n          });\n\n          const stepInputMessages = [\n            ...initialPrompt.messages,\n            ...responseMessages,\n          ];\n\n          const prepareStepResult = await prepareStep?.({\n            model,\n            steps: recordedSteps,\n            stepNumber: recordedSteps.length,\n            messages: stepInputMessages,\n          });\n\n          const promptMessages = await convertToLanguageModelPrompt({\n            prompt: {\n              system: prepareStepResult?.system ?? initialPrompt.system,\n              messages: prepareStepResult?.messages ?? stepInputMessages,\n            },\n            supportedUrls: await model.supportedUrls,\n          });\n\n          const stepModel = resolveLanguageModel(\n            prepareStepResult?.model ?? model,\n          );\n\n          const { toolChoice: stepToolChoice, tools: stepTools } =\n            prepareToolsAndToolChoice({\n              tools,\n              toolChoice: prepareStepResult?.toolChoice ?? toolChoice,\n              activeTools: prepareStepResult?.activeTools ?? activeTools,\n            });\n\n          const {\n            result: { stream, response, request },\n            doStreamSpan,\n            startTimestampMs,\n          } = await retry(() =>\n            recordSpan({\n              name: 'ai.streamText.doStream',\n              attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                  ...assembleOperationName({\n                    operationId: 'ai.streamText.doStream',\n                    telemetry,\n                  }),\n                  ...baseTelemetryAttributes,\n                  // model:\n                  'ai.model.provider': stepModel.provider,\n                  'ai.model.id': stepModel.modelId,\n                  // prompt:\n                  'ai.prompt.messages': {\n                    input: () => stringifyForTelemetry(promptMessages),\n                  },\n                  'ai.prompt.tools': {\n                    // convert the language model level tools:\n                    input: () => stepTools?.map(tool => JSON.stringify(tool)),\n                  },\n                  'ai.prompt.toolChoice': {\n                    input: () =>\n                      stepToolChoice != null\n                        ? JSON.stringify(stepToolChoice)\n                        : undefined,\n                  },\n\n                  // standardized gen-ai llm span attributes:\n                  'gen_ai.system': stepModel.provider,\n                  'gen_ai.request.model': stepModel.modelId,\n                  'gen_ai.request.frequency_penalty':\n                    callSettings.frequencyPenalty,\n                  'gen_ai.request.max_tokens': callSettings.maxOutputTokens,\n                  'gen_ai.request.presence_penalty':\n                    callSettings.presencePenalty,\n                  'gen_ai.request.stop_sequences': callSettings.stopSequences,\n                  'gen_ai.request.temperature': callSettings.temperature,\n                  'gen_ai.request.top_k': callSettings.topK,\n                  'gen_ai.request.top_p': callSettings.topP,\n                },\n              }),\n              tracer,\n              endWhenDone: false,\n              fn: async doStreamSpan => {\n                return {\n                  startTimestampMs: now(), // get before the call\n                  doStreamSpan,\n                  result: await stepModel.doStream({\n                    ...callSettings,\n                    tools: stepTools,\n                    toolChoice: stepToolChoice,\n                    responseFormat: output?.responseFormat,\n                    prompt: promptMessages,\n                    providerOptions,\n                    abortSignal,\n                    headers,\n                    includeRawChunks,\n                  }),\n                };\n              },\n            }),\n          );\n\n          const streamWithToolResults = runToolsTransformation({\n            tools,\n            generatorStream: stream,\n            tracer,\n            telemetry,\n            system,\n            messages: stepInputMessages,\n            repairToolCall,\n            abortSignal,\n            experimental_context,\n          });\n\n          const stepRequest = request ?? {};\n          const stepToolCalls: TypedToolCall<TOOLS>[] = [];\n          const stepToolOutputs: ToolOutput<TOOLS>[] = [];\n          let warnings: LanguageModelV2CallWarning[] | undefined;\n\n          const activeToolCallToolNames: Record<string, string> = {};\n\n          let stepFinishReason: FinishReason = 'unknown';\n          let stepUsage: LanguageModelUsage = {\n            inputTokens: undefined,\n            outputTokens: undefined,\n            totalTokens: undefined,\n          };\n          let stepProviderMetadata: ProviderMetadata | undefined;\n          let stepFirstChunk = true;\n          let stepResponse: { id: string; timestamp: Date; modelId: string } = {\n            id: generateId(),\n            timestamp: currentDate(),\n            modelId: model.modelId,\n          };\n\n          // raw text as it comes from the provider. recorded for telemetry.\n          let activeText = '';\n\n          self.addStream(\n            streamWithToolResults.pipeThrough(\n              new TransformStream<\n                SingleRequestTextStreamPart<TOOLS>,\n                TextStreamPart<TOOLS>\n              >({\n                async transform(chunk, controller): Promise<void> {\n                  if (chunk.type === 'stream-start') {\n                    warnings = chunk.warnings;\n                    return; // stream start chunks are sent immediately and do not count as first chunk\n                  }\n\n                  if (stepFirstChunk) {\n                    // Telemetry for first chunk:\n                    const msToFirstChunk = now() - startTimestampMs;\n\n                    stepFirstChunk = false;\n\n                    doStreamSpan.addEvent('ai.stream.firstChunk', {\n                      'ai.response.msToFirstChunk': msToFirstChunk,\n                    });\n\n                    doStreamSpan.setAttributes({\n                      'ai.response.msToFirstChunk': msToFirstChunk,\n                    });\n\n                    // Step start:\n                    controller.enqueue({\n                      type: 'start-step',\n                      request: stepRequest,\n                      warnings: warnings ?? [],\n                    });\n                  }\n\n                  const chunkType = chunk.type;\n                  switch (chunkType) {\n                    case 'text-start':\n                    case 'text-end': {\n                      controller.enqueue(chunk);\n                      break;\n                    }\n\n                    case 'text-delta': {\n                      if (chunk.delta.length > 0) {\n                        controller.enqueue({\n                          type: 'text-delta',\n                          id: chunk.id,\n                          text: chunk.delta,\n                          providerMetadata: chunk.providerMetadata,\n                        });\n                        activeText += chunk.delta;\n                      }\n                      break;\n                    }\n\n                    case 'reasoning-start':\n                    case 'reasoning-end': {\n                      controller.enqueue(chunk);\n                      break;\n                    }\n\n                    case 'reasoning-delta': {\n                      controller.enqueue({\n                        type: 'reasoning-delta',\n                        id: chunk.id,\n                        text: chunk.delta,\n                        providerMetadata: chunk.providerMetadata,\n                      });\n                      break;\n                    }\n\n                    case 'tool-call': {\n                      controller.enqueue(chunk);\n                      // store tool calls for onFinish callback and toolCalls promise:\n                      stepToolCalls.push(chunk);\n                      break;\n                    }\n\n                    case 'tool-result': {\n                      controller.enqueue(chunk);\n\n                      if (!chunk.preliminary) {\n                        stepToolOutputs.push(chunk);\n                      }\n\n                      break;\n                    }\n\n                    case 'tool-error': {\n                      controller.enqueue(chunk);\n                      stepToolOutputs.push(chunk);\n                      break;\n                    }\n\n                    case 'response-metadata': {\n                      stepResponse = {\n                        id: chunk.id ?? stepResponse.id,\n                        timestamp: chunk.timestamp ?? stepResponse.timestamp,\n                        modelId: chunk.modelId ?? stepResponse.modelId,\n                      };\n                      break;\n                    }\n\n                    case 'finish': {\n                      // Note: tool executions might not be finished yet when the finish event is emitted.\n                      // store usage and finish reason for promises and onFinish callback:\n                      stepUsage = chunk.usage;\n                      stepFinishReason = chunk.finishReason;\n                      stepProviderMetadata = chunk.providerMetadata;\n\n                      // Telemetry for finish event timing\n                      // (since tool executions can take longer and distort calculations)\n                      const msToFinish = now() - startTimestampMs;\n                      doStreamSpan.addEvent('ai.stream.finish');\n                      doStreamSpan.setAttributes({\n                        'ai.response.msToFinish': msToFinish,\n                        'ai.response.avgOutputTokensPerSecond':\n                          (1000 * (stepUsage.outputTokens ?? 0)) / msToFinish,\n                      });\n\n                      break;\n                    }\n\n                    case 'file': {\n                      controller.enqueue(chunk);\n                      break;\n                    }\n\n                    case 'source': {\n                      controller.enqueue(chunk);\n                      break;\n                    }\n\n                    case 'tool-input-start': {\n                      activeToolCallToolNames[chunk.id] = chunk.toolName;\n\n                      const tool = tools?.[chunk.toolName];\n                      if (tool?.onInputStart != null) {\n                        await tool.onInputStart({\n                          toolCallId: chunk.id,\n                          messages: stepInputMessages,\n                          abortSignal,\n                          experimental_context,\n                        });\n                      }\n\n                      controller.enqueue({\n                        ...chunk,\n                        dynamic: tool?.type === 'dynamic',\n                      });\n                      break;\n                    }\n\n                    case 'tool-input-end': {\n                      delete activeToolCallToolNames[chunk.id];\n                      controller.enqueue(chunk);\n                      break;\n                    }\n\n                    case 'tool-input-delta': {\n                      const toolName = activeToolCallToolNames[chunk.id];\n                      const tool = tools?.[toolName];\n\n                      if (tool?.onInputDelta != null) {\n                        await tool.onInputDelta({\n                          inputTextDelta: chunk.delta,\n                          toolCallId: chunk.id,\n                          messages: stepInputMessages,\n                          abortSignal,\n                          experimental_context,\n                        });\n                      }\n\n                      controller.enqueue(chunk);\n                      break;\n                    }\n\n                    case 'error': {\n                      controller.enqueue(chunk);\n                      stepFinishReason = 'error';\n                      break;\n                    }\n\n                    case 'raw': {\n                      if (includeRawChunks) {\n                        controller.enqueue(chunk);\n                      }\n                      break;\n                    }\n\n                    default: {\n                      const exhaustiveCheck: never = chunkType;\n                      throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);\n                    }\n                  }\n                },\n\n                // invoke onFinish callback and resolve toolResults promise when the stream is about to close:\n                async flush(controller) {\n                  const stepToolCallsJson =\n                    stepToolCalls.length > 0\n                      ? JSON.stringify(stepToolCalls)\n                      : undefined;\n\n                  // record telemetry information first to ensure best effort timing\n                  try {\n                    doStreamSpan.setAttributes(\n                      selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                          'ai.response.finishReason': stepFinishReason,\n                          'ai.response.text': {\n                            output: () => activeText,\n                          },\n                          'ai.response.toolCalls': {\n                            output: () => stepToolCallsJson,\n                          },\n                          'ai.response.id': stepResponse.id,\n                          'ai.response.model': stepResponse.modelId,\n                          'ai.response.timestamp':\n                            stepResponse.timestamp.toISOString(),\n                          'ai.response.providerMetadata':\n                            JSON.stringify(stepProviderMetadata),\n\n                          'ai.usage.inputTokens': stepUsage.inputTokens,\n                          'ai.usage.outputTokens': stepUsage.outputTokens,\n                          'ai.usage.totalTokens': stepUsage.totalTokens,\n                          'ai.usage.reasoningTokens': stepUsage.reasoningTokens,\n                          'ai.usage.cachedInputTokens':\n                            stepUsage.cachedInputTokens,\n\n                          // standardized gen-ai llm span attributes:\n                          'gen_ai.response.finish_reasons': [stepFinishReason],\n                          'gen_ai.response.id': stepResponse.id,\n                          'gen_ai.response.model': stepResponse.modelId,\n                          'gen_ai.usage.input_tokens': stepUsage.inputTokens,\n                          'gen_ai.usage.output_tokens': stepUsage.outputTokens,\n                        },\n                      }),\n                    );\n                  } catch (error) {\n                    // ignore error setting telemetry attributes\n                  } finally {\n                    // finish doStreamSpan before other operations for correct timing:\n                    doStreamSpan.end();\n                  }\n\n                  controller.enqueue({\n                    type: 'finish-step',\n                    finishReason: stepFinishReason,\n                    usage: stepUsage,\n                    providerMetadata: stepProviderMetadata,\n                    response: {\n                      ...stepResponse,\n                      headers: response?.headers,\n                    },\n                  });\n\n                  const combinedUsage = addLanguageModelUsage(usage, stepUsage);\n\n                  // wait for the step to be fully processed by the event processor\n                  // to ensure that the recorded steps are complete:\n                  await stepFinish.promise;\n\n                  const clientToolCalls = stepToolCalls.filter(\n                    toolCall => toolCall.providerExecuted !== true,\n                  );\n                  const clientToolOutputs = stepToolOutputs.filter(\n                    toolOutput => toolOutput.providerExecuted !== true,\n                  );\n\n                  if (\n                    clientToolCalls.length > 0 &&\n                    // all current tool calls have outputs (incl. execution errors):\n                    clientToolOutputs.length === clientToolCalls.length &&\n                    // continue until a stop condition is met:\n                    !(await isStopConditionMet({\n                      stopConditions,\n                      steps: recordedSteps,\n                    }))\n                  ) {\n                    // append to messages for the next step:\n                    responseMessages.push(\n                      ...toResponseMessages({\n                        content:\n                          // use transformed content to create the messages for the next step:\n                          recordedSteps[recordedSteps.length - 1].content,\n                        tools,\n                      }),\n                    );\n\n                    try {\n                      await streamStep({\n                        currentStep: currentStep + 1,\n                        responseMessages,\n                        usage: combinedUsage,\n                      });\n                    } catch (error) {\n                      controller.enqueue({\n                        type: 'error',\n                        error,\n                      });\n\n                      self.closeStream();\n                    }\n                  } else {\n                    controller.enqueue({\n                      type: 'finish',\n                      finishReason: stepFinishReason,\n                      totalUsage: combinedUsage,\n                    });\n\n                    self.closeStream(); // close the stitchable stream\n                  }\n                },\n              }),\n            ),\n          );\n        }\n\n        // add the initial stream to the stitchable stream\n        await streamStep({\n          currentStep: 0,\n          responseMessages: [],\n          usage: {\n            inputTokens: undefined,\n            outputTokens: undefined,\n            totalTokens: undefined,\n          },\n        });\n      },\n    }).catch(error => {\n      // add an error stream part and close the streams:\n      self.addStream(\n        new ReadableStream({\n          start(controller) {\n            controller.enqueue({ type: 'error', error });\n            controller.close();\n          },\n        }),\n      );\n      self.closeStream();\n    });\n  }\n\n  get steps() {\n    // when any of the promises are accessed, the stream is consumed\n    // so it resolves without needing to consume the stream separately\n    this.consumeStream();\n\n    return this._steps.promise;\n  }\n\n  private get finalStep() {\n    return this.steps.then(steps => steps[steps.length - 1]);\n  }\n\n  get content() {\n    return this.finalStep.then(step => step.content);\n  }\n\n  get warnings() {\n    return this.finalStep.then(step => step.warnings);\n  }\n\n  get providerMetadata() {\n    return this.finalStep.then(step => step.providerMetadata);\n  }\n\n  get text() {\n    return this.finalStep.then(step => step.text);\n  }\n\n  get reasoningText() {\n    return this.finalStep.then(step => step.reasoningText);\n  }\n\n  get reasoning() {\n    return this.finalStep.then(step => step.reasoning);\n  }\n\n  get sources() {\n    return this.finalStep.then(step => step.sources);\n  }\n\n  get files() {\n    return this.finalStep.then(step => step.files);\n  }\n\n  get toolCalls() {\n    return this.finalStep.then(step => step.toolCalls);\n  }\n\n  get staticToolCalls() {\n    return this.finalStep.then(step => step.staticToolCalls);\n  }\n\n  get dynamicToolCalls() {\n    return this.finalStep.then(step => step.dynamicToolCalls);\n  }\n\n  get toolResults() {\n    return this.finalStep.then(step => step.toolResults);\n  }\n\n  get staticToolResults() {\n    return this.finalStep.then(step => step.staticToolResults);\n  }\n\n  get dynamicToolResults() {\n    return this.finalStep.then(step => step.dynamicToolResults);\n  }\n\n  get usage() {\n    return this.finalStep.then(step => step.usage);\n  }\n\n  get request() {\n    return this.finalStep.then(step => step.request);\n  }\n\n  get response() {\n    return this.finalStep.then(step => step.response);\n  }\n\n  get totalUsage() {\n    // when any of the promises are accessed, the stream is consumed\n    // so it resolves without needing to consume the stream separately\n    this.consumeStream();\n\n    return this._totalUsage.promise;\n  }\n\n  get finishReason() {\n    // when any of the promises are accessed, the stream is consumed\n    // so it resolves without needing to consume the stream separately\n    this.consumeStream();\n\n    return this._finishReason.promise;\n  }\n\n  /**\nSplit out a new stream from the original stream.\nThe original stream is replaced to allow for further splitting,\nsince we do not know how many times the stream will be split.\n\nNote: this leads to buffering the stream content on the server.\nHowever, the LLM results are expected to be small enough to not cause issues.\n   */\n  private teeStream() {\n    const [stream1, stream2] = this.baseStream.tee();\n    this.baseStream = stream2;\n    return stream1;\n  }\n\n  get textStream(): AsyncIterableStream<string> {\n    return createAsyncIterableStream(\n      this.teeStream().pipeThrough(\n        new TransformStream<EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>, string>({\n          transform({ part }, controller) {\n            if (part.type === 'text-delta') {\n              controller.enqueue(part.text);\n            }\n          },\n        }),\n      ),\n    );\n  }\n\n  get fullStream(): AsyncIterableStream<TextStreamPart<TOOLS>> {\n    return createAsyncIterableStream(\n      this.teeStream().pipeThrough(\n        new TransformStream<\n          EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>,\n          TextStreamPart<TOOLS>\n        >({\n          transform({ part }, controller) {\n            controller.enqueue(part);\n          },\n        }),\n      ),\n    );\n  }\n\n  async consumeStream(options?: ConsumeStreamOptions): Promise<void> {\n    try {\n      await consumeStream({\n        stream: this.fullStream,\n        onError: options?.onError,\n      });\n    } catch (error) {\n      options?.onError?.(error);\n    }\n  }\n\n  get experimental_partialOutputStream(): AsyncIterableStream<PARTIAL_OUTPUT> {\n    if (this.output == null) {\n      throw new NoOutputSpecifiedError();\n    }\n\n    return createAsyncIterableStream(\n      this.teeStream().pipeThrough(\n        new TransformStream<\n          EnrichedStreamPart<TOOLS, PARTIAL_OUTPUT>,\n          PARTIAL_OUTPUT\n        >({\n          transform({ partialOutput }, controller) {\n            if (partialOutput != null) {\n              controller.enqueue(partialOutput);\n            }\n          },\n        }),\n      ),\n    );\n  }\n\n  toUIMessageStream<UI_MESSAGE extends UIMessage>({\n    originalMessages,\n    generateMessageId,\n    onFinish,\n    messageMetadata,\n    sendReasoning = true,\n    sendSources = false,\n    sendStart = true,\n    sendFinish = true,\n    onError = getErrorMessage,\n  }: UIMessageStreamOptions<UI_MESSAGE> = {}): AsyncIterableStream<\n    InferUIMessageChunk<UI_MESSAGE>\n  > {\n    const responseMessageId =\n      generateMessageId != null\n        ? getResponseUIMessageId({\n            originalMessages,\n            responseMessageId: generateMessageId,\n          })\n        : undefined;\n\n    const toolNamesByCallId: Record<string, string> = {};\n\n    const isDynamic = (toolCallId: string) => {\n      const toolName = toolNamesByCallId[toolCallId];\n      const dynamic = this.tools?.[toolName]?.type === 'dynamic';\n      return dynamic ? true : undefined; // only send when dynamic to reduce data transfer\n    };\n\n    const baseStream = this.fullStream.pipeThrough(\n      new TransformStream<\n        TextStreamPart<TOOLS>,\n        UIMessageChunk<\n          InferUIMessageMetadata<UI_MESSAGE>,\n          InferUIMessageData<UI_MESSAGE>\n        >\n      >({\n        transform: async (part, controller) => {\n          const messageMetadataValue = messageMetadata?.({ part });\n\n          const partType = part.type;\n          switch (partType) {\n            case 'text-start': {\n              controller.enqueue({\n                type: 'text-start',\n                id: part.id,\n                ...(part.providerMetadata != null\n                  ? { providerMetadata: part.providerMetadata }\n                  : {}),\n              });\n              break;\n            }\n\n            case 'text-delta': {\n              controller.enqueue({\n                type: 'text-delta',\n                id: part.id,\n                delta: part.text,\n                ...(part.providerMetadata != null\n                  ? { providerMetadata: part.providerMetadata }\n                  : {}),\n              });\n              break;\n            }\n\n            case 'text-end': {\n              controller.enqueue({\n                type: 'text-end',\n                id: part.id,\n                ...(part.providerMetadata != null\n                  ? { providerMetadata: part.providerMetadata }\n                  : {}),\n              });\n              break;\n            }\n\n            case 'reasoning-start': {\n              controller.enqueue({\n                type: 'reasoning-start',\n                id: part.id,\n                ...(part.providerMetadata != null\n                  ? { providerMetadata: part.providerMetadata }\n                  : {}),\n              });\n              break;\n            }\n\n            case 'reasoning-delta': {\n              if (sendReasoning) {\n                controller.enqueue({\n                  type: 'reasoning-delta',\n                  id: part.id,\n                  delta: part.text,\n                  ...(part.providerMetadata != null\n                    ? { providerMetadata: part.providerMetadata }\n                    : {}),\n                });\n              }\n              break;\n            }\n\n            case 'reasoning-end': {\n              controller.enqueue({\n                type: 'reasoning-end',\n                id: part.id,\n                ...(part.providerMetadata != null\n                  ? { providerMetadata: part.providerMetadata }\n                  : {}),\n              });\n              break;\n            }\n\n            case 'file': {\n              controller.enqueue({\n                type: 'file',\n                mediaType: part.file.mediaType,\n                url: `data:${part.file.mediaType};base64,${part.file.base64}`,\n              });\n              break;\n            }\n\n            case 'source': {\n              if (sendSources && part.sourceType === 'url') {\n                controller.enqueue({\n                  type: 'source-url',\n                  sourceId: part.id,\n                  url: part.url,\n                  title: part.title,\n                  ...(part.providerMetadata != null\n                    ? { providerMetadata: part.providerMetadata }\n                    : {}),\n                });\n              }\n\n              if (sendSources && part.sourceType === 'document') {\n                controller.enqueue({\n                  type: 'source-document',\n                  sourceId: part.id,\n                  mediaType: part.mediaType,\n                  title: part.title,\n                  filename: part.filename,\n                  ...(part.providerMetadata != null\n                    ? { providerMetadata: part.providerMetadata }\n                    : {}),\n                });\n              }\n              break;\n            }\n\n            case 'tool-input-start': {\n              toolNamesByCallId[part.id] = part.toolName;\n              const dynamic = isDynamic(part.id);\n\n              controller.enqueue({\n                type: 'tool-input-start',\n                toolCallId: part.id,\n                toolName: part.toolName,\n                ...(part.providerExecuted != null\n                  ? { providerExecuted: part.providerExecuted }\n                  : {}),\n                ...(dynamic != null ? { dynamic } : {}),\n              });\n              break;\n            }\n\n            case 'tool-input-delta': {\n              controller.enqueue({\n                type: 'tool-input-delta',\n                toolCallId: part.id,\n                inputTextDelta: part.delta,\n              });\n              break;\n            }\n\n            case 'tool-call': {\n              toolNamesByCallId[part.toolCallId] = part.toolName;\n              const dynamic = isDynamic(part.toolCallId);\n\n              if (part.invalid) {\n                controller.enqueue({\n                  type: 'tool-input-error',\n                  toolCallId: part.toolCallId,\n                  toolName: part.toolName,\n                  input: part.input,\n                  ...(part.providerExecuted != null\n                    ? { providerExecuted: part.providerExecuted }\n                    : {}),\n                  ...(part.providerMetadata != null\n                    ? { providerMetadata: part.providerMetadata }\n                    : {}),\n                  ...(dynamic != null ? { dynamic } : {}),\n                  errorText: onError(part.error),\n                });\n              } else {\n                controller.enqueue({\n                  type: 'tool-input-available',\n                  toolCallId: part.toolCallId,\n                  toolName: part.toolName,\n                  input: part.input,\n                  ...(part.providerExecuted != null\n                    ? { providerExecuted: part.providerExecuted }\n                    : {}),\n                  ...(part.providerMetadata != null\n                    ? { providerMetadata: part.providerMetadata }\n                    : {}),\n                  ...(dynamic != null ? { dynamic } : {}),\n                });\n              }\n\n              break;\n            }\n\n            case 'tool-result': {\n              const dynamic = isDynamic(part.toolCallId);\n\n              controller.enqueue({\n                type: 'tool-output-available',\n                toolCallId: part.toolCallId,\n                output: part.output,\n                ...(part.providerExecuted != null\n                  ? { providerExecuted: part.providerExecuted }\n                  : {}),\n                ...(part.preliminary != null\n                  ? { preliminary: part.preliminary }\n                  : {}),\n                ...(dynamic != null ? { dynamic } : {}),\n              });\n              break;\n            }\n\n            case 'tool-error': {\n              const dynamic = isDynamic(part.toolCallId);\n\n              controller.enqueue({\n                type: 'tool-output-error',\n                toolCallId: part.toolCallId,\n                errorText: onError(part.error),\n                ...(part.providerExecuted != null\n                  ? { providerExecuted: part.providerExecuted }\n                  : {}),\n                ...(dynamic != null ? { dynamic } : {}),\n              });\n              break;\n            }\n\n            case 'error': {\n              controller.enqueue({\n                type: 'error',\n                errorText: onError(part.error),\n              });\n              break;\n            }\n\n            case 'start-step': {\n              controller.enqueue({ type: 'start-step' });\n              break;\n            }\n\n            case 'finish-step': {\n              controller.enqueue({ type: 'finish-step' });\n              break;\n            }\n\n            case 'start': {\n              if (sendStart) {\n                controller.enqueue({\n                  type: 'start',\n                  ...(messageMetadataValue != null\n                    ? { messageMetadata: messageMetadataValue }\n                    : {}),\n                  ...(responseMessageId != null\n                    ? { messageId: responseMessageId }\n                    : {}),\n                });\n              }\n              break;\n            }\n\n            case 'finish': {\n              if (sendFinish) {\n                controller.enqueue({\n                  type: 'finish',\n                  ...(messageMetadataValue != null\n                    ? { messageMetadata: messageMetadataValue }\n                    : {}),\n                });\n              }\n              break;\n            }\n\n            case 'abort': {\n              controller.enqueue(part);\n              break;\n            }\n\n            case 'tool-input-end': {\n              break;\n            }\n\n            case 'raw': {\n              // Raw chunks are not included in UI message streams\n              // as they contain provider-specific data for developer use\n              break;\n            }\n\n            default: {\n              const exhaustiveCheck: never = partType;\n              throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);\n            }\n          }\n\n          // start and finish events already have metadata\n          // so we only need to send metadata for other parts\n          if (\n            messageMetadataValue != null &&\n            partType !== 'start' &&\n            partType !== 'finish'\n          ) {\n            controller.enqueue({\n              type: 'message-metadata',\n              messageMetadata: messageMetadataValue,\n            });\n          }\n        },\n      }),\n    );\n\n    return createAsyncIterableStream(\n      handleUIMessageStreamFinish<UI_MESSAGE>({\n        stream: baseStream,\n        messageId: responseMessageId ?? generateMessageId?.(),\n        originalMessages,\n        onFinish,\n        onError,\n      }),\n    );\n  }\n\n  pipeUIMessageStreamToResponse<UI_MESSAGE extends UIMessage>(\n    response: ServerResponse,\n    {\n      originalMessages,\n      generateMessageId,\n      onFinish,\n      messageMetadata,\n      sendReasoning,\n      sendSources,\n      sendFinish,\n      sendStart,\n      onError,\n      ...init\n    }: UIMessageStreamResponseInit & UIMessageStreamOptions<UI_MESSAGE> = {},\n  ) {\n    pipeUIMessageStreamToResponse({\n      response,\n      stream: this.toUIMessageStream({\n        originalMessages,\n        generateMessageId,\n        onFinish,\n        messageMetadata,\n        sendReasoning,\n        sendSources,\n        sendFinish,\n        sendStart,\n        onError,\n      }),\n      ...init,\n    });\n  }\n\n  pipeTextStreamToResponse(response: ServerResponse, init?: ResponseInit) {\n    pipeTextStreamToResponse({\n      response,\n      textStream: this.textStream,\n      ...init,\n    });\n  }\n\n  toUIMessageStreamResponse<UI_MESSAGE extends UIMessage>({\n    originalMessages,\n    generateMessageId,\n    onFinish,\n    messageMetadata,\n    sendReasoning,\n    sendSources,\n    sendFinish,\n    sendStart,\n    onError,\n    ...init\n  }: UIMessageStreamResponseInit &\n    UIMessageStreamOptions<UI_MESSAGE> = {}): Response {\n    return createUIMessageStreamResponse({\n      stream: this.toUIMessageStream({\n        originalMessages,\n        generateMessageId,\n        onFinish,\n        messageMetadata,\n        sendReasoning,\n        sendSources,\n        sendFinish,\n        sendStart,\n        onError,\n      }),\n      ...init,\n    });\n  }\n\n  toTextStreamResponse(init?: ResponseInit): Response {\n    return createTextStreamResponse({\n      textStream: this.textStream,\n      ...init,\n    });\n  }\n}\n","export function prepareHeaders(\n  headers: HeadersInit | undefined,\n  defaultHeaders: Record<string, string>,\n): Headers {\n  const responseHeaders = new Headers(headers ?? {});\n\n  for (const [key, value] of Object.entries(defaultHeaders)) {\n    if (!responseHeaders.has(key)) {\n      responseHeaders.set(key, value);\n    }\n  }\n\n  return responseHeaders;\n}\n","import { prepareHeaders } from '../util/prepare-headers';\n\nexport function createTextStreamResponse({\n  status,\n  statusText,\n  headers,\n  textStream,\n}: ResponseInit & {\n  textStream: ReadableStream<string>;\n}): Response {\n  return new Response(textStream.pipeThrough(new TextEncoderStream()), {\n    status: status ?? 200,\n    statusText,\n    headers: prepareHeaders(headers, {\n      'content-type': 'text/plain; charset=utf-8',\n    }),\n  });\n}\n","import { ServerResponse } from 'node:http';\n\n/**\n * Writes the content of a stream to a server response.\n */\nexport function writeToServerResponse({\n  response,\n  status,\n  statusText,\n  headers,\n  stream,\n}: {\n  response: ServerResponse;\n  status?: number;\n  statusText?: string;\n  headers?: Record<string, string | number | string[]>;\n  stream: ReadableStream<Uint8Array>;\n}): void {\n  response.writeHead(status ?? 200, statusText, headers);\n\n  const reader = stream.getReader();\n  const read = async () => {\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        response.write(value);\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      response.end();\n    }\n  };\n\n  read();\n}\n","import { ServerResponse } from 'node:http';\nimport { prepareHeaders } from '../util/prepare-headers';\nimport { writeToServerResponse } from '../util/write-to-server-response';\n\nexport function pipeTextStreamToResponse({\n  response,\n  status,\n  statusText,\n  headers,\n  textStream,\n}: {\n  response: ServerResponse;\n  textStream: ReadableStream<string>;\n} & ResponseInit): void {\n  writeToServerResponse({\n    response,\n    status,\n    statusText,\n    headers: Object.fromEntries(\n      prepareHeaders(headers, {\n        'content-type': 'text/plain; charset=utf-8',\n      }).entries(),\n    ),\n    stream: textStream.pipeThrough(new TextEncoderStream()),\n  });\n}\n","export class JsonToSseTransformStream extends TransformStream<unknown, string> {\n  constructor() {\n    super({\n      transform(part, controller) {\n        controller.enqueue(`data: ${JSON.stringify(part)}\\n\\n`);\n      },\n      flush(controller) {\n        controller.enqueue('data: [DONE]\\n\\n');\n      },\n    });\n  }\n}\n","export const UI_MESSAGE_STREAM_HEADERS = {\n  'content-type': 'text/event-stream',\n  'cache-control': 'no-cache',\n  connection: 'keep-alive',\n  'x-vercel-ai-ui-message-stream': 'v1',\n  'x-accel-buffering': 'no', // disable nginx buffering\n};\n","import { prepareHeaders } from '../util/prepare-headers';\nimport { JsonToSseTransformStream } from './json-to-sse-transform-stream';\nimport { UI_MESSAGE_STREAM_HEADERS } from './ui-message-stream-headers';\nimport { UIMessageChunk } from './ui-message-chunks';\nimport { UIMessageStreamResponseInit } from './ui-message-stream-response-init';\n\nexport function createUIMessageStreamResponse({\n  status,\n  statusText,\n  headers,\n  stream,\n  consumeSseStream,\n}: UIMessageStreamResponseInit & {\n  stream: ReadableStream<UIMessageChunk>;\n}): Response {\n  let sseStream = stream.pipeThrough(new JsonToSseTransformStream());\n\n  // when the consumeSseStream is provided, we need to tee the stream\n  // and send the second part to the consumeSseStream function\n  // so that it can be consumed by the client independently\n  if (consumeSseStream) {\n    const [stream1, stream2] = sseStream.tee();\n    sseStream = stream1;\n    consumeSseStream({ stream: stream2 }); // no await (do not block the response)\n  }\n\n  return new Response(sseStream.pipeThrough(new TextEncoderStream()), {\n    status,\n    statusText,\n    headers: prepareHeaders(headers, UI_MESSAGE_STREAM_HEADERS),\n  });\n}\n","import { IdGenerator } from '@ai-sdk/provider-utils';\nimport { UIMessage } from '../ui/ui-messages';\n\nexport function getResponseUIMessageId({\n  originalMessages,\n  responseMessageId,\n}: {\n  originalMessages: UIMessage[] | undefined;\n  responseMessageId: string | IdGenerator;\n}) {\n  // when there are no original messages (i.e. no persistence),\n  // the assistant message id generation is handled on the client side.\n  if (originalMessages == null) {\n    return undefined;\n  }\n\n  const lastMessage = originalMessages[originalMessages.length - 1];\n\n  return lastMessage?.role === 'assistant'\n    ? lastMessage.id\n    : typeof responseMessageId === 'function'\n      ? responseMessageId()\n      : responseMessageId;\n}\n","import {\n  StandardSchemaV1,\n  validateTypes,\n  Validator,\n} from '@ai-sdk/provider-utils';\nimport { ProviderMetadata } from '../types';\nimport {\n  DataUIMessageChunk,\n  InferUIMessageChunk,\n  isDataUIMessageChunk,\n  UIMessageChunk,\n} from '../ui-message-stream/ui-message-chunks';\nimport { ErrorHandler } from '../util/error-handler';\nimport { mergeObjects } from '../util/merge-objects';\nimport { parsePartialJson } from '../util/parse-partial-json';\nimport { UIDataTypesToSchemas } from './chat';\nimport {\n  DataUIPart,\n  DynamicToolUIPart,\n  getToolName,\n  InferUIMessageData,\n  InferUIMessageMetadata,\n  InferUIMessageToolCall,\n  InferUIMessageTools,\n  isToolUIPart,\n  ReasoningUIPart,\n  TextUIPart,\n  ToolUIPart,\n  UIMessage,\n  UIMessagePart,\n} from './ui-messages';\n\nexport type StreamingUIMessageState<UI_MESSAGE extends UIMessage> = {\n  message: UI_MESSAGE;\n  activeTextParts: Record<string, TextUIPart>;\n  activeReasoningParts: Record<string, ReasoningUIPart>;\n  partialToolCalls: Record<\n    string,\n    { text: string; index: number; toolName: string; dynamic?: boolean }\n  >;\n};\n\nexport function createStreamingUIMessageState<UI_MESSAGE extends UIMessage>({\n  lastMessage,\n  messageId,\n}: {\n  lastMessage: UI_MESSAGE | undefined;\n  messageId: string;\n}): StreamingUIMessageState<UI_MESSAGE> {\n  return {\n    message:\n      lastMessage?.role === 'assistant'\n        ? lastMessage\n        : ({\n            id: messageId,\n            metadata: undefined,\n            role: 'assistant',\n            parts: [] as UIMessagePart<\n              InferUIMessageData<UI_MESSAGE>,\n              InferUIMessageTools<UI_MESSAGE>\n            >[],\n          } as UI_MESSAGE),\n    activeTextParts: {},\n    activeReasoningParts: {},\n    partialToolCalls: {},\n  };\n}\n\nexport function processUIMessageStream<UI_MESSAGE extends UIMessage>({\n  stream,\n  messageMetadataSchema,\n  dataPartSchemas,\n  runUpdateMessageJob,\n  onError,\n  onToolCall,\n  onData,\n}: {\n  // input stream is not fully typed yet:\n  stream: ReadableStream<UIMessageChunk>;\n  messageMetadataSchema?:\n    | Validator<InferUIMessageMetadata<UI_MESSAGE>>\n    | StandardSchemaV1<InferUIMessageMetadata<UI_MESSAGE>>;\n  dataPartSchemas?: UIDataTypesToSchemas<InferUIMessageData<UI_MESSAGE>>;\n  onToolCall?: (options: {\n    toolCall: InferUIMessageToolCall<UI_MESSAGE>;\n  }) => void | PromiseLike<void>;\n  onData?: (dataPart: DataUIPart<InferUIMessageData<UI_MESSAGE>>) => void;\n  runUpdateMessageJob: (\n    job: (options: {\n      state: StreamingUIMessageState<UI_MESSAGE>;\n      write: () => void;\n    }) => Promise<void>,\n  ) => Promise<void>;\n  onError: ErrorHandler;\n}): ReadableStream<InferUIMessageChunk<UI_MESSAGE>> {\n  return stream.pipeThrough(\n    new TransformStream<UIMessageChunk, InferUIMessageChunk<UI_MESSAGE>>({\n      async transform(chunk, controller) {\n        await runUpdateMessageJob(async ({ state, write }) => {\n          function getToolInvocation(toolCallId: string) {\n            const toolInvocations = state.message.parts.filter(isToolUIPart);\n\n            const toolInvocation = toolInvocations.find(\n              invocation => invocation.toolCallId === toolCallId,\n            );\n\n            if (toolInvocation == null) {\n              throw new Error(\n                'tool-output-error must be preceded by a tool-input-available',\n              );\n            }\n\n            return toolInvocation;\n          }\n\n          function getDynamicToolInvocation(toolCallId: string) {\n            const toolInvocations = state.message.parts.filter(\n              part => part.type === 'dynamic-tool',\n            ) as DynamicToolUIPart[];\n\n            const toolInvocation = toolInvocations.find(\n              invocation => invocation.toolCallId === toolCallId,\n            );\n\n            if (toolInvocation == null) {\n              throw new Error(\n                'tool-output-error must be preceded by a tool-input-available',\n              );\n            }\n\n            return toolInvocation;\n          }\n\n          function updateToolPart(\n            options: {\n              toolName: keyof InferUIMessageTools<UI_MESSAGE> & string;\n              toolCallId: string;\n              providerExecuted?: boolean;\n            } & (\n              | {\n                  state: 'input-streaming';\n                  input: unknown;\n                  providerExecuted?: boolean;\n                }\n              | {\n                  state: 'input-available';\n                  input: unknown;\n                  providerExecuted?: boolean;\n                  providerMetadata?: ProviderMetadata;\n                }\n              | {\n                  state: 'output-available';\n                  input: unknown;\n                  output: unknown;\n                  providerExecuted?: boolean;\n                  preliminary?: boolean;\n                }\n              | {\n                  state: 'output-error';\n                  input: unknown;\n                  rawInput?: unknown;\n                  errorText: string;\n                  providerExecuted?: boolean;\n                  providerMetadata?: ProviderMetadata;\n                }\n            ),\n          ) {\n            const part = state.message.parts.find(\n              part =>\n                isToolUIPart(part) && part.toolCallId === options.toolCallId,\n            ) as ToolUIPart<InferUIMessageTools<UI_MESSAGE>> | undefined;\n\n            const anyOptions = options as any;\n            const anyPart = part as any;\n\n            if (part != null) {\n              part.state = options.state;\n              anyPart.input = anyOptions.input;\n              anyPart.output = anyOptions.output;\n              anyPart.errorText = anyOptions.errorText;\n              anyPart.rawInput = anyOptions.rawInput;\n              anyPart.preliminary = anyOptions.preliminary;\n\n              // once providerExecuted is set, it stays for streaming\n              anyPart.providerExecuted =\n                anyOptions.providerExecuted ?? part.providerExecuted;\n\n              if (\n                anyOptions.providerMetadata != null &&\n                part.state === 'input-available'\n              ) {\n                part.callProviderMetadata = anyOptions.providerMetadata;\n              }\n            } else {\n              state.message.parts.push({\n                type: `tool-${options.toolName}`,\n                toolCallId: options.toolCallId,\n                state: options.state,\n                input: anyOptions.input,\n                output: anyOptions.output,\n                rawInput: anyOptions.rawInput,\n                errorText: anyOptions.errorText,\n                providerExecuted: anyOptions.providerExecuted,\n                preliminary: anyOptions.preliminary,\n                ...(anyOptions.providerMetadata != null\n                  ? { callProviderMetadata: anyOptions.providerMetadata }\n                  : {}),\n              } as ToolUIPart<InferUIMessageTools<UI_MESSAGE>>);\n            }\n          }\n\n          function updateDynamicToolPart(\n            options: {\n              toolName: keyof InferUIMessageTools<UI_MESSAGE> & string;\n              toolCallId: string;\n              providerExecuted?: boolean;\n            } & (\n              | {\n                  state: 'input-streaming';\n                  input: unknown;\n                }\n              | {\n                  state: 'input-available';\n                  input: unknown;\n                  providerMetadata?: ProviderMetadata;\n                }\n              | {\n                  state: 'output-available';\n                  input: unknown;\n                  output: unknown;\n                  preliminary: boolean | undefined;\n                }\n              | {\n                  state: 'output-error';\n                  input: unknown;\n                  errorText: string;\n                  providerMetadata?: ProviderMetadata;\n                }\n            ),\n          ) {\n            const part = state.message.parts.find(\n              part =>\n                part.type === 'dynamic-tool' &&\n                part.toolCallId === options.toolCallId,\n            ) as DynamicToolUIPart | undefined;\n\n            const anyOptions = options as any;\n            const anyPart = part as any;\n\n            if (part != null) {\n              part.state = options.state;\n              anyPart.toolName = options.toolName;\n              anyPart.input = anyOptions.input;\n              anyPart.output = anyOptions.output;\n              anyPart.errorText = anyOptions.errorText;\n              anyPart.rawInput = anyOptions.rawInput ?? anyPart.rawInput;\n              anyPart.preliminary = anyOptions.preliminary;\n\n              if (\n                anyOptions.providerMetadata != null &&\n                part.state === 'input-available'\n              ) {\n                part.callProviderMetadata = anyOptions.providerMetadata;\n              }\n            } else {\n              state.message.parts.push({\n                type: 'dynamic-tool',\n                toolName: options.toolName,\n                toolCallId: options.toolCallId,\n                state: options.state,\n                input: anyOptions.input,\n                output: anyOptions.output,\n                errorText: anyOptions.errorText,\n                preliminary: anyOptions.preliminary,\n                ...(anyOptions.providerMetadata != null\n                  ? { callProviderMetadata: anyOptions.providerMetadata }\n                  : {}),\n              } as DynamicToolUIPart);\n            }\n          }\n\n          async function updateMessageMetadata(metadata: unknown) {\n            if (metadata != null) {\n              const mergedMetadata =\n                state.message.metadata != null\n                  ? mergeObjects(state.message.metadata, metadata)\n                  : metadata;\n\n              if (messageMetadataSchema != null) {\n                await validateTypes({\n                  value: mergedMetadata,\n                  schema: messageMetadataSchema,\n                });\n              }\n\n              state.message.metadata =\n                mergedMetadata as InferUIMessageMetadata<UI_MESSAGE>;\n            }\n          }\n\n          switch (chunk.type) {\n            case 'text-start': {\n              const textPart: TextUIPart = {\n                type: 'text',\n                text: '',\n                providerMetadata: chunk.providerMetadata,\n                state: 'streaming',\n              };\n              state.activeTextParts[chunk.id] = textPart;\n              state.message.parts.push(textPart);\n              write();\n              break;\n            }\n\n            case 'text-delta': {\n              const textPart = state.activeTextParts[chunk.id];\n              textPart.text += chunk.delta;\n              textPart.providerMetadata =\n                chunk.providerMetadata ?? textPart.providerMetadata;\n              write();\n              break;\n            }\n\n            case 'text-end': {\n              const textPart = state.activeTextParts[chunk.id];\n              textPart.state = 'done';\n              textPart.providerMetadata =\n                chunk.providerMetadata ?? textPart.providerMetadata;\n              delete state.activeTextParts[chunk.id];\n              write();\n              break;\n            }\n\n            case 'reasoning-start': {\n              const reasoningPart: ReasoningUIPart = {\n                type: 'reasoning',\n                text: '',\n                providerMetadata: chunk.providerMetadata,\n                state: 'streaming',\n              };\n              state.activeReasoningParts[chunk.id] = reasoningPart;\n              state.message.parts.push(reasoningPart);\n              write();\n              break;\n            }\n\n            case 'reasoning-delta': {\n              const reasoningPart = state.activeReasoningParts[chunk.id];\n              reasoningPart.text += chunk.delta;\n              reasoningPart.providerMetadata =\n                chunk.providerMetadata ?? reasoningPart.providerMetadata;\n              write();\n              break;\n            }\n\n            case 'reasoning-end': {\n              const reasoningPart = state.activeReasoningParts[chunk.id];\n              reasoningPart.providerMetadata =\n                chunk.providerMetadata ?? reasoningPart.providerMetadata;\n              reasoningPart.state = 'done';\n              delete state.activeReasoningParts[chunk.id];\n\n              write();\n              break;\n            }\n\n            case 'file': {\n              state.message.parts.push({\n                type: 'file',\n                mediaType: chunk.mediaType,\n                url: chunk.url,\n              });\n\n              write();\n              break;\n            }\n\n            case 'source-url': {\n              state.message.parts.push({\n                type: 'source-url',\n                sourceId: chunk.sourceId,\n                url: chunk.url,\n                title: chunk.title,\n                providerMetadata: chunk.providerMetadata,\n              });\n\n              write();\n              break;\n            }\n\n            case 'source-document': {\n              state.message.parts.push({\n                type: 'source-document',\n                sourceId: chunk.sourceId,\n                mediaType: chunk.mediaType,\n                title: chunk.title,\n                filename: chunk.filename,\n                providerMetadata: chunk.providerMetadata,\n              });\n\n              write();\n              break;\n            }\n\n            case 'tool-input-start': {\n              const toolInvocations = state.message.parts.filter(isToolUIPart);\n\n              // add the partial tool call to the map\n              state.partialToolCalls[chunk.toolCallId] = {\n                text: '',\n                toolName: chunk.toolName,\n                index: toolInvocations.length,\n                dynamic: chunk.dynamic,\n              };\n\n              if (chunk.dynamic) {\n                updateDynamicToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: chunk.toolName,\n                  state: 'input-streaming',\n                  input: undefined,\n                });\n              } else {\n                updateToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: chunk.toolName,\n                  state: 'input-streaming',\n                  input: undefined,\n                  providerExecuted: chunk.providerExecuted,\n                });\n              }\n\n              write();\n              break;\n            }\n\n            case 'tool-input-delta': {\n              const partialToolCall = state.partialToolCalls[chunk.toolCallId];\n\n              partialToolCall.text += chunk.inputTextDelta;\n\n              const { value: partialArgs } = await parsePartialJson(\n                partialToolCall.text,\n              );\n\n              if (partialToolCall.dynamic) {\n                updateDynamicToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: partialToolCall.toolName,\n                  state: 'input-streaming',\n                  input: partialArgs,\n                });\n              } else {\n                updateToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: partialToolCall.toolName,\n                  state: 'input-streaming',\n                  input: partialArgs,\n                });\n              }\n\n              write();\n              break;\n            }\n\n            case 'tool-input-available': {\n              if (chunk.dynamic) {\n                updateDynamicToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: chunk.toolName,\n                  state: 'input-available',\n                  input: chunk.input,\n                  providerMetadata: chunk.providerMetadata,\n                });\n              } else {\n                updateToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: chunk.toolName,\n                  state: 'input-available',\n                  input: chunk.input,\n                  providerExecuted: chunk.providerExecuted,\n                  providerMetadata: chunk.providerMetadata,\n                });\n              }\n\n              write();\n\n              // invoke the onToolCall callback if it exists. This is blocking.\n              // In the future we should make this non-blocking, which\n              // requires additional state management for error handling etc.\n              // Skip calling onToolCall for provider-executed tools since they are already executed\n              if (onToolCall && !chunk.providerExecuted) {\n                await onToolCall({\n                  toolCall: chunk as InferUIMessageToolCall<UI_MESSAGE>,\n                });\n              }\n              break;\n            }\n\n            case 'tool-input-error': {\n              if (chunk.dynamic) {\n                updateDynamicToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: chunk.toolName,\n                  state: 'output-error',\n                  input: chunk.input,\n                  errorText: chunk.errorText,\n                  providerMetadata: chunk.providerMetadata,\n                });\n              } else {\n                updateToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: chunk.toolName,\n                  state: 'output-error',\n                  input: undefined,\n                  rawInput: chunk.input,\n                  errorText: chunk.errorText,\n                  providerExecuted: chunk.providerExecuted,\n                  providerMetadata: chunk.providerMetadata,\n                });\n              }\n\n              write();\n              break;\n            }\n\n            case 'tool-output-available': {\n              if (chunk.dynamic) {\n                const toolInvocation = getDynamicToolInvocation(\n                  chunk.toolCallId,\n                );\n\n                updateDynamicToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: toolInvocation.toolName,\n                  state: 'output-available',\n                  input: (toolInvocation as any).input,\n                  output: chunk.output,\n                  preliminary: chunk.preliminary,\n                });\n              } else {\n                const toolInvocation = getToolInvocation(chunk.toolCallId);\n\n                updateToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: getToolName(toolInvocation),\n                  state: 'output-available',\n                  input: (toolInvocation as any).input,\n                  output: chunk.output,\n                  providerExecuted: chunk.providerExecuted,\n                  preliminary: chunk.preliminary,\n                });\n              }\n\n              write();\n              break;\n            }\n\n            case 'tool-output-error': {\n              if (chunk.dynamic) {\n                const toolInvocation = getDynamicToolInvocation(\n                  chunk.toolCallId,\n                );\n\n                updateDynamicToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: toolInvocation.toolName,\n                  state: 'output-error',\n                  input: (toolInvocation as any).input,\n                  errorText: chunk.errorText,\n                });\n              } else {\n                const toolInvocation = getToolInvocation(chunk.toolCallId);\n\n                updateToolPart({\n                  toolCallId: chunk.toolCallId,\n                  toolName: getToolName(toolInvocation),\n                  state: 'output-error',\n                  input: (toolInvocation as any).input,\n                  rawInput: (toolInvocation as any).rawInput,\n                  errorText: chunk.errorText,\n                });\n              }\n\n              write();\n              break;\n            }\n\n            case 'start-step': {\n              // add a step boundary part to the message\n              state.message.parts.push({ type: 'step-start' });\n              break;\n            }\n\n            case 'finish-step': {\n              // reset the current text and reasoning parts\n              state.activeTextParts = {};\n              state.activeReasoningParts = {};\n              break;\n            }\n\n            case 'start': {\n              if (chunk.messageId != null) {\n                state.message.id = chunk.messageId;\n              }\n\n              await updateMessageMetadata(chunk.messageMetadata);\n\n              if (chunk.messageId != null || chunk.messageMetadata != null) {\n                write();\n              }\n              break;\n            }\n\n            case 'finish': {\n              await updateMessageMetadata(chunk.messageMetadata);\n              if (chunk.messageMetadata != null) {\n                write();\n              }\n              break;\n            }\n\n            case 'message-metadata': {\n              await updateMessageMetadata(chunk.messageMetadata);\n              if (chunk.messageMetadata != null) {\n                write();\n              }\n              break;\n            }\n\n            case 'error': {\n              onError?.(new Error(chunk.errorText));\n              break;\n            }\n\n            default: {\n              if (isDataUIMessageChunk(chunk)) {\n                // validate data chunk if dataPartSchemas is provided\n                if (dataPartSchemas?.[chunk.type] != null) {\n                  await validateTypes({\n                    value: chunk.data,\n                    schema: dataPartSchemas[chunk.type],\n                  });\n                }\n\n                // cast, validation is done above\n                const dataChunk = chunk as DataUIMessageChunk<\n                  InferUIMessageData<UI_MESSAGE>\n                >;\n\n                // transient parts are not added to the message state\n                if (dataChunk.transient) {\n                  onData?.(dataChunk);\n                  break;\n                }\n\n                const existingUIPart =\n                  dataChunk.id != null\n                    ? (state.message.parts.find(\n                        chunkArg =>\n                          dataChunk.type === chunkArg.type &&\n                          dataChunk.id === chunkArg.id,\n                      ) as\n                        | DataUIPart<InferUIMessageData<UI_MESSAGE>>\n                        | undefined)\n                    : undefined;\n\n                if (existingUIPart != null) {\n                  existingUIPart.data = dataChunk.data;\n                } else {\n                  state.message.parts.push(dataChunk);\n                }\n\n                onData?.(dataChunk);\n\n                write();\n              }\n            }\n          }\n\n          controller.enqueue(chunk as InferUIMessageChunk<UI_MESSAGE>);\n        });\n      },\n    }),\n  );\n}\n","import { z } from 'zod/v4';\nimport {\n  ProviderMetadata,\n  providerMetadataSchema,\n} from '../types/provider-metadata';\nimport {\n  InferUIMessageData,\n  InferUIMessageMetadata,\n  UIDataTypes,\n  UIMessage,\n} from '../ui/ui-messages';\nimport { ValueOf } from '../util/value-of';\n\nexport const uiMessageChunkSchema = z.union([\n  z.strictObject({\n    type: z.literal('text-start'),\n    id: z.string(),\n    providerMetadata: providerMetadataSchema.optional(),\n  }),\n  z.strictObject({\n    type: z.literal('text-delta'),\n    id: z.string(),\n    delta: z.string(),\n    providerMetadata: providerMetadataSchema.optional(),\n  }),\n  z.strictObject({\n    type: z.literal('text-end'),\n    id: z.string(),\n    providerMetadata: providerMetadataSchema.optional(),\n  }),\n  z.strictObject({\n    type: z.literal('error'),\n    errorText: z.string(),\n  }),\n  z.strictObject({\n    type: z.literal('tool-input-start'),\n    toolCallId: z.string(),\n    toolName: z.string(),\n    providerExecuted: z.boolean().optional(),\n    dynamic: z.boolean().optional(),\n  }),\n  z.strictObject({\n    type: z.literal('tool-input-delta'),\n    toolCallId: z.string(),\n    inputTextDelta: z.string(),\n  }),\n  z.strictObject({\n    type: z.literal('tool-input-available'),\n    toolCallId: z.string(),\n    toolName: z.string(),\n    input: z.unknown(),\n    providerExecuted: z.boolean().optional(),\n    providerMetadata: providerMetadataSchema.optional(),\n    dynamic: z.boolean().optional(),\n  }),\n  z.strictObject({\n    type: z.literal('tool-input-error'),\n    toolCallId: z.string(),\n    toolName: z.string(),\n    input: z.unknown(),\n    providerExecuted: z.boolean().optional(),\n    providerMetadata: providerMetadataSchema.optional(),\n    dynamic: z.boolean().optional(),\n    errorText: z.string(),\n  }),\n  z.strictObject({\n    type: z.literal('tool-output-available'),\n    toolCallId: z.string(),\n    output: z.unknown(),\n    providerExecuted: z.boolean().optional(),\n    dynamic: z.boolean().optional(),\n    preliminary: z.boolean().optional(),\n  }),\n  z.strictObject({\n    type: z.literal('tool-output-error'),\n    toolCallId: z.string(),\n    errorText: z.string(),\n    providerExecuted: z.boolean().optional(),\n    dynamic: z.boolean().optional(),\n  }),\n  z.strictObject({\n    type: z.literal('reasoning'),\n    text: z.string(),\n    providerMetadata: providerMetadataSchema.optional(),\n  }),\n  z.strictObject({\n    type: z.literal('reasoning-start'),\n    id: z.string(),\n    providerMetadata: providerMetadataSchema.optional(),\n  }),\n  z.strictObject({\n    type: z.literal('reasoning-delta'),\n    id: z.string(),\n    delta: z.string(),\n    providerMetadata: providerMetadataSchema.optional(),\n  }),\n  z.strictObject({\n    type: z.literal('reasoning-end'),\n    id: z.string(),\n    providerMetadata: providerMetadataSchema.optional(),\n  }),\n  z.strictObject({\n    type: z.literal('reasoning-part-finish'),\n  }),\n  z.strictObject({\n    type: z.literal('source-url'),\n    sourceId: z.string(),\n    url: z.string(),\n    title: z.string().optional(),\n    providerMetadata: providerMetadataSchema.optional(),\n  }),\n  z.strictObject({\n    type: z.literal('source-document'),\n    sourceId: z.string(),\n    mediaType: z.string(),\n    title: z.string(),\n    filename: z.string().optional(),\n    providerMetadata: providerMetadataSchema.optional(),\n  }),\n  z.strictObject({\n    type: z.literal('file'),\n    url: z.string(),\n    mediaType: z.string(),\n    providerMetadata: providerMetadataSchema.optional(),\n  }),\n  z.strictObject({\n    type: z.string().startsWith('data-'),\n    id: z.string().optional(),\n    data: z.unknown(),\n    transient: z.boolean().optional(),\n  }),\n  z.strictObject({\n    type: z.literal('start-step'),\n  }),\n  z.strictObject({\n    type: z.literal('finish-step'),\n  }),\n  z.strictObject({\n    type: z.literal('start'),\n    messageId: z.string().optional(),\n    messageMetadata: z.unknown().optional(),\n  }),\n  z.strictObject({\n    type: z.literal('finish'),\n    messageMetadata: z.unknown().optional(),\n  }),\n  z.strictObject({\n    type: z.literal('abort'),\n  }),\n  z.strictObject({\n    type: z.literal('message-metadata'),\n    messageMetadata: z.unknown(),\n  }),\n]);\n\nexport type DataUIMessageChunk<DATA_TYPES extends UIDataTypes> = ValueOf<{\n  [NAME in keyof DATA_TYPES & string]: {\n    type: `data-${NAME}`;\n    id?: string;\n    data: DATA_TYPES[NAME];\n    transient?: boolean;\n  };\n}>;\n\nexport type UIMessageChunk<\n  METADATA = unknown,\n  DATA_TYPES extends UIDataTypes = UIDataTypes,\n> =\n  | {\n      type: 'text-start';\n      id: string;\n      providerMetadata?: ProviderMetadata;\n    }\n  | {\n      type: 'text-delta';\n      delta: string;\n      id: string;\n      providerMetadata?: ProviderMetadata;\n    }\n  | {\n      type: 'text-end';\n      id: string;\n      providerMetadata?: ProviderMetadata;\n    }\n  | {\n      type: 'reasoning-start';\n      id: string;\n      providerMetadata?: ProviderMetadata;\n    }\n  | {\n      type: 'reasoning-delta';\n      id: string;\n      delta: string;\n      providerMetadata?: ProviderMetadata;\n    }\n  | {\n      type: 'reasoning-end';\n      id: string;\n      providerMetadata?: ProviderMetadata;\n    }\n  | {\n      type: 'error';\n      errorText: string;\n    }\n  | {\n      type: 'tool-input-available';\n      toolCallId: string;\n      toolName: string;\n      input: unknown;\n      providerExecuted?: boolean;\n      providerMetadata?: ProviderMetadata;\n      dynamic?: boolean;\n    }\n  | {\n      type: 'tool-input-error';\n      toolCallId: string;\n      toolName: string;\n      input: unknown;\n      providerExecuted?: boolean;\n      providerMetadata?: ProviderMetadata;\n      dynamic?: boolean;\n      errorText: string;\n    }\n  | {\n      type: 'tool-output-available';\n      toolCallId: string;\n      output: unknown;\n      providerExecuted?: boolean;\n      dynamic?: boolean;\n      preliminary?: boolean;\n    }\n  | {\n      type: 'tool-output-error';\n      toolCallId: string;\n      errorText: string;\n      providerExecuted?: boolean;\n      dynamic?: boolean;\n    }\n  | {\n      type: 'tool-input-start';\n      toolCallId: string;\n      toolName: string;\n      providerExecuted?: boolean;\n      dynamic?: boolean;\n    }\n  | {\n      type: 'tool-input-delta';\n      toolCallId: string;\n      inputTextDelta: string;\n    }\n  | {\n      type: 'source-url';\n      sourceId: string;\n      url: string;\n      title?: string;\n      providerMetadata?: ProviderMetadata;\n    }\n  | {\n      type: 'source-document';\n      sourceId: string;\n      mediaType: string;\n      title: string;\n      filename?: string;\n      providerMetadata?: ProviderMetadata;\n    }\n  | {\n      type: 'file';\n      url: string;\n      mediaType: string;\n    }\n  | DataUIMessageChunk<DATA_TYPES>\n  | {\n      type: 'start-step';\n    }\n  | {\n      type: 'finish-step';\n    }\n  | {\n      type: 'start';\n      messageId?: string;\n      messageMetadata?: METADATA;\n    }\n  | {\n      type: 'finish';\n      messageMetadata?: METADATA;\n    }\n  | {\n      type: 'abort';\n    }\n  | {\n      type: 'message-metadata';\n      messageMetadata: METADATA;\n    };\n\nexport function isDataUIMessageChunk(\n  chunk: UIMessageChunk,\n): chunk is DataUIMessageChunk<UIDataTypes> {\n  return chunk.type.startsWith('data-');\n}\n\nexport type InferUIMessageChunk<T extends UIMessage> = UIMessageChunk<\n  InferUIMessageMetadata<T>,\n  InferUIMessageData<T>\n>;\n","/**\n * Deeply merges two objects together.\n * - Properties from the `overrides` object override those in the `base` object with the same key.\n * - For nested objects, the merge is performed recursively (deep merge).\n * - Arrays are replaced, not merged.\n * - Primitive values are replaced.\n * - If both `base` and `overrides` are undefined, returns undefined.\n * - If one of `base` or `overrides` is undefined, returns the other.\n *\n * @param base The target object to merge into\n * @param overrides The source object to merge from\n * @returns A new object with the merged properties, or undefined if both inputs are undefined\n */\nexport function mergeObjects<T extends object, U extends object>(\n  base: T | undefined,\n  overrides: U | undefined,\n): (T & U) | T | U | undefined {\n  // If both inputs are undefined, return undefined\n  if (base === undefined && overrides === undefined) {\n    return undefined;\n  }\n\n  // If target is undefined, return source\n  if (base === undefined) {\n    return overrides;\n  }\n\n  // If source is undefined, return target\n  if (overrides === undefined) {\n    return base;\n  }\n\n  // Create a new object to avoid mutating the inputs\n  const result = { ...base } as T & U;\n\n  // Iterate through all keys in the source object\n  for (const key in overrides) {\n    if (Object.prototype.hasOwnProperty.call(overrides, key)) {\n      const overridesValue = overrides[key];\n\n      // Skip if the overrides value is undefined\n      if (overridesValue === undefined) continue;\n\n      // Get the base value if it exists\n      const baseValue =\n        key in base ? base[key as unknown as keyof T] : undefined;\n\n      // Check if both values are objects that can be deeply merged\n      const isSourceObject =\n        overridesValue !== null &&\n        typeof overridesValue === 'object' &&\n        !Array.isArray(overridesValue) &&\n        !(overridesValue instanceof Date) &&\n        !(overridesValue instanceof RegExp);\n\n      const isTargetObject =\n        baseValue !== null &&\n        baseValue !== undefined &&\n        typeof baseValue === 'object' &&\n        !Array.isArray(baseValue) &&\n        !(baseValue instanceof Date) &&\n        !(baseValue instanceof RegExp);\n\n      // If both values are mergeable objects, merge them recursively\n      if (isSourceObject && isTargetObject) {\n        result[key as keyof (T & U)] = mergeObjects(\n          baseValue as object,\n          overridesValue as object,\n        ) as any;\n      } else {\n        // For primitives, arrays, or when one value is not a mergeable object,\n        // simply override with the source value\n        result[key as keyof (T & U)] = overridesValue as any;\n      }\n    }\n  }\n\n  return result;\n}\n","import { JSONValue } from '@ai-sdk/provider';\nimport { safeParseJSON } from '@ai-sdk/provider-utils';\nimport { fixJson } from './fix-json';\n\nexport async function parsePartialJson(jsonText: string | undefined): Promise<{\n  value: JSONValue | undefined;\n  state:\n    | 'undefined-input'\n    | 'successful-parse'\n    | 'repaired-parse'\n    | 'failed-parse';\n}> {\n  if (jsonText === undefined) {\n    return { value: undefined, state: 'undefined-input' };\n  }\n\n  let result = await safeParseJSON({ text: jsonText });\n\n  if (result.success) {\n    return { value: result.value, state: 'successful-parse' };\n  }\n\n  result = await safeParseJSON({ text: fixJson(jsonText) });\n\n  if (result.success) {\n    return { value: result.value, state: 'repaired-parse' };\n  }\n\n  return { value: undefined, state: 'failed-parse' };\n}\n","type State =\n  | 'ROOT'\n  | 'FINISH'\n  | 'INSIDE_STRING'\n  | 'INSIDE_STRING_ESCAPE'\n  | 'INSIDE_LITERAL'\n  | 'INSIDE_NUMBER'\n  | 'INSIDE_OBJECT_START'\n  | 'INSIDE_OBJECT_KEY'\n  | 'INSIDE_OBJECT_AFTER_KEY'\n  | 'INSIDE_OBJECT_BEFORE_VALUE'\n  | 'INSIDE_OBJECT_AFTER_VALUE'\n  | 'INSIDE_OBJECT_AFTER_COMMA'\n  | 'INSIDE_ARRAY_START'\n  | 'INSIDE_ARRAY_AFTER_VALUE'\n  | 'INSIDE_ARRAY_AFTER_COMMA';\n\n// Implemented as a scanner with additional fixing\n// that performs a single linear time scan pass over the partial JSON.\n//\n// The states should ideally match relevant states from the JSON spec:\n// https://www.json.org/json-en.html\n//\n// Please note that invalid JSON is not considered/covered, because it\n// is assumed that the resulting JSON will be processed by a standard\n// JSON parser that will detect any invalid JSON.\nexport function fixJson(input: string): string {\n  const stack: State[] = ['ROOT'];\n  let lastValidIndex = -1;\n  let literalStart: number | null = null;\n\n  function processValueStart(char: string, i: number, swapState: State) {\n    {\n      switch (char) {\n        case '\"': {\n          lastValidIndex = i;\n          stack.pop();\n          stack.push(swapState);\n          stack.push('INSIDE_STRING');\n          break;\n        }\n\n        case 'f':\n        case 't':\n        case 'n': {\n          lastValidIndex = i;\n          literalStart = i;\n          stack.pop();\n          stack.push(swapState);\n          stack.push('INSIDE_LITERAL');\n          break;\n        }\n\n        case '-': {\n          stack.pop();\n          stack.push(swapState);\n          stack.push('INSIDE_NUMBER');\n          break;\n        }\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9': {\n          lastValidIndex = i;\n          stack.pop();\n          stack.push(swapState);\n          stack.push('INSIDE_NUMBER');\n          break;\n        }\n\n        case '{': {\n          lastValidIndex = i;\n          stack.pop();\n          stack.push(swapState);\n          stack.push('INSIDE_OBJECT_START');\n          break;\n        }\n\n        case '[': {\n          lastValidIndex = i;\n          stack.pop();\n          stack.push(swapState);\n          stack.push('INSIDE_ARRAY_START');\n          break;\n        }\n      }\n    }\n  }\n\n  function processAfterObjectValue(char: string, i: number) {\n    switch (char) {\n      case ',': {\n        stack.pop();\n        stack.push('INSIDE_OBJECT_AFTER_COMMA');\n        break;\n      }\n      case '}': {\n        lastValidIndex = i;\n        stack.pop();\n        break;\n      }\n    }\n  }\n\n  function processAfterArrayValue(char: string, i: number) {\n    switch (char) {\n      case ',': {\n        stack.pop();\n        stack.push('INSIDE_ARRAY_AFTER_COMMA');\n        break;\n      }\n      case ']': {\n        lastValidIndex = i;\n        stack.pop();\n        break;\n      }\n    }\n  }\n\n  for (let i = 0; i < input.length; i++) {\n    const char = input[i];\n    const currentState = stack[stack.length - 1];\n\n    switch (currentState) {\n      case 'ROOT':\n        processValueStart(char, i, 'FINISH');\n        break;\n\n      case 'INSIDE_OBJECT_START': {\n        switch (char) {\n          case '\"': {\n            stack.pop();\n            stack.push('INSIDE_OBJECT_KEY');\n            break;\n          }\n          case '}': {\n            lastValidIndex = i;\n            stack.pop();\n            break;\n          }\n        }\n        break;\n      }\n\n      case 'INSIDE_OBJECT_AFTER_COMMA': {\n        switch (char) {\n          case '\"': {\n            stack.pop();\n            stack.push('INSIDE_OBJECT_KEY');\n            break;\n          }\n        }\n        break;\n      }\n\n      case 'INSIDE_OBJECT_KEY': {\n        switch (char) {\n          case '\"': {\n            stack.pop();\n            stack.push('INSIDE_OBJECT_AFTER_KEY');\n            break;\n          }\n        }\n        break;\n      }\n\n      case 'INSIDE_OBJECT_AFTER_KEY': {\n        switch (char) {\n          case ':': {\n            stack.pop();\n            stack.push('INSIDE_OBJECT_BEFORE_VALUE');\n\n            break;\n          }\n        }\n        break;\n      }\n\n      case 'INSIDE_OBJECT_BEFORE_VALUE': {\n        processValueStart(char, i, 'INSIDE_OBJECT_AFTER_VALUE');\n        break;\n      }\n\n      case 'INSIDE_OBJECT_AFTER_VALUE': {\n        processAfterObjectValue(char, i);\n        break;\n      }\n\n      case 'INSIDE_STRING': {\n        switch (char) {\n          case '\"': {\n            stack.pop();\n            lastValidIndex = i;\n            break;\n          }\n\n          case '\\\\': {\n            stack.push('INSIDE_STRING_ESCAPE');\n            break;\n          }\n\n          default: {\n            lastValidIndex = i;\n          }\n        }\n\n        break;\n      }\n\n      case 'INSIDE_ARRAY_START': {\n        switch (char) {\n          case ']': {\n            lastValidIndex = i;\n            stack.pop();\n            break;\n          }\n\n          default: {\n            lastValidIndex = i;\n            processValueStart(char, i, 'INSIDE_ARRAY_AFTER_VALUE');\n            break;\n          }\n        }\n        break;\n      }\n\n      case 'INSIDE_ARRAY_AFTER_VALUE': {\n        switch (char) {\n          case ',': {\n            stack.pop();\n            stack.push('INSIDE_ARRAY_AFTER_COMMA');\n            break;\n          }\n\n          case ']': {\n            lastValidIndex = i;\n            stack.pop();\n            break;\n          }\n\n          default: {\n            lastValidIndex = i;\n            break;\n          }\n        }\n\n        break;\n      }\n\n      case 'INSIDE_ARRAY_AFTER_COMMA': {\n        processValueStart(char, i, 'INSIDE_ARRAY_AFTER_VALUE');\n        break;\n      }\n\n      case 'INSIDE_STRING_ESCAPE': {\n        stack.pop();\n        lastValidIndex = i;\n\n        break;\n      }\n\n      case 'INSIDE_NUMBER': {\n        switch (char) {\n          case '0':\n          case '1':\n          case '2':\n          case '3':\n          case '4':\n          case '5':\n          case '6':\n          case '7':\n          case '8':\n          case '9': {\n            lastValidIndex = i;\n            break;\n          }\n\n          case 'e':\n          case 'E':\n          case '-':\n          case '.': {\n            break;\n          }\n\n          case ',': {\n            stack.pop();\n\n            if (stack[stack.length - 1] === 'INSIDE_ARRAY_AFTER_VALUE') {\n              processAfterArrayValue(char, i);\n            }\n\n            if (stack[stack.length - 1] === 'INSIDE_OBJECT_AFTER_VALUE') {\n              processAfterObjectValue(char, i);\n            }\n\n            break;\n          }\n\n          case '}': {\n            stack.pop();\n\n            if (stack[stack.length - 1] === 'INSIDE_OBJECT_AFTER_VALUE') {\n              processAfterObjectValue(char, i);\n            }\n\n            break;\n          }\n\n          case ']': {\n            stack.pop();\n\n            if (stack[stack.length - 1] === 'INSIDE_ARRAY_AFTER_VALUE') {\n              processAfterArrayValue(char, i);\n            }\n\n            break;\n          }\n\n          default: {\n            stack.pop();\n            break;\n          }\n        }\n\n        break;\n      }\n\n      case 'INSIDE_LITERAL': {\n        const partialLiteral = input.substring(literalStart!, i + 1);\n\n        if (\n          !'false'.startsWith(partialLiteral) &&\n          !'true'.startsWith(partialLiteral) &&\n          !'null'.startsWith(partialLiteral)\n        ) {\n          stack.pop();\n\n          if (stack[stack.length - 1] === 'INSIDE_OBJECT_AFTER_VALUE') {\n            processAfterObjectValue(char, i);\n          } else if (stack[stack.length - 1] === 'INSIDE_ARRAY_AFTER_VALUE') {\n            processAfterArrayValue(char, i);\n          }\n        } else {\n          lastValidIndex = i;\n        }\n\n        break;\n      }\n    }\n  }\n\n  let result = input.slice(0, lastValidIndex + 1);\n\n  for (let i = stack.length - 1; i >= 0; i--) {\n    const state = stack[i];\n\n    switch (state) {\n      case 'INSIDE_STRING': {\n        result += '\"';\n        break;\n      }\n\n      case 'INSIDE_OBJECT_KEY':\n      case 'INSIDE_OBJECT_AFTER_KEY':\n      case 'INSIDE_OBJECT_AFTER_COMMA':\n      case 'INSIDE_OBJECT_START':\n      case 'INSIDE_OBJECT_BEFORE_VALUE':\n      case 'INSIDE_OBJECT_AFTER_VALUE': {\n        result += '}';\n        break;\n      }\n\n      case 'INSIDE_ARRAY_START':\n      case 'INSIDE_ARRAY_AFTER_COMMA':\n      case 'INSIDE_ARRAY_AFTER_VALUE': {\n        result += ']';\n        break;\n      }\n\n      case 'INSIDE_LITERAL': {\n        const partialLiteral = input.substring(literalStart!, input.length);\n\n        if ('true'.startsWith(partialLiteral)) {\n          result += 'true'.slice(partialLiteral.length);\n        } else if ('false'.startsWith(partialLiteral)) {\n          result += 'false'.slice(partialLiteral.length);\n        } else if ('null'.startsWith(partialLiteral)) {\n          result += 'null'.slice(partialLiteral.length);\n        }\n      }\n    }\n  }\n\n  return result;\n}\n","import {\n  InferToolInput,\n  InferToolOutput,\n  Tool,\n  ToolCall,\n} from '@ai-sdk/provider-utils';\nimport { ToolSet } from '../generate-text';\nimport { ProviderMetadata } from '../types/provider-metadata';\nimport { DeepPartial } from '../util/deep-partial';\nimport { ValueOf } from '../util/value-of';\n\n/**\nThe data types that can be used in the UI message for the UI message data parts.\n */\nexport type UIDataTypes = Record<string, unknown>;\n\nexport type UITool = {\n  input: unknown;\n  output: unknown | undefined;\n};\n\n/**\n * Infer the input and output types of a tool so it can be used as a UI tool.\n */\nexport type InferUITool<TOOL extends Tool> = {\n  input: InferToolInput<TOOL>;\n  output: InferToolOutput<TOOL>;\n};\n\n/**\n * Infer the input and output types of a tool set so it can be used as a UI tool set.\n */\nexport type InferUITools<TOOLS extends ToolSet> = {\n  [NAME in keyof TOOLS & string]: InferUITool<TOOLS[NAME]>;\n};\n\nexport type UITools = Record<string, UITool>;\n\n/**\nAI SDK UI Messages. They are used in the client and to communicate between the frontend and the API routes.\n */\nexport interface UIMessage<\n  METADATA = unknown,\n  DATA_PARTS extends UIDataTypes = UIDataTypes,\n  TOOLS extends UITools = UITools,\n> {\n  /**\nA unique identifier for the message.\n   */\n  id: string;\n\n  /**\nThe role of the message.\n   */\n  role: 'system' | 'user' | 'assistant';\n\n  /**\nThe metadata of the message.\n   */\n  metadata?: METADATA;\n\n  /**\nThe parts of the message. Use this for rendering the message in the UI.\n\nSystem messages should be avoided (set the system prompt on the server instead).\nThey can have text parts.\n\nUser messages can have text parts and file parts.\n\nAssistant messages can have text, reasoning, tool invocation, and file parts.\n   */\n  parts: Array<UIMessagePart<DATA_PARTS, TOOLS>>;\n}\n\nexport type UIMessagePart<\n  DATA_TYPES extends UIDataTypes,\n  TOOLS extends UITools,\n> =\n  | TextUIPart\n  | ReasoningUIPart\n  | ToolUIPart<TOOLS>\n  | DynamicToolUIPart\n  | SourceUrlUIPart\n  | SourceDocumentUIPart\n  | FileUIPart\n  | DataUIPart<DATA_TYPES>\n  | StepStartUIPart;\n\n/**\n * A text part of a message.\n */\nexport type TextUIPart = {\n  type: 'text';\n\n  /**\n   * The text content.\n   */\n  text: string;\n\n  /**\n   * The state of the text part.\n   */\n  state?: 'streaming' | 'done';\n\n  /**\n   * The provider metadata.\n   */\n  providerMetadata?: ProviderMetadata;\n};\n\n/**\n * A reasoning part of a message.\n */\nexport type ReasoningUIPart = {\n  type: 'reasoning';\n\n  /**\n   * The reasoning text.\n   */\n  text: string;\n\n  /**\n   * The state of the reasoning part.\n   */\n  state?: 'streaming' | 'done';\n\n  /**\n   * The provider metadata.\n   */\n  providerMetadata?: ProviderMetadata;\n};\n\n/**\n * A source part of a message.\n */\nexport type SourceUrlUIPart = {\n  type: 'source-url';\n  sourceId: string;\n  url: string;\n  title?: string;\n  providerMetadata?: ProviderMetadata;\n};\n\n/**\n * A document source part of a message.\n */\nexport type SourceDocumentUIPart = {\n  type: 'source-document';\n  sourceId: string;\n  mediaType: string;\n  title: string;\n  filename?: string;\n  providerMetadata?: ProviderMetadata;\n};\n\n/**\n * A file part of a message.\n */\nexport type FileUIPart = {\n  type: 'file';\n\n  /**\n   * IANA media type of the file.\n   *\n   * @see https://www.iana.org/assignments/media-types/media-types.xhtml\n   */\n  mediaType: string;\n\n  /**\n   * Optional filename of the file.\n   */\n  filename?: string;\n\n  /**\n   * The URL of the file.\n   * It can either be a URL to a hosted file or a [Data URL](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs).\n   */\n  url: string;\n\n  /**\n   * The provider metadata.\n   */\n  providerMetadata?: ProviderMetadata;\n};\n\n/**\n * A step boundary part of a message.\n */\nexport type StepStartUIPart = {\n  type: 'step-start';\n};\n\nexport type DataUIPart<DATA_TYPES extends UIDataTypes> = ValueOf<{\n  [NAME in keyof DATA_TYPES & string]: {\n    type: `data-${NAME}`;\n    id?: string;\n    data: DATA_TYPES[NAME];\n  };\n}>;\n\nexport type ToolUIPart<TOOLS extends UITools = UITools> = ValueOf<{\n  [NAME in keyof TOOLS & string]: {\n    type: `tool-${NAME}`;\n    toolCallId: string;\n  } & (\n    | {\n        state: 'input-streaming';\n        input: DeepPartial<TOOLS[NAME]['input']> | undefined;\n        providerExecuted?: boolean;\n        output?: never;\n        errorText?: never;\n      }\n    | {\n        state: 'input-available';\n        input: TOOLS[NAME]['input'];\n        providerExecuted?: boolean;\n        output?: never;\n        errorText?: never;\n        callProviderMetadata?: ProviderMetadata;\n      }\n    | {\n        state: 'output-available';\n        input: TOOLS[NAME]['input'];\n        output: TOOLS[NAME]['output'];\n        errorText?: never;\n        providerExecuted?: boolean;\n        callProviderMetadata?: ProviderMetadata;\n        preliminary?: boolean;\n      }\n    | {\n        state: 'output-error'; // TODO AI SDK 6: change to 'error' state\n        input: TOOLS[NAME]['input'] | undefined;\n        rawInput?: unknown; // TODO AI SDK 6: remove this field, input should be unknown\n        output?: never;\n        errorText: string;\n        providerExecuted?: boolean;\n        callProviderMetadata?: ProviderMetadata;\n      }\n  );\n}>;\n\nexport type DynamicToolUIPart = {\n  type: 'dynamic-tool';\n  toolName: string;\n  toolCallId: string;\n} & (\n  | {\n      state: 'input-streaming';\n      input: unknown | undefined;\n      output?: never;\n      errorText?: never;\n    }\n  | {\n      state: 'input-available';\n      input: unknown;\n      output?: never;\n      errorText?: never;\n      callProviderMetadata?: ProviderMetadata;\n    }\n  | {\n      state: 'output-available';\n      input: unknown;\n      output: unknown;\n      errorText?: never;\n      callProviderMetadata?: ProviderMetadata;\n      preliminary?: boolean;\n    }\n  | {\n      state: 'output-error'; // TODO AI SDK 6: change to 'error' state\n      input: unknown;\n      output?: never;\n      errorText: string;\n      callProviderMetadata?: ProviderMetadata;\n    }\n);\n\nexport function isToolUIPart<TOOLS extends UITools>(\n  part: UIMessagePart<UIDataTypes, TOOLS>,\n): part is ToolUIPart<TOOLS> {\n  return part.type.startsWith('tool-');\n}\n\nexport function getToolName<TOOLS extends UITools>(\n  part: ToolUIPart<TOOLS>,\n): keyof TOOLS {\n  return part.type.split('-').slice(1).join('-') as keyof TOOLS;\n}\n\nexport type InferUIMessageMetadata<T extends UIMessage> =\n  T extends UIMessage<infer METADATA> ? METADATA : unknown;\n\nexport type InferUIMessageData<T extends UIMessage> =\n  T extends UIMessage<unknown, infer DATA_TYPES> ? DATA_TYPES : UIDataTypes;\n\nexport type InferUIMessageTools<T extends UIMessage> =\n  T extends UIMessage<unknown, UIDataTypes, infer TOOLS> ? TOOLS : UITools;\n\nexport type InferUIMessageToolOutputs<UI_MESSAGE extends UIMessage> =\n  InferUIMessageTools<UI_MESSAGE>[keyof InferUIMessageTools<UI_MESSAGE>]['output'];\n\nexport type InferUIMessageToolCall<UI_MESSAGE extends UIMessage> =\n  | ValueOf<{\n      [NAME in keyof InferUIMessageTools<UI_MESSAGE>]: ToolCall<\n        NAME & string,\n        InferUIMessageTools<UI_MESSAGE>[NAME] extends { input: infer INPUT }\n          ? INPUT\n          : never\n      > & { dynamic?: false };\n    }>\n  | (ToolCall<string, unknown> & { dynamic: true });\n","import {\n  createStreamingUIMessageState,\n  processUIMessageStream,\n  StreamingUIMessageState,\n} from '../ui/process-ui-message-stream';\nimport { UIMessage } from '../ui/ui-messages';\nimport { ErrorHandler } from '../util/error-handler';\nimport { InferUIMessageChunk, UIMessageChunk } from './ui-message-chunks';\nimport { UIMessageStreamOnFinishCallback } from './ui-message-stream-on-finish-callback';\n\nexport function handleUIMessageStreamFinish<UI_MESSAGE extends UIMessage>({\n  messageId,\n  originalMessages = [],\n  onFinish,\n  onError,\n  stream,\n}: {\n  stream: ReadableStream<InferUIMessageChunk<UI_MESSAGE>>;\n\n  /**\n   * The message ID to use for the response message.\n   * If not provided, no id will be set for the response message.\n   */\n  messageId?: string;\n\n  /**\n   * The original messages.\n   */\n  originalMessages?: UI_MESSAGE[];\n\n  onError: ErrorHandler;\n\n  onFinish?: UIMessageStreamOnFinishCallback<UI_MESSAGE>;\n}): ReadableStream<InferUIMessageChunk<UI_MESSAGE>> {\n  // last message is only relevant for assistant messages\n  let lastMessage: UI_MESSAGE | undefined =\n    originalMessages?.[originalMessages.length - 1];\n  if (lastMessage?.role !== 'assistant') {\n    lastMessage = undefined;\n  } else {\n    // appending to the last message, so we need to use the same id\n    messageId = lastMessage.id;\n  }\n\n  let isAborted = false;\n\n  const idInjectedStream = stream.pipeThrough(\n    new TransformStream<\n      InferUIMessageChunk<UI_MESSAGE>,\n      InferUIMessageChunk<UI_MESSAGE>\n    >({\n      transform(chunk, controller) {\n        // when there is no messageId in the start chunk,\n        // but the user checked for persistence,\n        // inject the messageId into the chunk\n        if (chunk.type === 'start') {\n          const startChunk = chunk as UIMessageChunk & { type: 'start' };\n          if (startChunk.messageId == null && messageId != null) {\n            startChunk.messageId = messageId;\n          }\n        }\n\n        if (chunk.type === 'abort') {\n          isAborted = true;\n        }\n\n        controller.enqueue(chunk);\n      },\n    }),\n  );\n\n  if (onFinish == null) {\n    return idInjectedStream;\n  }\n\n  const state = createStreamingUIMessageState<UI_MESSAGE>({\n    lastMessage: lastMessage\n      ? (structuredClone(lastMessage) as UI_MESSAGE)\n      : undefined,\n    messageId: messageId ?? '', // will be overridden by the stream\n  });\n\n  const runUpdateMessageJob = async (\n    job: (options: {\n      state: StreamingUIMessageState<UI_MESSAGE>;\n      write: () => void;\n    }) => Promise<void>,\n  ) => {\n    await job({ state, write: () => {} });\n  };\n\n  return processUIMessageStream<UI_MESSAGE>({\n    stream: idInjectedStream,\n    runUpdateMessageJob,\n    onError,\n  }).pipeThrough(\n    new TransformStream<\n      InferUIMessageChunk<UI_MESSAGE>,\n      InferUIMessageChunk<UI_MESSAGE>\n    >({\n      transform(chunk, controller) {\n        controller.enqueue(chunk);\n      },\n\n      async flush() {\n        const isContinuation = state.message.id === lastMessage?.id;\n        await onFinish({\n          isAborted,\n          isContinuation,\n          responseMessage: state.message as UI_MESSAGE,\n          messages: [\n            ...(isContinuation\n              ? originalMessages.slice(0, -1)\n              : originalMessages),\n            state.message,\n          ] as UI_MESSAGE[],\n        });\n      },\n    }),\n  );\n}\n","import { ServerResponse } from 'node:http';\nimport { prepareHeaders } from '../util/prepare-headers';\nimport { writeToServerResponse } from '../util/write-to-server-response';\nimport { JsonToSseTransformStream } from './json-to-sse-transform-stream';\nimport { UI_MESSAGE_STREAM_HEADERS } from './ui-message-stream-headers';\nimport { UIMessageChunk } from './ui-message-chunks';\nimport { UIMessageStreamResponseInit } from './ui-message-stream-response-init';\n\nexport function pipeUIMessageStreamToResponse({\n  response,\n  status,\n  statusText,\n  headers,\n  stream,\n  consumeSseStream,\n}: {\n  response: ServerResponse;\n  stream: ReadableStream<UIMessageChunk>;\n} & UIMessageStreamResponseInit): void {\n  let sseStream = stream.pipeThrough(new JsonToSseTransformStream());\n\n  // when the consumeSseStream is provided, we need to tee the stream\n  // and send the second part to the consumeSseStream function\n  // so that it can be consumed by the client independently\n  if (consumeSseStream) {\n    const [stream1, stream2] = sseStream.tee();\n    sseStream = stream1;\n    consumeSseStream({ stream: stream2 }); // no await (do not block the response)\n  }\n\n  writeToServerResponse({\n    response,\n    status,\n    statusText,\n    headers: Object.fromEntries(\n      prepareHeaders(headers, UI_MESSAGE_STREAM_HEADERS).entries(),\n    ),\n    stream: sseStream.pipeThrough(new TextEncoderStream()),\n  });\n}\n","export type AsyncIterableStream<T> = AsyncIterable<T> & ReadableStream<T>;\n\nexport function createAsyncIterableStream<T>(\n  source: ReadableStream<T>,\n): AsyncIterableStream<T> {\n  const stream = source.pipeThrough(new TransformStream<T, T>());\n\n  (stream as AsyncIterableStream<T>)[Symbol.asyncIterator] = () => {\n    const reader = stream.getReader();\n    return {\n      async next(): Promise<IteratorResult<T>> {\n        const { done, value } = await reader.read();\n        return done ? { done: true, value: undefined } : { done: false, value };\n      },\n    };\n  };\n\n  return stream as AsyncIterableStream<T>;\n}\n","/**\n * Consumes a ReadableStream until it's fully read.\n *\n * This function reads the stream chunk by chunk until the stream is exhausted.\n * It doesn't process or return the data from the stream; it simply ensures\n * that the entire stream is read.\n *\n * @param {ReadableStream} stream - The ReadableStream to be consumed.\n * @returns {Promise<void>} A promise that resolves when the stream is fully consumed.\n */\nexport async function consumeStream({\n  stream,\n  onError,\n}: {\n  stream: ReadableStream;\n  onError?: (error: unknown) => void;\n}): Promise<void> {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const { done } = await reader.read();\n      if (done) break;\n    }\n  } catch (error) {\n    onError?.(error);\n  } finally {\n    reader.releaseLock();\n  }\n}\n","import { ErrorHandler } from './error-handler';\n\n/**\n * Creates a Promise with externally accessible resolve and reject functions.\n *\n * @template T - The type of the value that the Promise will resolve to.\n * @returns An object containing:\n *   - promise: A Promise that can be resolved or rejected externally.\n *   - resolve: A function to resolve the Promise with a value of type T.\n *   - reject: A function to reject the Promise with an error.\n */\nexport function createResolvablePromise<T = any>(): {\n  promise: Promise<T>;\n  resolve: (value: T) => void;\n  reject: ErrorHandler;\n} {\n  let resolve: (value: T) => void;\n  let reject: ErrorHandler;\n\n  const promise = new Promise<T>((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n\n  return {\n    promise,\n    resolve: resolve!,\n    reject: reject!,\n  };\n}\n","import { createResolvablePromise } from './create-resolvable-promise';\n\n/**\n * Creates a stitchable stream that can pipe one stream at a time.\n *\n * @template T - The type of values emitted by the streams.\n * @returns {Object} An object containing the stitchable stream and control methods.\n */\nexport function createStitchableStream<T>(): {\n  stream: ReadableStream<T>;\n  addStream: (innerStream: ReadableStream<T>) => void;\n  close: () => void;\n  terminate: () => void;\n} {\n  let innerStreamReaders: ReadableStreamDefaultReader<T>[] = [];\n  let controller: ReadableStreamDefaultController<T> | null = null;\n  let isClosed = false;\n  let waitForNewStream = createResolvablePromise<void>();\n\n  const terminate = () => {\n    isClosed = true;\n    waitForNewStream.resolve();\n\n    innerStreamReaders.forEach(reader => reader.cancel());\n    innerStreamReaders = [];\n    controller?.close();\n  };\n\n  const processPull = async () => {\n    // Case 1: Outer stream is closed and no more inner streams\n    if (isClosed && innerStreamReaders.length === 0) {\n      controller?.close();\n      return;\n    }\n\n    // Case 2: No inner streams available, but outer stream is open\n    // wait for a new inner stream to be added or the outer stream to close\n    if (innerStreamReaders.length === 0) {\n      waitForNewStream = createResolvablePromise<void>();\n      await waitForNewStream.promise;\n      return processPull();\n    }\n\n    try {\n      const { value, done } = await innerStreamReaders[0].read();\n\n      if (done) {\n        // Case 3: Current inner stream is done\n        innerStreamReaders.shift(); // Remove the finished stream\n\n        // Continue pulling from the next stream if available\n        if (innerStreamReaders.length > 0) {\n          await processPull();\n        } else if (isClosed) {\n          controller?.close();\n        }\n      } else {\n        // Case 4: Current inner stream returns an item\n        controller?.enqueue(value);\n      }\n    } catch (error) {\n      // Case 5: Current inner stream throws an error\n      controller?.error(error);\n      innerStreamReaders.shift(); // Remove the errored stream\n      terminate(); // we have errored, terminate all streams\n    }\n  };\n\n  return {\n    stream: new ReadableStream<T>({\n      start(controllerParam) {\n        controller = controllerParam;\n      },\n      pull: processPull,\n      async cancel() {\n        for (const reader of innerStreamReaders) {\n          await reader.cancel();\n        }\n        innerStreamReaders = [];\n        isClosed = true;\n      },\n    }),\n    addStream: (innerStream: ReadableStream<T>) => {\n      if (isClosed) {\n        throw new Error('Cannot add inner stream: outer stream is closed');\n      }\n\n      innerStreamReaders.push(innerStream.getReader());\n      waitForNewStream.resolve();\n    },\n\n    /**\n     * Gracefully close the outer stream. This will let the inner streams\n     * finish processing and then close the outer stream.\n     */\n    close: () => {\n      isClosed = true;\n      waitForNewStream.resolve();\n\n      if (innerStreamReaders.length === 0) {\n        controller?.close();\n      }\n    },\n\n    /**\n     * Immediately close the outer stream. This will cancel all inner streams\n     * and close the outer stream.\n     */\n    terminate,\n  };\n}\n","/**\n * Delayed promise. It is only constructed once the value is accessed.\n * This is useful to avoid unhandled promise rejections when the promise is created\n * but not accessed.\n */\nexport class DelayedPromise<T> {\n  private status:\n    | { type: 'pending' }\n    | { type: 'resolved'; value: T }\n    | { type: 'rejected'; error: unknown } = { type: 'pending' };\n  private _promise: Promise<T> | undefined;\n  private _resolve: undefined | ((value: T) => void) = undefined;\n  private _reject: undefined | ((error: unknown) => void) = undefined;\n\n  get promise(): Promise<T> {\n    if (this._promise) {\n      return this._promise;\n    }\n\n    this._promise = new Promise<T>((resolve, reject) => {\n      if (this.status.type === 'resolved') {\n        resolve(this.status.value);\n      } else if (this.status.type === 'rejected') {\n        reject(this.status.error);\n      }\n\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n\n    return this._promise;\n  }\n\n  resolve(value: T): void {\n    this.status = { type: 'resolved', value };\n\n    if (this._promise) {\n      this._resolve?.(value);\n    }\n  }\n\n  reject(error: unknown): void {\n    this.status = { type: 'rejected', error };\n\n    if (this._promise) {\n      this._reject?.(error);\n    }\n  }\n}\n","export function filterStreamErrors<T>(\n  readable: ReadableStream<T>,\n  onError: ({\n    error,\n    controller,\n  }: {\n    error: unknown;\n    controller: ReadableStreamDefaultController<T>;\n  }) => Promise<void> | void,\n): ReadableStream<T> {\n  return new ReadableStream<T>({\n    async start(controller) {\n      const reader = readable.getReader();\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            controller.close();\n            break;\n          }\n          controller.enqueue(value);\n        }\n      } catch (error) {\n        await onError({ error, controller });\n      }\n    },\n    cancel(reason) {\n      return readable.cancel(reason);\n    },\n  });\n}\n","// Shim for performance.now() to support environments that don't have it:\nexport function now(): number {\n  return globalThis?.performance?.now() ?? Date.now();\n}\n","import {\n  LanguageModelV2CallWarning,\n  LanguageModelV2StreamPart,\n} from '@ai-sdk/provider';\nimport {\n  executeTool,\n  generateId,\n  getErrorMessage,\n  ModelMessage,\n} from '@ai-sdk/provider-utils';\nimport { Tracer } from '@opentelemetry/api';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { recordErrorOnSpan, recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport { FinishReason, LanguageModelUsage, ProviderMetadata } from '../types';\nimport { Source } from '../types/language-model';\nimport { DefaultGeneratedFileWithType, GeneratedFile } from './generated-file';\nimport { parseToolCall } from './parse-tool-call';\nimport { TypedToolCall } from './tool-call';\nimport { ToolCallRepairFunction } from './tool-call-repair-function';\nimport { TypedToolError } from './tool-error';\nimport { TypedToolResult } from './tool-result';\nimport { ToolSet } from './tool-set';\n\nexport type SingleRequestTextStreamPart<TOOLS extends ToolSet> =\n  // Text blocks:\n  | {\n      type: 'text-start';\n      providerMetadata?: ProviderMetadata;\n      id: string;\n    }\n  | {\n      type: 'text-delta';\n      id: string;\n      providerMetadata?: ProviderMetadata;\n      delta: string;\n    }\n  | {\n      type: 'text-end';\n      providerMetadata?: ProviderMetadata;\n      id: string;\n    }\n\n  // Reasoning blocks:\n  | {\n      type: 'reasoning-start';\n      providerMetadata?: ProviderMetadata;\n      id: string;\n    }\n  | {\n      type: 'reasoning-delta';\n      id: string;\n      providerMetadata?: ProviderMetadata;\n      delta: string;\n    }\n  | {\n      type: 'reasoning-end';\n      id: string;\n      providerMetadata?: ProviderMetadata;\n    }\n\n  // Tool calls:\n  | {\n      type: 'tool-input-start';\n      id: string;\n      toolName: string;\n      providerMetadata?: ProviderMetadata;\n    }\n  | {\n      type: 'tool-input-delta';\n      id: string;\n      delta: string;\n      providerMetadata?: ProviderMetadata;\n    }\n  | {\n      type: 'tool-input-end';\n      id: string;\n      providerMetadata?: ProviderMetadata;\n    }\n  | ({ type: 'source' } & Source)\n  | { type: 'file'; file: GeneratedFile } // different because of GeneratedFile object\n  | ({ type: 'tool-call' } & TypedToolCall<TOOLS>)\n  | ({ type: 'tool-result' } & TypedToolResult<TOOLS>)\n  | ({ type: 'tool-error' } & TypedToolError<TOOLS>)\n  | { type: 'file'; file: GeneratedFile } // different because of GeneratedFile object\n  | { type: 'stream-start'; warnings: LanguageModelV2CallWarning[] }\n  | {\n      type: 'response-metadata';\n      id?: string;\n      timestamp?: Date;\n      modelId?: string;\n    }\n  | {\n      type: 'finish';\n      finishReason: FinishReason;\n      usage: LanguageModelUsage;\n      providerMetadata?: ProviderMetadata;\n    }\n  | { type: 'error'; error: unknown }\n  | { type: 'raw'; rawValue: unknown };\n\nexport function runToolsTransformation<TOOLS extends ToolSet>({\n  tools,\n  generatorStream,\n  tracer,\n  telemetry,\n  system,\n  messages,\n  abortSignal,\n  repairToolCall,\n  experimental_context,\n}: {\n  tools: TOOLS | undefined;\n  generatorStream: ReadableStream<LanguageModelV2StreamPart>;\n  tracer: Tracer;\n  telemetry: TelemetrySettings | undefined;\n  system: string | undefined;\n  messages: ModelMessage[];\n  abortSignal: AbortSignal | undefined;\n  repairToolCall: ToolCallRepairFunction<TOOLS> | undefined;\n  experimental_context: unknown;\n}): ReadableStream<SingleRequestTextStreamPart<TOOLS>> {\n  // tool results stream\n  let toolResultsStreamController: ReadableStreamDefaultController<\n    SingleRequestTextStreamPart<TOOLS>\n  > | null = null;\n  const toolResultsStream = new ReadableStream<\n    SingleRequestTextStreamPart<TOOLS>\n  >({\n    start(controller) {\n      toolResultsStreamController = controller;\n    },\n  });\n\n  // keep track of outstanding tool results for stream closing:\n  const outstandingToolResults = new Set<string>();\n\n  // keep track of tool inputs for provider-side tool results\n  const toolInputs = new Map<string, unknown>();\n\n  let canClose = false;\n  let finishChunk:\n    | (SingleRequestTextStreamPart<TOOLS> & { type: 'finish' })\n    | undefined = undefined;\n\n  function attemptClose() {\n    // close the tool results controller if no more outstanding tool calls\n    if (canClose && outstandingToolResults.size === 0) {\n      // we delay sending the finish chunk until all tool results (incl. delayed ones)\n      // are received to ensure that the frontend receives tool results before a message\n      // finish event arrives.\n      if (finishChunk != null) {\n        toolResultsStreamController!.enqueue(finishChunk);\n      }\n\n      toolResultsStreamController!.close();\n    }\n  }\n\n  // forward stream\n  const forwardStream = new TransformStream<\n    LanguageModelV2StreamPart,\n    SingleRequestTextStreamPart<TOOLS>\n  >({\n    async transform(\n      chunk: LanguageModelV2StreamPart,\n      controller: TransformStreamDefaultController<\n        SingleRequestTextStreamPart<TOOLS>\n      >,\n    ) {\n      const chunkType = chunk.type;\n\n      switch (chunkType) {\n        // forward:\n        case 'stream-start':\n        case 'text-start':\n        case 'text-delta':\n        case 'text-end':\n        case 'reasoning-start':\n        case 'reasoning-delta':\n        case 'reasoning-end':\n        case 'tool-input-start':\n        case 'tool-input-delta':\n        case 'tool-input-end':\n        case 'source':\n        case 'response-metadata':\n        case 'error':\n        case 'raw': {\n          controller.enqueue(chunk);\n          break;\n        }\n\n        case 'file': {\n          controller.enqueue({\n            type: 'file',\n            file: new DefaultGeneratedFileWithType({\n              data: chunk.data,\n              mediaType: chunk.mediaType,\n            }),\n          });\n          break;\n        }\n\n        case 'finish': {\n          finishChunk = {\n            type: 'finish',\n            finishReason: chunk.finishReason,\n            usage: chunk.usage,\n            providerMetadata: chunk.providerMetadata,\n          };\n          break;\n        }\n\n        // process tool call:\n        case 'tool-call': {\n          try {\n            const toolCall = await parseToolCall({\n              toolCall: chunk,\n              tools,\n              repairToolCall,\n              system,\n              messages,\n            });\n\n            controller.enqueue(toolCall);\n\n            // handle invalid tool calls:\n            if (toolCall.invalid) {\n              toolResultsStreamController!.enqueue({\n                type: 'tool-error',\n                toolCallId: toolCall.toolCallId,\n                toolName: toolCall.toolName,\n                input: toolCall.input,\n                error: getErrorMessage(toolCall.error!),\n                dynamic: true,\n              });\n\n              break;\n            }\n\n            const tool = tools![toolCall.toolName];\n\n            toolInputs.set(toolCall.toolCallId, toolCall.input);\n\n            if (tool.onInputAvailable != null) {\n              await tool.onInputAvailable({\n                input: toolCall.input,\n                toolCallId: toolCall.toolCallId,\n                messages,\n                abortSignal,\n                experimental_context,\n              });\n            }\n\n            // Only execute tools that are not provider-executed:\n            if (tool.execute != null && toolCall.providerExecuted !== true) {\n              const toolExecutionId = generateId(); // use our own id to guarantee uniqueness\n              outstandingToolResults.add(toolExecutionId);\n\n              // Note: we don't await the tool execution here (by leaving out 'await' on recordSpan),\n              // because we want to process the next chunk as soon as possible.\n              // This is important for the case where the tool execution takes a long time.\n              recordSpan({\n                name: 'ai.toolCall',\n                attributes: selectTelemetryAttributes({\n                  telemetry,\n                  attributes: {\n                    ...assembleOperationName({\n                      operationId: 'ai.toolCall',\n                      telemetry,\n                    }),\n                    'ai.toolCall.name': toolCall.toolName,\n                    'ai.toolCall.id': toolCall.toolCallId,\n                    'ai.toolCall.args': {\n                      output: () => JSON.stringify(toolCall.input),\n                    },\n                  },\n                }),\n                tracer,\n                fn: async span => {\n                  let output: unknown;\n\n                  try {\n                    const stream = executeTool({\n                      execute: tool.execute!.bind(tool),\n                      input: toolCall.input,\n                      options: {\n                        toolCallId: toolCall.toolCallId,\n                        messages,\n                        abortSignal,\n                        experimental_context,\n                      },\n                    });\n\n                    for await (const part of stream) {\n                      toolResultsStreamController!.enqueue({\n                        ...toolCall,\n                        type: 'tool-result',\n                        output: part.output,\n                        ...(part.type === 'preliminary' && {\n                          preliminary: true,\n                        }),\n                      });\n\n                      if (part.type === 'final') {\n                        output = part.output;\n                      }\n                    }\n                  } catch (error) {\n                    recordErrorOnSpan(span, error);\n                    toolResultsStreamController!.enqueue({\n                      ...toolCall,\n                      type: 'tool-error',\n                      error,\n                    } satisfies TypedToolError<TOOLS>);\n\n                    outstandingToolResults.delete(toolExecutionId);\n                    attemptClose();\n                    return;\n                  }\n\n                  outstandingToolResults.delete(toolExecutionId);\n                  attemptClose();\n\n                  // record telemetry\n                  try {\n                    span.setAttributes(\n                      selectTelemetryAttributes({\n                        telemetry,\n                        attributes: {\n                          'ai.toolCall.result': {\n                            output: () => JSON.stringify(output),\n                          },\n                        },\n                      }),\n                    );\n                  } catch (ignored) {\n                    // JSON stringify might fail if the result is not serializable,\n                    // in which case we just ignore it. In the future we might want to\n                    // add an optional serialize method to the tool interface and warn\n                    // if the result is not serializable.\n                  }\n                },\n              });\n            }\n          } catch (error) {\n            toolResultsStreamController!.enqueue({ type: 'error', error });\n          }\n\n          break;\n        }\n\n        case 'tool-result': {\n          const toolName = chunk.toolName as keyof TOOLS & string;\n\n          if (chunk.isError) {\n            toolResultsStreamController!.enqueue({\n              type: 'tool-error',\n              toolCallId: chunk.toolCallId,\n              toolName,\n              input: toolInputs.get(chunk.toolCallId),\n              providerExecuted: chunk.providerExecuted,\n              error: chunk.result,\n            } as TypedToolError<TOOLS>);\n          } else {\n            controller.enqueue({\n              type: 'tool-result',\n              toolCallId: chunk.toolCallId,\n              toolName,\n              input: toolInputs.get(chunk.toolCallId),\n              output: chunk.result,\n              providerExecuted: chunk.providerExecuted,\n            } as TypedToolResult<TOOLS>);\n          }\n          break;\n        }\n\n        default: {\n          const _exhaustiveCheck: never = chunkType;\n          throw new Error(`Unhandled chunk type: ${_exhaustiveCheck}`);\n        }\n      }\n    },\n\n    flush() {\n      canClose = true;\n      attemptClose();\n    },\n  });\n\n  // combine the generator stream and the tool results stream\n  return new ReadableStream<SingleRequestTextStreamPart<TOOLS>>({\n    async start(controller) {\n      // need to wait for both pipes so there are no dangling promises that\n      // can cause uncaught promise rejections when the stream is aborted\n      return Promise.all([\n        generatorStream.pipeThrough(forwardStream).pipeTo(\n          new WritableStream({\n            write(chunk) {\n              controller.enqueue(chunk);\n            },\n            close() {\n              // the generator stream controller is automatically closed when it's consumed\n            },\n          }),\n        ),\n        toolResultsStream.pipeTo(\n          new WritableStream({\n            write(chunk) {\n              controller.enqueue(chunk);\n            },\n            close() {\n              controller.close();\n            },\n          }),\n        ),\n      ]);\n    },\n  });\n}\n","import { IdGenerator, ProviderOptions } from '@ai-sdk/provider-utils';\nimport {\n  generateText,\n  GenerateTextOnStepFinishCallback,\n} from '../generate-text/generate-text';\nimport { GenerateTextResult } from '../generate-text/generate-text-result';\nimport { Output } from '../generate-text/output';\nimport { PrepareStepFunction } from '../generate-text/prepare-step';\nimport { StopCondition } from '../generate-text/stop-condition';\nimport { streamText } from '../generate-text/stream-text';\nimport { StreamTextResult } from '../generate-text/stream-text-result';\nimport { ToolCallRepairFunction } from '../generate-text/tool-call-repair-function';\nimport { ToolSet } from '../generate-text/tool-set';\nimport { CallSettings } from '../prompt/call-settings';\nimport { Prompt } from '../prompt/prompt';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport { LanguageModel, ToolChoice } from '../types/language-model';\nimport { ProviderMetadata } from '../types/provider-metadata';\n\nexport type AgentSettings<\n  TOOLS extends ToolSet,\n  OUTPUT = never,\n  OUTPUT_PARTIAL = never,\n> = CallSettings & {\n  /**\n   * The system prompt to use.\n   */\n  system?: string;\n\n  /**\nThe language model to use.\n   */\n  model: LanguageModel;\n\n  /**\nThe tools that the model can call. The model needs to support calling tools.\n*/\n  tools?: TOOLS;\n\n  /**\nThe tool choice strategy. Default: 'auto'.\n   */\n  toolChoice?: ToolChoice<NoInfer<TOOLS>>;\n\n  /**\nCondition for stopping the generation when there are tool results in the last step.\nWhen the condition is an array, any of the conditions can be met to stop the generation.\n\n@default stepCountIs(1)\n   */\n  stopWhen?:\n    | StopCondition<NoInfer<TOOLS>>\n    | Array<StopCondition<NoInfer<TOOLS>>>;\n\n  /**\nOptional telemetry configuration (experimental).\n   */\n  experimental_telemetry?: TelemetrySettings;\n\n  /**\nLimits the tools that are available for the model to call without\nchanging the tool call and result types in the result.\n   */\n  activeTools?: Array<keyof NoInfer<TOOLS>>;\n\n  /**\nOptional specification for parsing structured outputs from the LLM response.\n   */\n  experimental_output?: Output<OUTPUT, OUTPUT_PARTIAL>;\n\n  /**\n   * @deprecated Use `prepareStep` instead.\n   */\n  experimental_prepareStep?: PrepareStepFunction<NoInfer<TOOLS>>;\n\n  /**\nOptional function that you can use to provide different settings for a step.\n  */\n  prepareStep?: PrepareStepFunction<NoInfer<TOOLS>>;\n\n  /**\nA function that attempts to repair a tool call that failed to parse.\n   */\n  experimental_repairToolCall?: ToolCallRepairFunction<NoInfer<TOOLS>>;\n\n  /**\n  Callback that is called when each step (LLM call) is finished, including intermediate steps.\n  */\n  onStepFinish?: GenerateTextOnStepFinishCallback<NoInfer<TOOLS>>;\n\n  /**\n   * Context that is passed into tool calls.\n   *\n   * Experimental (can break in patch releases).\n   *\n   * @default undefined\n   */\n  experimental_context?: unknown;\n\n  /**\n   * Internal. For test use only. May change without notice.\n   */\n  _internal?: {\n    generateId?: IdGenerator;\n    currentDate?: () => Date;\n  };\n};\n\nexport class Agent<\n  TOOLS extends ToolSet,\n  OUTPUT = never,\n  OUTPUT_PARTIAL = never,\n> {\n  private readonly settings: AgentSettings<TOOLS, OUTPUT, OUTPUT_PARTIAL>;\n\n  constructor(settings: AgentSettings<TOOLS, OUTPUT, OUTPUT_PARTIAL>) {\n    this.settings = settings;\n  }\n\n  async generate(\n    options: Prompt & {\n      /**\nAdditional provider-specific metadata. They are passed through\nfrom the provider to the AI SDK and enable provider-specific\nresults that can be fully encapsulated in the provider.\n   */\n      providerMetadata?: ProviderMetadata;\n      /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n         */\n      providerOptions?: ProviderOptions;\n    },\n  ): Promise<GenerateTextResult<TOOLS, OUTPUT>> {\n    return generateText({ ...this.settings, ...options });\n  }\n\n  stream(\n    options: Prompt & {\n      /**\nAdditional provider-specific metadata. They are passed through\nfrom the provider to the AI SDK and enable provider-specific\nresults that can be fully encapsulated in the provider.\n   */\n      providerMetadata?: ProviderMetadata;\n      /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n         */\n      providerOptions?: ProviderOptions;\n    },\n  ): StreamTextResult<TOOLS, OUTPUT_PARTIAL> {\n    return streamText({ ...this.settings, ...options });\n  }\n}\n","import { ProviderOptions } from '@ai-sdk/provider-utils';\nimport { resolveEmbeddingModel } from '../model/resolve-model';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport { EmbeddingModel } from '../types';\nimport { prepareRetries } from '../util/prepare-retries';\nimport { EmbedResult } from './embed-result';\n\n/**\nEmbed a value using an embedding model. The type of the value is defined by the embedding model.\n\n@param model - The embedding model to use.\n@param value - The value that should be embedded.\n\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@returns A result object that contains the embedding, the value, and additional information.\n */\nexport async function embed<VALUE = string>({\n  model: modelArg,\n  value,\n  providerOptions,\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n  experimental_telemetry: telemetry,\n}: {\n  /**\nThe embedding model to use.\n     */\n  model: EmbeddingModel<VALUE>;\n\n  /**\nThe value that should be embedded.\n   */\n  value: VALUE;\n\n  /**\nMaximum number of retries per embedding model call. Set to 0 to disable retries.\n\n@default 2\n   */\n  maxRetries?: number;\n\n  /**\nAbort signal.\n */\n  abortSignal?: AbortSignal;\n\n  /**\nAdditional headers to include in the request.\nOnly applicable for HTTP-based providers.\n */\n  headers?: Record<string, string>;\n\n  /**\n  Additional provider-specific options. They are passed through\n  to the provider from the AI SDK and enable provider-specific\n  functionality that can be fully encapsulated in the provider.\n  */\n  providerOptions?: ProviderOptions;\n\n  /**\n   * Optional telemetry configuration (experimental).\n   */\n  experimental_telemetry?: TelemetrySettings;\n}): Promise<EmbedResult<VALUE>> {\n  const model = resolveEmbeddingModel<VALUE>(modelArg);\n\n  const { maxRetries, retry } = prepareRetries({\n    maxRetries: maxRetriesArg,\n    abortSignal,\n  });\n\n  const baseTelemetryAttributes = getBaseTelemetryAttributes({\n    model: model,\n    telemetry,\n    headers,\n    settings: { maxRetries },\n  });\n\n  const tracer = getTracer(telemetry);\n\n  return recordSpan({\n    name: 'ai.embed',\n    attributes: selectTelemetryAttributes({\n      telemetry,\n      attributes: {\n        ...assembleOperationName({ operationId: 'ai.embed', telemetry }),\n        ...baseTelemetryAttributes,\n        'ai.value': { input: () => JSON.stringify(value) },\n      },\n    }),\n    tracer,\n    fn: async span => {\n      const { embedding, usage, response, providerMetadata } = await retry(() =>\n        // nested spans to align with the embedMany telemetry data:\n        recordSpan({\n          name: 'ai.embed.doEmbed',\n          attributes: selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n              ...assembleOperationName({\n                operationId: 'ai.embed.doEmbed',\n                telemetry,\n              }),\n              ...baseTelemetryAttributes,\n              // specific settings that only make sense on the outer level:\n              'ai.values': { input: () => [JSON.stringify(value)] },\n            },\n          }),\n          tracer,\n          fn: async doEmbedSpan => {\n            const modelResponse = await model.doEmbed({\n              values: [value],\n              abortSignal,\n              headers,\n              providerOptions,\n            });\n\n            const embedding = modelResponse.embeddings[0];\n            const usage = modelResponse.usage ?? { tokens: NaN };\n\n            doEmbedSpan.setAttributes(\n              selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                  'ai.embeddings': {\n                    output: () =>\n                      modelResponse.embeddings.map(embedding =>\n                        JSON.stringify(embedding),\n                      ),\n                  },\n                  'ai.usage.tokens': usage.tokens,\n                },\n              }),\n            );\n\n            return {\n              embedding,\n              usage,\n              providerMetadata: modelResponse.providerMetadata,\n              response: modelResponse.response,\n            };\n          },\n        }),\n      );\n\n      span.setAttributes(\n        selectTelemetryAttributes({\n          telemetry,\n          attributes: {\n            'ai.embedding': { output: () => JSON.stringify(embedding) },\n            'ai.usage.tokens': usage.tokens,\n          },\n        }),\n      );\n\n      return new DefaultEmbedResult({\n        value,\n        embedding,\n        usage,\n        providerMetadata,\n        response,\n      });\n    },\n  });\n}\n\nclass DefaultEmbedResult<VALUE> implements EmbedResult<VALUE> {\n  readonly value: EmbedResult<VALUE>['value'];\n  readonly embedding: EmbedResult<VALUE>['embedding'];\n  readonly usage: EmbedResult<VALUE>['usage'];\n  readonly providerMetadata: EmbedResult<VALUE>['providerMetadata'];\n  readonly response: EmbedResult<VALUE>['response'];\n\n  constructor(options: {\n    value: EmbedResult<VALUE>['value'];\n    embedding: EmbedResult<VALUE>['embedding'];\n    usage: EmbedResult<VALUE>['usage'];\n    providerMetadata?: EmbedResult<VALUE>['providerMetadata'];\n    response?: EmbedResult<VALUE>['response'];\n  }) {\n    this.value = options.value;\n    this.embedding = options.embedding;\n    this.usage = options.usage;\n    this.providerMetadata = options.providerMetadata;\n    this.response = options.response;\n  }\n}\n","/**\n * Splits an array into chunks of a specified size.\n *\n * @template T - The type of elements in the array.\n * @param {T[]} array - The array to split.\n * @param {number} chunkSize - The size of each chunk.\n * @returns {T[][]} - A new array containing the chunks.\n */\nexport function splitArray<T>(array: T[], chunkSize: number): T[][] {\n  if (chunkSize <= 0) {\n    throw new Error('chunkSize must be greater than 0');\n  }\n\n  const result = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    result.push(array.slice(i, i + chunkSize));\n  }\n\n  return result;\n}\n","import { ProviderOptions } from '@ai-sdk/provider-utils';\nimport { prepareRetries } from '../util/prepare-retries';\nimport { splitArray } from '../util/split-array';\nimport { UnsupportedModelVersionError } from '../error/unsupported-model-version-error';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport { Embedding, EmbeddingModel, ProviderMetadata } from '../types';\nimport { resolveEmbeddingModel } from '../model/resolve-model';\nimport { EmbedManyResult } from './embed-many-result';\n\n/**\nEmbed several values using an embedding model. The type of the value is defined\nby the embedding model.\n\n`embedMany` automatically splits large requests into smaller chunks if the model\nhas a limit on how many embeddings can be generated in a single call.\n\n@param model - The embedding model to use.\n@param values - The values that should be embedded.\n\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@returns A result object that contains the embeddings, the value, and additional information.\n */\nexport async function embedMany<VALUE = string>({\n  model: modelArg,\n  values,\n  maxParallelCalls = Infinity,\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n  providerOptions,\n  experimental_telemetry: telemetry,\n}: {\n  /**\nThe embedding model to use.\n     */\n  model: EmbeddingModel<VALUE>;\n\n  /**\nThe values that should be embedded.\n   */\n  values: Array<VALUE>;\n\n  /**\nMaximum number of retries per embedding model call. Set to 0 to disable retries.\n\n@default 2\n   */\n  maxRetries?: number;\n\n  /**\nAbort signal.\n */\n  abortSignal?: AbortSignal;\n\n  /**\nAdditional headers to include in the request.\nOnly applicable for HTTP-based providers.\n */\n  headers?: Record<string, string>;\n\n  /**\n   * Optional telemetry configuration (experimental).\n   */\n  experimental_telemetry?: TelemetrySettings;\n\n  /**\n  Additional provider-specific options. They are passed through\n  to the provider from the AI SDK and enable provider-specific\n  functionality that can be fully encapsulated in the provider.\n  */\n  providerOptions?: ProviderOptions;\n\n  /**\n   * Maximum number of concurrent requests.\n   *\n   * @default Infinity\n   */\n  maxParallelCalls?: number;\n}): Promise<EmbedManyResult<VALUE>> {\n  const model = resolveEmbeddingModel<VALUE>(modelArg);\n\n  const { maxRetries, retry } = prepareRetries({\n    maxRetries: maxRetriesArg,\n    abortSignal,\n  });\n\n  const baseTelemetryAttributes = getBaseTelemetryAttributes({\n    model,\n    telemetry,\n    headers,\n    settings: { maxRetries },\n  });\n\n  const tracer = getTracer(telemetry);\n\n  return recordSpan({\n    name: 'ai.embedMany',\n    attributes: selectTelemetryAttributes({\n      telemetry,\n      attributes: {\n        ...assembleOperationName({ operationId: 'ai.embedMany', telemetry }),\n        ...baseTelemetryAttributes,\n        // specific settings that only make sense on the outer level:\n        'ai.values': {\n          input: () => values.map(value => JSON.stringify(value)),\n        },\n      },\n    }),\n    tracer,\n    fn: async span => {\n      const [maxEmbeddingsPerCall, supportsParallelCalls] = await Promise.all([\n        model.maxEmbeddingsPerCall,\n        model.supportsParallelCalls,\n      ]);\n\n      // the model has not specified limits on\n      // how many embeddings can be generated in a single call\n      if (maxEmbeddingsPerCall == null || maxEmbeddingsPerCall === Infinity) {\n        const { embeddings, usage, response, providerMetadata } = await retry(\n          () => {\n            // nested spans to align with the embedMany telemetry data:\n            return recordSpan({\n              name: 'ai.embedMany.doEmbed',\n              attributes: selectTelemetryAttributes({\n                telemetry,\n                attributes: {\n                  ...assembleOperationName({\n                    operationId: 'ai.embedMany.doEmbed',\n                    telemetry,\n                  }),\n                  ...baseTelemetryAttributes,\n                  // specific settings that only make sense on the outer level:\n                  'ai.values': {\n                    input: () => values.map(value => JSON.stringify(value)),\n                  },\n                },\n              }),\n              tracer,\n              fn: async doEmbedSpan => {\n                const modelResponse = await model.doEmbed({\n                  values,\n                  abortSignal,\n                  headers,\n                  providerOptions,\n                });\n\n                const embeddings = modelResponse.embeddings;\n                const usage = modelResponse.usage ?? { tokens: NaN };\n\n                doEmbedSpan.setAttributes(\n                  selectTelemetryAttributes({\n                    telemetry,\n                    attributes: {\n                      'ai.embeddings': {\n                        output: () =>\n                          embeddings.map(embedding =>\n                            JSON.stringify(embedding),\n                          ),\n                      },\n                      'ai.usage.tokens': usage.tokens,\n                    },\n                  }),\n                );\n\n                return {\n                  embeddings,\n                  usage,\n                  providerMetadata: modelResponse.providerMetadata,\n                  response: modelResponse.response,\n                };\n              },\n            });\n          },\n        );\n\n        span.setAttributes(\n          selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n              'ai.embeddings': {\n                output: () =>\n                  embeddings.map(embedding => JSON.stringify(embedding)),\n              },\n              'ai.usage.tokens': usage.tokens,\n            },\n          }),\n        );\n\n        return new DefaultEmbedManyResult({\n          values,\n          embeddings,\n          usage,\n          providerMetadata,\n          responses: [response],\n        });\n      }\n\n      // split the values into chunks that are small enough for the model:\n      const valueChunks = splitArray(values, maxEmbeddingsPerCall);\n\n      // serially embed the chunks:\n      const embeddings: Array<Embedding> = [];\n      const responses: Array<\n        | {\n            headers?: Record<string, string>;\n            body?: unknown;\n          }\n        | undefined\n      > = [];\n      let tokens = 0;\n      let providerMetadata: ProviderMetadata | undefined;\n\n      const parallelChunks = splitArray(\n        valueChunks,\n        supportsParallelCalls ? maxParallelCalls : 1,\n      );\n\n      for (const parallelChunk of parallelChunks) {\n        const results = await Promise.all(\n          parallelChunk.map(chunk => {\n            return retry(() => {\n              // nested spans to align with the embedMany telemetry data:\n              return recordSpan({\n                name: 'ai.embedMany.doEmbed',\n                attributes: selectTelemetryAttributes({\n                  telemetry,\n                  attributes: {\n                    ...assembleOperationName({\n                      operationId: 'ai.embedMany.doEmbed',\n                      telemetry,\n                    }),\n                    ...baseTelemetryAttributes,\n                    // specific settings that only make sense on the outer level:\n                    'ai.values': {\n                      input: () => chunk.map(value => JSON.stringify(value)),\n                    },\n                  },\n                }),\n                tracer,\n                fn: async doEmbedSpan => {\n                  const modelResponse = await model.doEmbed({\n                    values: chunk,\n                    abortSignal,\n                    headers,\n                    providerOptions,\n                  });\n\n                  const embeddings = modelResponse.embeddings;\n                  const usage = modelResponse.usage ?? { tokens: NaN };\n\n                  doEmbedSpan.setAttributes(\n                    selectTelemetryAttributes({\n                      telemetry,\n                      attributes: {\n                        'ai.embeddings': {\n                          output: () =>\n                            embeddings.map(embedding =>\n                              JSON.stringify(embedding),\n                            ),\n                        },\n                        'ai.usage.tokens': usage.tokens,\n                      },\n                    }),\n                  );\n\n                  return {\n                    embeddings,\n                    usage,\n                    providerMetadata: modelResponse.providerMetadata,\n                    response: modelResponse.response,\n                  };\n                },\n              });\n            });\n          }),\n        );\n\n        for (const result of results) {\n          embeddings.push(...result.embeddings);\n          responses.push(result.response);\n          tokens += result.usage.tokens;\n          if (result.providerMetadata) {\n            if (!providerMetadata) {\n              providerMetadata = { ...result.providerMetadata };\n            } else {\n              for (const [providerName, metadata] of Object.entries(\n                result.providerMetadata,\n              )) {\n                providerMetadata[providerName] = {\n                  ...(providerMetadata[providerName] ?? {}),\n                  ...metadata,\n                };\n              }\n            }\n          }\n        }\n      }\n\n      span.setAttributes(\n        selectTelemetryAttributes({\n          telemetry,\n          attributes: {\n            'ai.embeddings': {\n              output: () =>\n                embeddings.map(embedding => JSON.stringify(embedding)),\n            },\n            'ai.usage.tokens': tokens,\n          },\n        }),\n      );\n\n      return new DefaultEmbedManyResult({\n        values,\n        embeddings,\n        usage: { tokens },\n        providerMetadata: providerMetadata,\n        responses,\n      });\n    },\n  });\n}\n\nclass DefaultEmbedManyResult<VALUE> implements EmbedManyResult<VALUE> {\n  readonly values: EmbedManyResult<VALUE>['values'];\n  readonly embeddings: EmbedManyResult<VALUE>['embeddings'];\n  readonly usage: EmbedManyResult<VALUE>['usage'];\n  readonly providerMetadata: EmbedManyResult<VALUE>['providerMetadata'];\n  readonly responses: EmbedManyResult<VALUE>['responses'];\n\n  constructor(options: {\n    values: EmbedManyResult<VALUE>['values'];\n    embeddings: EmbedManyResult<VALUE>['embeddings'];\n    usage: EmbedManyResult<VALUE>['usage'];\n    providerMetadata?: EmbedManyResult<VALUE>['providerMetadata'];\n    responses?: EmbedManyResult<VALUE>['responses'];\n  }) {\n    this.values = options.values;\n    this.embeddings = options.embeddings;\n    this.usage = options.usage;\n    this.providerMetadata = options.providerMetadata;\n    this.responses = options.responses;\n  }\n}\n","import { ImageModelV2, ImageModelV2ProviderMetadata } from '@ai-sdk/provider';\nimport { ProviderOptions } from '@ai-sdk/provider-utils';\nimport { NoImageGeneratedError } from '../error/no-image-generated-error';\nimport {\n  detectMediaType,\n  imageMediaTypeSignatures,\n} from '../util/detect-media-type';\nimport { prepareRetries } from '../util/prepare-retries';\nimport { UnsupportedModelVersionError } from '../error/unsupported-model-version-error';\nimport {\n  DefaultGeneratedFile,\n  GeneratedFile,\n} from '../generate-text/generated-file';\nimport { ImageGenerationWarning } from '../types/image-model';\nimport { ImageModelResponseMetadata } from '../types/image-model-response-metadata';\nimport { GenerateImageResult } from './generate-image-result';\n\n/**\nGenerates images using an image model.\n\n@param model - The image model to use.\n@param prompt - The prompt that should be used to generate the image.\n@param n - Number of images to generate. Default: 1.\n@param size - Size of the images to generate. Must have the format `{width}x{height}`.\n@param aspectRatio - Aspect ratio of the images to generate. Must have the format `{width}:{height}`.\n@param seed - Seed for the image generation.\n@param providerOptions - Additional provider-specific options that are passed through to the provider\nas body parameters.\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@returns A result object that contains the generated images.\n */\nexport async function generateImage({\n  model,\n  prompt,\n  n = 1,\n  maxImagesPerCall,\n  size,\n  aspectRatio,\n  seed,\n  providerOptions,\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n}: {\n  /**\nThe image model to use.\n     */\n  model: ImageModelV2;\n\n  /**\nThe prompt that should be used to generate the image.\n   */\n  prompt: string;\n\n  /**\nNumber of images to generate.\n   */\n  n?: number;\n\n  /**\nNumber of images to generate.\n   */\n  maxImagesPerCall?: number;\n\n  /**\nSize of the images to generate. Must have the format `{width}x{height}`. If not provided, the default size will be used.\n   */\n  size?: `${number}x${number}`;\n\n  /**\nAspect ratio of the images to generate. Must have the format `{width}:{height}`. If not provided, the default aspect ratio will be used.\n   */\n  aspectRatio?: `${number}:${number}`;\n\n  /**\nSeed for the image generation. If not provided, the default seed will be used.\n   */\n  seed?: number;\n\n  /**\nAdditional provider-specific options that are passed through to the provider\nas body parameters.\n\nThe outer record is keyed by the provider name, and the inner\nrecord is keyed by the provider-specific metadata key.\n```ts\n{\n  \"openai\": {\n    \"style\": \"vivid\"\n  }\n}\n```\n     */\n  providerOptions?: ProviderOptions;\n\n  /**\nMaximum number of retries per embedding model call. Set to 0 to disable retries.\n\n@default 2\n   */\n  maxRetries?: number;\n\n  /**\nAbort signal.\n */\n  abortSignal?: AbortSignal;\n\n  /**\nAdditional headers to include in the request.\nOnly applicable for HTTP-based providers.\n */\n  headers?: Record<string, string>;\n}): Promise<GenerateImageResult> {\n  if (model.specificationVersion !== 'v2') {\n    throw new UnsupportedModelVersionError({\n      version: model.specificationVersion,\n      provider: model.provider,\n      modelId: model.modelId,\n    });\n  }\n\n  const { retry } = prepareRetries({\n    maxRetries: maxRetriesArg,\n    abortSignal,\n  });\n\n  // default to 1 if the model has not specified limits on\n  // how many images can be generated in a single call\n  const maxImagesPerCallWithDefault =\n    maxImagesPerCall ?? (await invokeModelMaxImagesPerCall(model)) ?? 1;\n\n  // parallelize calls to the model:\n  const callCount = Math.ceil(n / maxImagesPerCallWithDefault);\n  const callImageCounts = Array.from({ length: callCount }, (_, i) => {\n    if (i < callCount - 1) {\n      return maxImagesPerCallWithDefault;\n    }\n\n    const remainder = n % maxImagesPerCallWithDefault;\n    return remainder === 0 ? maxImagesPerCallWithDefault : remainder;\n  });\n\n  const results = await Promise.all(\n    callImageCounts.map(async callImageCount =>\n      retry(() =>\n        model.doGenerate({\n          prompt,\n          n: callImageCount,\n          abortSignal,\n          headers,\n          size,\n          aspectRatio,\n          seed,\n          providerOptions: providerOptions ?? {},\n        }),\n      ),\n    ),\n  );\n\n  // collect result images, warnings, and response metadata\n  const images: Array<DefaultGeneratedFile> = [];\n  const warnings: Array<ImageGenerationWarning> = [];\n  const responses: Array<ImageModelResponseMetadata> = [];\n  const providerMetadata: ImageModelV2ProviderMetadata = {};\n  for (const result of results) {\n    images.push(\n      ...result.images.map(\n        image =>\n          new DefaultGeneratedFile({\n            data: image,\n            mediaType:\n              detectMediaType({\n                data: image,\n                signatures: imageMediaTypeSignatures,\n              }) ?? 'image/png',\n          }),\n      ),\n    );\n    warnings.push(...result.warnings);\n\n    if (result.providerMetadata) {\n      for (const [providerName, metadata] of Object.entries<{\n        images: unknown;\n      }>(result.providerMetadata)) {\n        providerMetadata[providerName] ??= { images: [] };\n        providerMetadata[providerName].images.push(\n          ...result.providerMetadata[providerName].images,\n        );\n      }\n    }\n\n    responses.push(result.response);\n  }\n\n  if (!images.length) {\n    throw new NoImageGeneratedError({ responses });\n  }\n\n  return new DefaultGenerateImageResult({\n    images,\n    warnings,\n    responses,\n    providerMetadata,\n  });\n}\n\nclass DefaultGenerateImageResult implements GenerateImageResult {\n  readonly images: Array<GeneratedFile>;\n  readonly warnings: Array<ImageGenerationWarning>;\n  readonly responses: Array<ImageModelResponseMetadata>;\n  readonly providerMetadata: ImageModelV2ProviderMetadata;\n\n  constructor(options: {\n    images: Array<GeneratedFile>;\n    warnings: Array<ImageGenerationWarning>;\n    responses: Array<ImageModelResponseMetadata>;\n    providerMetadata: ImageModelV2ProviderMetadata;\n  }) {\n    this.images = options.images;\n    this.warnings = options.warnings;\n    this.responses = options.responses;\n    this.providerMetadata = options.providerMetadata;\n  }\n\n  get image() {\n    return this.images[0];\n  }\n}\n\nasync function invokeModelMaxImagesPerCall(model: ImageModelV2) {\n  const isFunction = model.maxImagesPerCall instanceof Function;\n\n  if (!isFunction) {\n    return model.maxImagesPerCall;\n  }\n\n  return model.maxImagesPerCall({\n    modelId: model.modelId,\n  });\n}\n","import { JSONValue } from '@ai-sdk/provider';\nimport {\n  createIdGenerator,\n  InferSchema,\n  ProviderOptions,\n  Schema,\n} from '@ai-sdk/provider-utils';\nimport * as z3 from 'zod/v3';\nimport * as z4 from 'zod/v4';\nimport { NoObjectGeneratedError } from '../error/no-object-generated-error';\nimport { extractReasoningContent } from '../generate-text/extract-reasoning-content';\nimport { extractTextContent } from '../generate-text/extract-text-content';\nimport { resolveLanguageModel } from '../model/resolve-model';\nimport { CallSettings } from '../prompt/call-settings';\nimport { convertToLanguageModelPrompt } from '../prompt/convert-to-language-model-prompt';\nimport { prepareCallSettings } from '../prompt/prepare-call-settings';\nimport { Prompt } from '../prompt/prompt';\nimport { standardizePrompt } from '../prompt/standardize-prompt';\nimport { wrapGatewayError } from '../prompt/wrap-gateway-error';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { stringifyForTelemetry } from '../telemetry/stringify-for-telemetry';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport {\n  CallWarning,\n  FinishReason,\n  LanguageModel,\n} from '../types/language-model';\nimport { LanguageModelRequestMetadata } from '../types/language-model-request-metadata';\nimport { LanguageModelResponseMetadata } from '../types/language-model-response-metadata';\nimport { ProviderMetadata } from '../types/provider-metadata';\nimport { LanguageModelUsage } from '../types/usage';\nimport { prepareHeaders } from '../util/prepare-headers';\nimport { prepareRetries } from '../util/prepare-retries';\nimport { GenerateObjectResult } from './generate-object-result';\nimport { getOutputStrategy } from './output-strategy';\nimport { parseAndValidateObjectResultWithRepair } from './parse-and-validate-object-result';\nimport { RepairTextFunction } from './repair-text';\nimport { validateObjectGenerationInput } from './validate-object-generation-input';\n\nconst originalGenerateId = createIdGenerator({ prefix: 'aiobj', size: 24 });\n\n/**\nGenerate a structured, typed object for a given prompt and schema using a language model.\n\nThis function does not stream the output. If you want to stream the output, use `streamObject` instead.\n\n@param model - The language model to use.\n@param tools - Tools that are accessible to and can be called by the model. The model needs to support calling tools.\n\n@param system - A system message that will be part of the prompt.\n@param prompt - A simple text prompt. You can either use `prompt` or `messages` but not both.\n@param messages - A list of messages. You can either use `prompt` or `messages` but not both.\n\n@param maxOutputTokens - Maximum number of tokens to generate.\n@param temperature - Temperature setting.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topP - Nucleus sampling.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topK - Only sample from the top K options for each subsequent token.\nUsed to remove \"long tail\" low probability responses.\nRecommended for advanced use cases only. You usually only need to use temperature.\n@param presencePenalty - Presence penalty setting.\nIt affects the likelihood of the model to repeat information that is already in the prompt.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param frequencyPenalty - Frequency penalty setting.\nIt affects the likelihood of the model to repeatedly use the same words or phrases.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param stopSequences - Stop sequences.\nIf set, the model will stop generating text when one of the stop sequences is generated.\n@param seed - The seed (integer) to use for random sampling.\nIf set and supported by the model, calls will generate deterministic results.\n\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@param schema - The schema of the object that the model should generate.\n@param schemaName - Optional name of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema name.\n@param schemaDescription - Optional description of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema description.\n\n@param output - The type of the output.\n\n- 'object': The output is an object.\n- 'array': The output is an array.\n- 'enum': The output is an enum.\n- 'no-schema': The output is not a schema.\n\n@param experimental_repairText - A function that attempts to repair the raw output of the model\nto enable JSON parsing.\n\n@param experimental_telemetry - Optional telemetry configuration (experimental).\n\n@param providerOptions - Additional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n\n@returns\nA result object that contains the generated object, the finish reason, the token usage, and additional information.\n */\nexport async function generateObject<\n  SCHEMA extends\n    | z3.Schema\n    | z4.core.$ZodType\n    | Schema = z4.core.$ZodType<JSONValue>,\n  OUTPUT extends\n    | 'object'\n    | 'array'\n    | 'enum'\n    | 'no-schema' = InferSchema<SCHEMA> extends string ? 'enum' : 'object',\n  RESULT = OUTPUT extends 'array'\n    ? Array<InferSchema<SCHEMA>>\n    : InferSchema<SCHEMA>,\n>(\n  options: Omit<CallSettings, 'stopSequences'> &\n    Prompt &\n    (OUTPUT extends 'enum'\n      ? {\n          /**\nThe enum values that the model should use.\n        */\n          enum: Array<RESULT>;\n          mode?: 'json';\n          output: 'enum';\n        }\n      : OUTPUT extends 'no-schema'\n        ? {}\n        : {\n            /**\nThe schema of the object that the model should generate.\n        */\n            schema: SCHEMA;\n\n            /**\nOptional name of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema name.\n        */\n            schemaName?: string;\n\n            /**\nOptional description of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema description.\n        */\n            schemaDescription?: string;\n\n            /**\nThe mode to use for object generation.\n\nThe schema is converted into a JSON schema and used in one of the following ways\n\n- 'auto': The provider will choose the best mode for the model.\n- 'tool': A tool with the JSON schema as parameters is provided and the provider is instructed to use it.\n- 'json': The JSON schema and an instruction are injected into the prompt. If the provider supports JSON mode, it is enabled. If the provider supports JSON grammars, the grammar is used.\n\nPlease note that most providers do not support all modes.\n\nDefault and recommended: 'auto' (best mode for the model).\n        */\n            mode?: 'auto' | 'json' | 'tool';\n          }) & {\n      output?: OUTPUT;\n\n      /**\n  The language model to use.\n       */\n      model: LanguageModel;\n      /**\n  A function that attempts to repair the raw output of the model\n  to enable JSON parsing.\n       */\n      experimental_repairText?: RepairTextFunction;\n\n      /**\n  Optional telemetry configuration (experimental).\n         */\n\n      experimental_telemetry?: TelemetrySettings;\n\n      /**\n  Additional provider-specific options. They are passed through\n  to the provider from the AI SDK and enable provider-specific\n  functionality that can be fully encapsulated in the provider.\n   */\n      providerOptions?: ProviderOptions;\n\n      /**\n       * Internal. For test use only. May change without notice.\n       */\n      _internal?: {\n        generateId?: () => string;\n        currentDate?: () => Date;\n      };\n    },\n): Promise<GenerateObjectResult<RESULT>> {\n  const {\n    model: modelArg,\n    output = 'object',\n    system,\n    prompt,\n    messages,\n    maxRetries: maxRetriesArg,\n    abortSignal,\n    headers,\n    experimental_repairText: repairText,\n    experimental_telemetry: telemetry,\n    providerOptions,\n    _internal: {\n      generateId = originalGenerateId,\n      currentDate = () => new Date(),\n    } = {},\n    ...settings\n  } = options;\n\n  const model = resolveLanguageModel(modelArg);\n\n  const enumValues = 'enum' in options ? options.enum : undefined;\n  const {\n    schema: inputSchema,\n    schemaDescription,\n    schemaName,\n  } = 'schema' in options ? options : {};\n\n  validateObjectGenerationInput({\n    output,\n    schema: inputSchema,\n    schemaName,\n    schemaDescription,\n    enumValues,\n  });\n\n  const { maxRetries, retry } = prepareRetries({\n    maxRetries: maxRetriesArg,\n    abortSignal,\n  });\n\n  const outputStrategy = getOutputStrategy({\n    output,\n    schema: inputSchema,\n    enumValues,\n  });\n\n  const callSettings = prepareCallSettings(settings);\n\n  const baseTelemetryAttributes = getBaseTelemetryAttributes({\n    model,\n    telemetry,\n    headers,\n    settings: { ...callSettings, maxRetries },\n  });\n\n  const tracer = getTracer(telemetry);\n\n  try {\n    return await recordSpan({\n      name: 'ai.generateObject',\n      attributes: selectTelemetryAttributes({\n        telemetry,\n        attributes: {\n          ...assembleOperationName({\n            operationId: 'ai.generateObject',\n            telemetry,\n          }),\n          ...baseTelemetryAttributes,\n          // specific settings that only make sense on the outer level:\n          'ai.prompt': {\n            input: () => JSON.stringify({ system, prompt, messages }),\n          },\n          'ai.schema':\n            outputStrategy.jsonSchema != null\n              ? { input: () => JSON.stringify(outputStrategy.jsonSchema) }\n              : undefined,\n          'ai.schema.name': schemaName,\n          'ai.schema.description': schemaDescription,\n          'ai.settings.output': outputStrategy.type,\n        },\n      }),\n      tracer,\n      fn: async span => {\n        let result: string;\n        let finishReason: FinishReason;\n        let usage: LanguageModelUsage;\n        let warnings: CallWarning[] | undefined;\n        let response: LanguageModelResponseMetadata;\n        let request: LanguageModelRequestMetadata;\n        let resultProviderMetadata: ProviderMetadata | undefined;\n        let reasoning: string | undefined;\n\n        const standardizedPrompt = await standardizePrompt({\n          system,\n          prompt,\n          messages,\n        });\n\n        const promptMessages = await convertToLanguageModelPrompt({\n          prompt: standardizedPrompt,\n          supportedUrls: await model.supportedUrls,\n        });\n\n        const generateResult = await retry(() =>\n          recordSpan({\n            name: 'ai.generateObject.doGenerate',\n            attributes: selectTelemetryAttributes({\n              telemetry,\n              attributes: {\n                ...assembleOperationName({\n                  operationId: 'ai.generateObject.doGenerate',\n                  telemetry,\n                }),\n                ...baseTelemetryAttributes,\n                'ai.prompt.messages': {\n                  input: () => stringifyForTelemetry(promptMessages),\n                },\n\n                // standardized gen-ai llm span attributes:\n                'gen_ai.system': model.provider,\n                'gen_ai.request.model': model.modelId,\n                'gen_ai.request.frequency_penalty':\n                  callSettings.frequencyPenalty,\n                'gen_ai.request.max_tokens': callSettings.maxOutputTokens,\n                'gen_ai.request.presence_penalty': callSettings.presencePenalty,\n                'gen_ai.request.temperature': callSettings.temperature,\n                'gen_ai.request.top_k': callSettings.topK,\n                'gen_ai.request.top_p': callSettings.topP,\n              },\n            }),\n            tracer,\n            fn: async span => {\n              const result = await model.doGenerate({\n                responseFormat: {\n                  type: 'json',\n                  schema: outputStrategy.jsonSchema,\n                  name: schemaName,\n                  description: schemaDescription,\n                },\n                ...prepareCallSettings(settings),\n                prompt: promptMessages,\n                providerOptions,\n                abortSignal,\n                headers,\n              });\n\n              const responseData = {\n                id: result.response?.id ?? generateId(),\n                timestamp: result.response?.timestamp ?? currentDate(),\n                modelId: result.response?.modelId ?? model.modelId,\n                headers: result.response?.headers,\n                body: result.response?.body,\n              };\n\n              const text = extractTextContent(result.content);\n              const reasoning = extractReasoningContent(result.content);\n\n              if (text === undefined) {\n                throw new NoObjectGeneratedError({\n                  message:\n                    'No object generated: the model did not return a response.',\n                  response: responseData,\n                  usage: result.usage,\n                  finishReason: result.finishReason,\n                });\n              }\n\n              // Add response information to the span:\n              span.setAttributes(\n                selectTelemetryAttributes({\n                  telemetry,\n                  attributes: {\n                    'ai.response.finishReason': result.finishReason,\n                    'ai.response.object': { output: () => text },\n                    'ai.response.id': responseData.id,\n                    'ai.response.model': responseData.modelId,\n                    'ai.response.timestamp':\n                      responseData.timestamp.toISOString(),\n                    'ai.response.providerMetadata': JSON.stringify(\n                      result.providerMetadata,\n                    ),\n\n                    // TODO rename telemetry attributes to inputTokens and outputTokens\n                    'ai.usage.promptTokens': result.usage.inputTokens,\n                    'ai.usage.completionTokens': result.usage.outputTokens,\n\n                    // standardized gen-ai llm span attributes:\n                    'gen_ai.response.finish_reasons': [result.finishReason],\n                    'gen_ai.response.id': responseData.id,\n                    'gen_ai.response.model': responseData.modelId,\n                    'gen_ai.usage.input_tokens': result.usage.inputTokens,\n                    'gen_ai.usage.output_tokens': result.usage.outputTokens,\n                  },\n                }),\n              );\n\n              return {\n                ...result,\n                objectText: text,\n                reasoning,\n                responseData,\n              };\n            },\n          }),\n        );\n\n        result = generateResult.objectText;\n        finishReason = generateResult.finishReason;\n        usage = generateResult.usage;\n        warnings = generateResult.warnings;\n        resultProviderMetadata = generateResult.providerMetadata;\n        request = generateResult.request ?? {};\n        response = generateResult.responseData;\n        reasoning = generateResult.reasoning;\n\n        const object = await parseAndValidateObjectResultWithRepair(\n          result,\n          outputStrategy,\n          repairText,\n          {\n            response,\n            usage,\n            finishReason,\n          },\n        );\n\n        // Add response information to the span:\n        span.setAttributes(\n          selectTelemetryAttributes({\n            telemetry,\n            attributes: {\n              'ai.response.finishReason': finishReason,\n              'ai.response.object': {\n                output: () => JSON.stringify(object),\n              },\n              'ai.response.providerMetadata': JSON.stringify(\n                resultProviderMetadata,\n              ),\n\n              // TODO rename telemetry attributes to inputTokens and outputTokens\n              'ai.usage.promptTokens': usage.inputTokens,\n              'ai.usage.completionTokens': usage.outputTokens,\n            },\n          }),\n        );\n\n        return new DefaultGenerateObjectResult({\n          object,\n          reasoning,\n          finishReason,\n          usage,\n          warnings,\n          request,\n          response,\n          providerMetadata: resultProviderMetadata,\n        });\n      },\n    });\n  } catch (error) {\n    throw wrapGatewayError(error);\n  }\n}\n\nclass DefaultGenerateObjectResult<T> implements GenerateObjectResult<T> {\n  readonly object: GenerateObjectResult<T>['object'];\n  readonly finishReason: GenerateObjectResult<T>['finishReason'];\n  readonly usage: GenerateObjectResult<T>['usage'];\n  readonly warnings: GenerateObjectResult<T>['warnings'];\n  readonly providerMetadata: GenerateObjectResult<T>['providerMetadata'];\n  readonly response: GenerateObjectResult<T>['response'];\n  readonly request: GenerateObjectResult<T>['request'];\n  readonly reasoning: GenerateObjectResult<T>['reasoning'];\n\n  constructor(options: {\n    object: GenerateObjectResult<T>['object'];\n    finishReason: GenerateObjectResult<T>['finishReason'];\n    usage: GenerateObjectResult<T>['usage'];\n    warnings: GenerateObjectResult<T>['warnings'];\n    providerMetadata: GenerateObjectResult<T>['providerMetadata'];\n    response: GenerateObjectResult<T>['response'];\n    request: GenerateObjectResult<T>['request'];\n    reasoning: GenerateObjectResult<T>['reasoning'];\n  }) {\n    this.object = options.object;\n    this.finishReason = options.finishReason;\n    this.usage = options.usage;\n    this.warnings = options.warnings;\n    this.providerMetadata = options.providerMetadata;\n    this.response = options.response;\n    this.request = options.request;\n    this.reasoning = options.reasoning;\n  }\n\n  toJsonResponse(init?: ResponseInit): Response {\n    return new Response(JSON.stringify(this.object), {\n      status: init?.status ?? 200,\n      headers: prepareHeaders(init?.headers, {\n        'content-type': 'application/json; charset=utf-8',\n      }),\n    });\n  }\n}\n","import {\n  LanguageModelV2Content,\n  LanguageModelV2Reasoning,\n} from '@ai-sdk/provider';\n\nexport function extractReasoningContent(\n  content: LanguageModelV2Content[],\n): string | undefined {\n  const parts = content.filter(\n    (content): content is LanguageModelV2Reasoning =>\n      content.type === 'reasoning',\n  );\n\n  return parts.length === 0\n    ? undefined\n    : parts.map(content => content.text).join('\\n');\n}\n","import {\n  isJSONArray,\n  isJSONObject,\n  JSONObject,\n  JSONSchema7,\n  JSONValue,\n  TypeValidationError,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  asSchema,\n  safeValidateTypes,\n  Schema,\n  ValidationResult,\n} from '@ai-sdk/provider-utils';\nimport * as z3 from 'zod/v3';\nimport * as z4 from 'zod/v4';\nimport { NoObjectGeneratedError } from '../error/no-object-generated-error';\nimport {\n  AsyncIterableStream,\n  createAsyncIterableStream,\n} from '../util/async-iterable-stream';\nimport { DeepPartial } from '../util/deep-partial';\nimport {\n  FinishReason,\n  LanguageModelResponseMetadata,\n  LanguageModelUsage,\n} from '../types';\nimport { ObjectStreamPart } from './stream-object-result';\n\nexport interface OutputStrategy<PARTIAL, RESULT, ELEMENT_STREAM> {\n  readonly type: 'object' | 'array' | 'enum' | 'no-schema';\n  readonly jsonSchema: JSONSchema7 | undefined;\n\n  validatePartialResult({\n    value,\n    textDelta,\n    isFinalDelta,\n  }: {\n    value: JSONValue;\n    textDelta: string;\n    isFirstDelta: boolean;\n    isFinalDelta: boolean;\n    latestObject: PARTIAL | undefined;\n  }): Promise<\n    ValidationResult<{\n      partial: PARTIAL;\n      textDelta: string;\n    }>\n  >;\n  validateFinalResult(\n    value: JSONValue | undefined,\n    context: {\n      text: string;\n      response: LanguageModelResponseMetadata;\n      usage: LanguageModelUsage;\n    },\n  ): Promise<ValidationResult<RESULT>>;\n\n  createElementStream(\n    originalStream: ReadableStream<ObjectStreamPart<PARTIAL>>,\n  ): ELEMENT_STREAM;\n}\n\nconst noSchemaOutputStrategy: OutputStrategy<JSONValue, JSONValue, never> = {\n  type: 'no-schema',\n  jsonSchema: undefined,\n\n  async validatePartialResult({ value, textDelta }) {\n    return { success: true, value: { partial: value, textDelta } };\n  },\n\n  async validateFinalResult(\n    value: JSONValue | undefined,\n    context: {\n      text: string;\n      response: LanguageModelResponseMetadata;\n      usage: LanguageModelUsage;\n      finishReason: FinishReason;\n    },\n  ): Promise<ValidationResult<JSONValue>> {\n    return value === undefined\n      ? {\n          success: false,\n          error: new NoObjectGeneratedError({\n            message: 'No object generated: response did not match schema.',\n            text: context.text,\n            response: context.response,\n            usage: context.usage,\n            finishReason: context.finishReason,\n          }),\n        }\n      : { success: true, value };\n  },\n\n  createElementStream() {\n    throw new UnsupportedFunctionalityError({\n      functionality: 'element streams in no-schema mode',\n    });\n  },\n};\n\nconst objectOutputStrategy = <OBJECT>(\n  schema: Schema<OBJECT>,\n): OutputStrategy<DeepPartial<OBJECT>, OBJECT, never> => ({\n  type: 'object',\n  jsonSchema: schema.jsonSchema,\n\n  async validatePartialResult({ value, textDelta }) {\n    return {\n      success: true,\n      value: {\n        // Note: currently no validation of partial results:\n        partial: value as DeepPartial<OBJECT>,\n        textDelta,\n      },\n    };\n  },\n\n  async validateFinalResult(\n    value: JSONValue | undefined,\n  ): Promise<ValidationResult<OBJECT>> {\n    return safeValidateTypes({ value, schema });\n  },\n\n  createElementStream() {\n    throw new UnsupportedFunctionalityError({\n      functionality: 'element streams in object mode',\n    });\n  },\n});\n\nconst arrayOutputStrategy = <ELEMENT>(\n  schema: Schema<ELEMENT>,\n): OutputStrategy<ELEMENT[], ELEMENT[], AsyncIterableStream<ELEMENT>> => {\n  // remove $schema from schema.jsonSchema:\n  const { $schema, ...itemSchema } = schema.jsonSchema;\n\n  return {\n    type: 'enum',\n\n    // wrap in object that contains array of elements, since most LLMs will not\n    // be able to generate an array directly:\n    // possible future optimization: use arrays directly when model supports grammar-guided generation\n    jsonSchema: {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      type: 'object',\n      properties: {\n        elements: { type: 'array', items: itemSchema },\n      },\n      required: ['elements'],\n      additionalProperties: false,\n    },\n\n    async validatePartialResult({\n      value,\n      latestObject,\n      isFirstDelta,\n      isFinalDelta,\n    }) {\n      // check that the value is an object that contains an array of elements:\n      if (!isJSONObject(value) || !isJSONArray(value.elements)) {\n        return {\n          success: false,\n          error: new TypeValidationError({\n            value,\n            cause: 'value must be an object that contains an array of elements',\n          }),\n        };\n      }\n\n      const inputArray = value.elements as Array<JSONObject>;\n      const resultArray: Array<ELEMENT> = [];\n\n      for (let i = 0; i < inputArray.length; i++) {\n        const element = inputArray[i];\n        const result = await safeValidateTypes({ value: element, schema });\n\n        // special treatment for last processed element:\n        // ignore parse or validation failures, since they indicate that the\n        // last element is incomplete and should not be included in the result,\n        // unless it is the final delta\n        if (i === inputArray.length - 1 && !isFinalDelta) {\n          continue;\n        }\n\n        if (!result.success) {\n          return result;\n        }\n\n        resultArray.push(result.value);\n      }\n\n      // calculate delta:\n      const publishedElementCount = latestObject?.length ?? 0;\n\n      let textDelta = '';\n\n      if (isFirstDelta) {\n        textDelta += '[';\n      }\n\n      if (publishedElementCount > 0) {\n        textDelta += ',';\n      }\n\n      textDelta += resultArray\n        .slice(publishedElementCount) // only new elements\n        .map(element => JSON.stringify(element))\n        .join(',');\n\n      if (isFinalDelta) {\n        textDelta += ']';\n      }\n\n      return {\n        success: true,\n        value: {\n          partial: resultArray,\n          textDelta,\n        },\n      };\n    },\n\n    async validateFinalResult(\n      value: JSONValue | undefined,\n    ): Promise<ValidationResult<Array<ELEMENT>>> {\n      // check that the value is an object that contains an array of elements:\n      if (!isJSONObject(value) || !isJSONArray(value.elements)) {\n        return {\n          success: false,\n          error: new TypeValidationError({\n            value,\n            cause: 'value must be an object that contains an array of elements',\n          }),\n        };\n      }\n\n      const inputArray = value.elements as Array<JSONObject>;\n\n      // check that each element in the array is of the correct type:\n      for (const element of inputArray) {\n        const result = await safeValidateTypes({ value: element, schema });\n        if (!result.success) {\n          return result;\n        }\n      }\n\n      return { success: true, value: inputArray as Array<ELEMENT> };\n    },\n\n    createElementStream(\n      originalStream: ReadableStream<ObjectStreamPart<ELEMENT[]>>,\n    ) {\n      let publishedElements = 0;\n\n      return createAsyncIterableStream(\n        originalStream.pipeThrough(\n          new TransformStream<ObjectStreamPart<ELEMENT[]>, ELEMENT>({\n            transform(chunk, controller) {\n              switch (chunk.type) {\n                case 'object': {\n                  const array = chunk.object;\n\n                  // publish new elements one by one:\n                  for (\n                    ;\n                    publishedElements < array.length;\n                    publishedElements++\n                  ) {\n                    controller.enqueue(array[publishedElements]);\n                  }\n\n                  break;\n                }\n\n                case 'text-delta':\n                case 'finish':\n                case 'error': // suppress error (use onError instead)\n                  break;\n\n                default: {\n                  const _exhaustiveCheck: never = chunk;\n                  throw new Error(\n                    `Unsupported chunk type: ${_exhaustiveCheck}`,\n                  );\n                }\n              }\n            },\n          }),\n        ),\n      );\n    },\n  };\n};\n\nconst enumOutputStrategy = <ENUM extends string>(\n  enumValues: Array<ENUM>,\n): OutputStrategy<string, ENUM, never> => {\n  return {\n    type: 'enum',\n\n    // wrap in object that contains result, since most LLMs will not\n    // be able to generate an enum value directly:\n    // possible future optimization: use enums directly when model supports top-level enums\n    jsonSchema: {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      type: 'object',\n      properties: {\n        result: { type: 'string', enum: enumValues },\n      },\n      required: ['result'],\n      additionalProperties: false,\n    },\n\n    async validateFinalResult(\n      value: JSONValue | undefined,\n    ): Promise<ValidationResult<ENUM>> {\n      // check that the value is an object that contains an array of elements:\n      if (!isJSONObject(value) || typeof value.result !== 'string') {\n        return {\n          success: false,\n          error: new TypeValidationError({\n            value,\n            cause:\n              'value must be an object that contains a string in the \"result\" property.',\n          }),\n        };\n      }\n\n      const result = value.result as string;\n\n      return enumValues.includes(result as ENUM)\n        ? { success: true, value: result as ENUM }\n        : {\n            success: false,\n            error: new TypeValidationError({\n              value,\n              cause: 'value must be a string in the enum',\n            }),\n          };\n    },\n\n    async validatePartialResult({ value, textDelta }) {\n      if (!isJSONObject(value) || typeof value.result !== 'string') {\n        return {\n          success: false,\n          error: new TypeValidationError({\n            value,\n            cause:\n              'value must be an object that contains a string in the \"result\" property.',\n          }),\n        };\n      }\n\n      const result = value.result as string;\n      const possibleEnumValues = enumValues.filter(enumValue =>\n        enumValue.startsWith(result),\n      );\n\n      if (value.result.length === 0 || possibleEnumValues.length === 0) {\n        return {\n          success: false,\n          error: new TypeValidationError({\n            value,\n            cause: 'value must be a string in the enum',\n          }),\n        };\n      }\n\n      return {\n        success: true,\n        value: {\n          partial:\n            possibleEnumValues.length > 1 ? result : possibleEnumValues[0],\n          textDelta,\n        },\n      };\n    },\n\n    createElementStream() {\n      // no streaming in enum mode\n      throw new UnsupportedFunctionalityError({\n        functionality: 'element streams in enum mode',\n      });\n    },\n  };\n};\n\nexport function getOutputStrategy<SCHEMA>({\n  output,\n  schema,\n  enumValues,\n}: {\n  output: 'object' | 'array' | 'enum' | 'no-schema';\n  schema?:\n    | z4.core.$ZodType<SCHEMA, any>\n    | z3.Schema<SCHEMA, z3.ZodTypeDef, any>\n    | Schema<SCHEMA>;\n  enumValues?: Array<SCHEMA>;\n}): OutputStrategy<any, any, any> {\n  switch (output) {\n    case 'object':\n      return objectOutputStrategy(asSchema(schema!));\n    case 'array':\n      return arrayOutputStrategy(asSchema(schema!));\n    case 'enum':\n      return enumOutputStrategy(enumValues! as Array<string>);\n    case 'no-schema':\n      return noSchemaOutputStrategy;\n    default: {\n      const _exhaustiveCheck: never = output;\n      throw new Error(`Unsupported output: ${_exhaustiveCheck}`);\n    }\n  }\n}\n","import { JSONParseError, TypeValidationError } from '@ai-sdk/provider';\nimport { safeParseJSON } from '@ai-sdk/provider-utils';\nimport { NoObjectGeneratedError } from '../error/no-object-generated-error';\nimport type {\n  FinishReason,\n  LanguageModelResponseMetadata,\n  LanguageModelUsage,\n} from '../types';\nimport type { OutputStrategy } from './output-strategy';\nimport { RepairTextFunction } from './repair-text';\n\n/**\n * Parses and validates a result string by parsing it as JSON and validating against the output strategy.\n *\n * @param result - The result string to parse and validate\n * @param outputStrategy - The output strategy containing validation logic\n * @param context - Additional context for error reporting\n * @returns The validated result\n * @throws NoObjectGeneratedError if parsing or validation fails\n */\nasync function parseAndValidateObjectResult<RESULT>(\n  result: string,\n  outputStrategy: OutputStrategy<any, RESULT, any>,\n  context: {\n    response: LanguageModelResponseMetadata;\n    usage: LanguageModelUsage;\n    finishReason: FinishReason;\n  },\n): Promise<RESULT> {\n  const parseResult = await safeParseJSON({ text: result });\n\n  if (!parseResult.success) {\n    throw new NoObjectGeneratedError({\n      message: 'No object generated: could not parse the response.',\n      cause: parseResult.error,\n      text: result,\n      response: context.response,\n      usage: context.usage,\n      finishReason: context.finishReason,\n    });\n  }\n\n  const validationResult = await outputStrategy.validateFinalResult(\n    parseResult.value,\n    {\n      text: result,\n      response: context.response,\n      usage: context.usage,\n    },\n  );\n\n  if (!validationResult.success) {\n    throw new NoObjectGeneratedError({\n      message: 'No object generated: response did not match schema.',\n      cause: validationResult.error,\n      text: result,\n      response: context.response,\n      usage: context.usage,\n      finishReason: context.finishReason,\n    });\n  }\n\n  return validationResult.value;\n}\n\n/**\n * Parses and validates a result string by parsing it as JSON and validating against the output strategy.\n * If the result cannot be parsed, it attempts to repair the result using the repairText function.\n *\n * @param result - The result string to parse and validate\n * @param outputStrategy - The output strategy containing validation logic\n * @param repairText - A function that attempts to repair the result string\n * @param context - Additional context for error reporting\n * @returns The validated result\n * @throws NoObjectGeneratedError if parsing or validation fails\n */\nexport async function parseAndValidateObjectResultWithRepair<RESULT>(\n  result: string,\n  outputStrategy: OutputStrategy<any, RESULT, any>,\n  repairText: RepairTextFunction | undefined,\n  context: {\n    response: LanguageModelResponseMetadata;\n    usage: LanguageModelUsage;\n    finishReason: FinishReason;\n  },\n): Promise<RESULT> {\n  try {\n    return await parseAndValidateObjectResult(result, outputStrategy, context);\n  } catch (error) {\n    if (\n      repairText != null &&\n      NoObjectGeneratedError.isInstance(error) &&\n      (JSONParseError.isInstance(error.cause) ||\n        TypeValidationError.isInstance(error.cause))\n    ) {\n      const repairedText = await repairText({\n        text: result,\n        error: error.cause,\n      });\n      if (repairedText === null) {\n        throw error;\n      }\n      return await parseAndValidateObjectResult(\n        repairedText,\n        outputStrategy,\n        context,\n      );\n    }\n    throw error;\n  }\n}\n","import { Schema } from '@ai-sdk/provider-utils';\nimport * as z3 from 'zod/v3';\nimport * as z4 from 'zod/v4';\nimport { InvalidArgumentError } from '../error/invalid-argument-error';\n\nexport function validateObjectGenerationInput({\n  output,\n  schema,\n  schemaName,\n  schemaDescription,\n  enumValues,\n}: {\n  output?: 'object' | 'array' | 'enum' | 'no-schema';\n  schema?: z4.core.$ZodType | z3.Schema<any, z3.ZodTypeDef, any> | Schema<any>;\n  schemaName?: string;\n  schemaDescription?: string;\n  enumValues?: Array<unknown>;\n}) {\n  if (\n    output != null &&\n    output !== 'object' &&\n    output !== 'array' &&\n    output !== 'enum' &&\n    output !== 'no-schema'\n  ) {\n    throw new InvalidArgumentError({\n      parameter: 'output',\n      value: output,\n      message: 'Invalid output type.',\n    });\n  }\n\n  if (output === 'no-schema') {\n    if (schema != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schema',\n        value: schema,\n        message: 'Schema is not supported for no-schema output.',\n      });\n    }\n\n    if (schemaDescription != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schemaDescription',\n        value: schemaDescription,\n        message: 'Schema description is not supported for no-schema output.',\n      });\n    }\n\n    if (schemaName != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schemaName',\n        value: schemaName,\n        message: 'Schema name is not supported for no-schema output.',\n      });\n    }\n\n    if (enumValues != null) {\n      throw new InvalidArgumentError({\n        parameter: 'enumValues',\n        value: enumValues,\n        message: 'Enum values are not supported for no-schema output.',\n      });\n    }\n  }\n\n  if (output === 'object') {\n    if (schema == null) {\n      throw new InvalidArgumentError({\n        parameter: 'schema',\n        value: schema,\n        message: 'Schema is required for object output.',\n      });\n    }\n\n    if (enumValues != null) {\n      throw new InvalidArgumentError({\n        parameter: 'enumValues',\n        value: enumValues,\n        message: 'Enum values are not supported for object output.',\n      });\n    }\n  }\n\n  if (output === 'array') {\n    if (schema == null) {\n      throw new InvalidArgumentError({\n        parameter: 'schema',\n        value: schema,\n        message: 'Element schema is required for array output.',\n      });\n    }\n\n    if (enumValues != null) {\n      throw new InvalidArgumentError({\n        parameter: 'enumValues',\n        value: enumValues,\n        message: 'Enum values are not supported for array output.',\n      });\n    }\n  }\n\n  if (output === 'enum') {\n    if (schema != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schema',\n        value: schema,\n        message: 'Schema is not supported for enum output.',\n      });\n    }\n\n    if (schemaDescription != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schemaDescription',\n        value: schemaDescription,\n        message: 'Schema description is not supported for enum output.',\n      });\n    }\n\n    if (schemaName != null) {\n      throw new InvalidArgumentError({\n        parameter: 'schemaName',\n        value: schemaName,\n        message: 'Schema name is not supported for enum output.',\n      });\n    }\n\n    if (enumValues == null) {\n      throw new InvalidArgumentError({\n        parameter: 'enumValues',\n        value: enumValues,\n        message: 'Enum values are required for enum output.',\n      });\n    }\n\n    for (const value of enumValues) {\n      if (typeof value !== 'string') {\n        throw new InvalidArgumentError({\n          parameter: 'enumValues',\n          value,\n          message: 'Enum values must be strings.',\n        });\n      }\n    }\n  }\n}\n","import {\n  JSONValue,\n  LanguageModelV2CallWarning,\n  LanguageModelV2FinishReason,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n} from '@ai-sdk/provider';\nimport {\n  createIdGenerator,\n  ProviderOptions,\n  type InferSchema,\n  type Schema,\n} from '@ai-sdk/provider-utils';\nimport { ServerResponse } from 'http';\nimport * as z3 from 'zod/v3';\nimport * as z4 from 'zod/v4';\nimport { resolveLanguageModel } from '../model/resolve-model';\nimport { CallSettings } from '../prompt/call-settings';\nimport { convertToLanguageModelPrompt } from '../prompt/convert-to-language-model-prompt';\nimport { prepareCallSettings } from '../prompt/prepare-call-settings';\nimport { Prompt } from '../prompt/prompt';\nimport { standardizePrompt } from '../prompt/standardize-prompt';\nimport { wrapGatewayError } from '../prompt/wrap-gateway-error';\nimport { assembleOperationName } from '../telemetry/assemble-operation-name';\nimport { getBaseTelemetryAttributes } from '../telemetry/get-base-telemetry-attributes';\nimport { getTracer } from '../telemetry/get-tracer';\nimport { recordSpan } from '../telemetry/record-span';\nimport { selectTelemetryAttributes } from '../telemetry/select-telemetry-attributes';\nimport { stringifyForTelemetry } from '../telemetry/stringify-for-telemetry';\nimport { TelemetrySettings } from '../telemetry/telemetry-settings';\nimport { createTextStreamResponse } from '../text-stream/create-text-stream-response';\nimport { pipeTextStreamToResponse } from '../text-stream/pipe-text-stream-to-response';\nimport {\n  CallWarning,\n  FinishReason,\n  LanguageModel,\n} from '../types/language-model';\nimport { LanguageModelRequestMetadata } from '../types/language-model-request-metadata';\nimport { LanguageModelResponseMetadata } from '../types/language-model-response-metadata';\nimport { ProviderMetadata } from '../types/provider-metadata';\nimport { LanguageModelUsage } from '../types/usage';\nimport { DeepPartial, isDeepEqualData, parsePartialJson } from '../util';\nimport {\n  AsyncIterableStream,\n  createAsyncIterableStream,\n} from '../util/async-iterable-stream';\nimport { createStitchableStream } from '../util/create-stitchable-stream';\nimport { DelayedPromise } from '../util/delayed-promise';\nimport { now as originalNow } from '../util/now';\nimport { prepareRetries } from '../util/prepare-retries';\nimport { getOutputStrategy, OutputStrategy } from './output-strategy';\nimport { parseAndValidateObjectResultWithRepair } from './parse-and-validate-object-result';\nimport { RepairTextFunction } from './repair-text';\nimport { ObjectStreamPart, StreamObjectResult } from './stream-object-result';\nimport { validateObjectGenerationInput } from './validate-object-generation-input';\n\nconst originalGenerateId = createIdGenerator({ prefix: 'aiobj', size: 24 });\n\n/**\nCallback that is set using the `onError` option.\n\n@param event - The event that is passed to the callback.\n */\nexport type StreamObjectOnErrorCallback = (event: {\n  error: unknown;\n}) => Promise<void> | void;\n\n/**\nCallback that is set using the `onFinish` option.\n\n@param event - The event that is passed to the callback.\n */\nexport type StreamObjectOnFinishCallback<RESULT> = (event: {\n  /**\nThe token usage of the generated response.\n*/\n  usage: LanguageModelUsage;\n\n  /**\nThe generated object. Can be undefined if the final object does not match the schema.\n*/\n  object: RESULT | undefined;\n\n  /**\nOptional error object. This is e.g. a TypeValidationError when the final object does not match the schema.\n*/\n  error: unknown | undefined;\n\n  /**\nResponse metadata.\n */\n  response: LanguageModelResponseMetadata;\n\n  /**\nWarnings from the model provider (e.g. unsupported settings).\n*/\n  warnings?: CallWarning[];\n\n  /**\nAdditional provider-specific metadata. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n*/\n  providerMetadata: ProviderMetadata | undefined;\n}) => Promise<void> | void;\n\n/**\nGenerate a structured, typed object for a given prompt and schema using a language model.\n\nThis function streams the output. If you do not want to stream the output, use `generateObject` instead.\n\n@param model - The language model to use.\n@param tools - Tools that are accessible to and can be called by the model. The model needs to support calling tools.\n\n@param system - A system message that will be part of the prompt.\n@param prompt - A simple text prompt. You can either use `prompt` or `messages` but not both.\n@param messages - A list of messages. You can either use `prompt` or `messages` but not both.\n\n@param maxOutputTokens - Maximum number of tokens to generate.\n@param temperature - Temperature setting.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topP - Nucleus sampling.\nThe value is passed through to the provider. The range depends on the provider and model.\nIt is recommended to set either `temperature` or `topP`, but not both.\n@param topK - Only sample from the top K options for each subsequent token.\nUsed to remove \"long tail\" low probability responses.\nRecommended for advanced use cases only. You usually only need to use temperature.\n@param presencePenalty - Presence penalty setting.\nIt affects the likelihood of the model to repeat information that is already in the prompt.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param frequencyPenalty - Frequency penalty setting.\nIt affects the likelihood of the model to repeatedly use the same words or phrases.\nThe value is passed through to the provider. The range depends on the provider and model.\n@param stopSequences - Stop sequences.\nIf set, the model will stop generating text when one of the stop sequences is generated.\n@param seed - The seed (integer) to use for random sampling.\nIf set and supported by the model, calls will generate deterministic results.\n\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@param schema - The schema of the object that the model should generate.\n@param schemaName - Optional name of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema name.\n@param schemaDescription - Optional description of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema description.\n\n@param output - The type of the output.\n\n- 'object': The output is an object.\n- 'array': The output is an array.\n- 'enum': The output is an enum.\n- 'no-schema': The output is not a schema.\n\n@param experimental_telemetry - Optional telemetry configuration (experimental).\n\n@param providerOptions - Additional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n\n@returns\nA result object for accessing the partial object stream and additional information.\n */\nexport function streamObject<\n  SCHEMA extends\n    | z3.Schema\n    | z4.core.$ZodType\n    | Schema = z4.core.$ZodType<JSONValue>,\n  OUTPUT extends\n    | 'object'\n    | 'array'\n    | 'enum'\n    | 'no-schema' = InferSchema<SCHEMA> extends string ? 'enum' : 'object',\n  RESULT = OUTPUT extends 'array'\n    ? Array<InferSchema<SCHEMA>>\n    : InferSchema<SCHEMA>,\n>(\n  options: Omit<CallSettings, 'stopSequences'> &\n    Prompt &\n    (OUTPUT extends 'enum'\n      ? {\n          /**\nThe enum values that the model should use.\n        */\n          enum: Array<RESULT>;\n          mode?: 'json';\n          output: 'enum';\n        }\n      : OUTPUT extends 'no-schema'\n        ? {}\n        : {\n            /**\nThe schema of the object that the model should generate.\n      */\n            schema: SCHEMA;\n\n            /**\nOptional name of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema name.\n      */\n            schemaName?: string;\n\n            /**\nOptional description of the output that should be generated.\nUsed by some providers for additional LLM guidance, e.g.\nvia tool or schema description.\n      */\n            schemaDescription?: string;\n\n            /**\nThe mode to use for object generation.\n\nThe schema is converted into a JSON schema and used in one of the following ways\n\n- 'auto': The provider will choose the best mode for the model.\n- 'tool': A tool with the JSON schema as parameters is provided and the provider is instructed to use it.\n- 'json': The JSON schema and an instruction are injected into the prompt. If the provider supports JSON mode, it is enabled. If the provider supports JSON grammars, the grammar is used.\n\nPlease note that most providers do not support all modes.\n\nDefault and recommended: 'auto' (best mode for the model).\n      */\n            mode?: 'auto' | 'json' | 'tool';\n          }) & {\n      output?: OUTPUT;\n\n      /**\nThe language model to use.\n     */\n      model: LanguageModel;\n\n      /**\nA function that attempts to repair the raw output of the model\nto enable JSON parsing.\n       */\n      experimental_repairText?: RepairTextFunction;\n\n      /**\nOptional telemetry configuration (experimental).\n       */\n\n      experimental_telemetry?: TelemetrySettings;\n\n      /**\nAdditional provider-specific options. They are passed through\nto the provider from the AI SDK and enable provider-specific\nfunctionality that can be fully encapsulated in the provider.\n */\n      providerOptions?: ProviderOptions;\n\n      /**\nCallback that is invoked when an error occurs during streaming.\nYou can use it to log errors.\nThe stream processing will pause until the callback promise is resolved.\n     */\n      onError?: StreamObjectOnErrorCallback;\n\n      /**\nCallback that is called when the LLM response and the final object validation are finished.\n*/\n      onFinish?: StreamObjectOnFinishCallback<RESULT>;\n\n      /**\n       * Internal. For test use only. May change without notice.\n       */\n      _internal?: {\n        generateId?: () => string;\n        currentDate?: () => Date;\n        now?: () => number;\n      };\n    },\n): StreamObjectResult<\n  OUTPUT extends 'enum'\n    ? string\n    : OUTPUT extends 'array'\n      ? RESULT\n      : DeepPartial<RESULT>,\n  OUTPUT extends 'array' ? RESULT : RESULT,\n  OUTPUT extends 'array'\n    ? RESULT extends Array<infer U>\n      ? AsyncIterableStream<U>\n      : never\n    : never\n> {\n  const {\n    model,\n    output = 'object',\n    system,\n    prompt,\n    messages,\n    maxRetries,\n    abortSignal,\n    headers,\n    experimental_repairText: repairText,\n    experimental_telemetry: telemetry,\n    providerOptions,\n    onError = ({ error }: { error: unknown }) => {\n      console.error(error);\n    },\n    onFinish,\n    _internal: {\n      generateId = originalGenerateId,\n      currentDate = () => new Date(),\n      now = originalNow,\n    } = {},\n    ...settings\n  } = options;\n\n  const enumValues =\n    'enum' in options && options.enum ? options.enum : undefined;\n\n  const {\n    schema: inputSchema,\n    schemaDescription,\n    schemaName,\n  } = 'schema' in options ? options : {};\n\n  validateObjectGenerationInput({\n    output,\n    schema: inputSchema,\n    schemaName,\n    schemaDescription,\n    enumValues,\n  });\n\n  const outputStrategy = getOutputStrategy({\n    output,\n    schema: inputSchema,\n    enumValues,\n  });\n\n  return new DefaultStreamObjectResult({\n    model,\n    telemetry,\n    headers,\n    settings,\n    maxRetries,\n    abortSignal,\n    outputStrategy,\n    system,\n    prompt,\n    messages,\n    schemaName,\n    schemaDescription,\n    providerOptions,\n    repairText,\n    onError,\n    onFinish,\n    generateId,\n    currentDate,\n    now,\n  });\n}\n\nclass DefaultStreamObjectResult<PARTIAL, RESULT, ELEMENT_STREAM>\n  implements StreamObjectResult<PARTIAL, RESULT, ELEMENT_STREAM>\n{\n  private readonly _object = new DelayedPromise<RESULT>();\n  private readonly _usage = new DelayedPromise<LanguageModelUsage>();\n  private readonly _providerMetadata = new DelayedPromise<\n    ProviderMetadata | undefined\n  >();\n  private readonly _warnings = new DelayedPromise<CallWarning[] | undefined>();\n  private readonly _request =\n    new DelayedPromise<LanguageModelRequestMetadata>();\n  private readonly _response =\n    new DelayedPromise<LanguageModelResponseMetadata>();\n  private readonly _finishReason = new DelayedPromise<FinishReason>();\n\n  private readonly baseStream: ReadableStream<ObjectStreamPart<PARTIAL>>;\n\n  private readonly outputStrategy: OutputStrategy<\n    PARTIAL,\n    RESULT,\n    ELEMENT_STREAM\n  >;\n\n  constructor({\n    model: modelArg,\n    headers,\n    telemetry,\n    settings,\n    maxRetries: maxRetriesArg,\n    abortSignal,\n    outputStrategy,\n    system,\n    prompt,\n    messages,\n    schemaName,\n    schemaDescription,\n    providerOptions,\n    repairText,\n    onError,\n    onFinish,\n    generateId,\n    currentDate,\n    now,\n  }: {\n    model: LanguageModel;\n    telemetry: TelemetrySettings | undefined;\n    headers: Record<string, string | undefined> | undefined;\n    settings: Omit<CallSettings, 'abortSignal' | 'headers'>;\n    maxRetries: number | undefined;\n    abortSignal: AbortSignal | undefined;\n    outputStrategy: OutputStrategy<PARTIAL, RESULT, ELEMENT_STREAM>;\n    system: Prompt['system'];\n    prompt: Prompt['prompt'];\n    messages: Prompt['messages'];\n    schemaName: string | undefined;\n    schemaDescription: string | undefined;\n    providerOptions: ProviderOptions | undefined;\n    repairText: RepairTextFunction | undefined;\n    onError: StreamObjectOnErrorCallback;\n    onFinish: StreamObjectOnFinishCallback<RESULT> | undefined;\n    generateId: () => string;\n    currentDate: () => Date;\n    now: () => number;\n  }) {\n    const model = resolveLanguageModel(modelArg);\n\n    const { maxRetries, retry } = prepareRetries({\n      maxRetries: maxRetriesArg,\n      abortSignal,\n    });\n\n    const callSettings = prepareCallSettings(settings);\n\n    const baseTelemetryAttributes = getBaseTelemetryAttributes({\n      model,\n      telemetry,\n      headers,\n      settings: { ...callSettings, maxRetries },\n    });\n\n    const tracer = getTracer(telemetry);\n    const self = this;\n\n    const stitchableStream =\n      createStitchableStream<ObjectStreamPart<PARTIAL>>();\n\n    const eventProcessor = new TransformStream<\n      ObjectStreamPart<PARTIAL>,\n      ObjectStreamPart<PARTIAL>\n    >({\n      transform(chunk, controller) {\n        controller.enqueue(chunk);\n\n        if (chunk.type === 'error') {\n          onError({ error: wrapGatewayError(chunk.error) });\n        }\n      },\n    });\n\n    this.baseStream = stitchableStream.stream.pipeThrough(eventProcessor);\n\n    recordSpan({\n      name: 'ai.streamObject',\n      attributes: selectTelemetryAttributes({\n        telemetry,\n        attributes: {\n          ...assembleOperationName({\n            operationId: 'ai.streamObject',\n            telemetry,\n          }),\n          ...baseTelemetryAttributes,\n          // specific settings that only make sense on the outer level:\n          'ai.prompt': {\n            input: () => JSON.stringify({ system, prompt, messages }),\n          },\n          'ai.schema':\n            outputStrategy.jsonSchema != null\n              ? { input: () => JSON.stringify(outputStrategy.jsonSchema) }\n              : undefined,\n          'ai.schema.name': schemaName,\n          'ai.schema.description': schemaDescription,\n          'ai.settings.output': outputStrategy.type,\n        },\n      }),\n      tracer,\n      endWhenDone: false,\n      fn: async rootSpan => {\n        const standardizedPrompt = await standardizePrompt({\n          system,\n          prompt,\n          messages,\n        });\n\n        const callOptions = {\n          responseFormat: {\n            type: 'json' as const,\n            schema: outputStrategy.jsonSchema,\n            name: schemaName,\n            description: schemaDescription,\n          },\n          ...prepareCallSettings(settings),\n          prompt: await convertToLanguageModelPrompt({\n            prompt: standardizedPrompt,\n            supportedUrls: await model.supportedUrls,\n          }),\n          providerOptions,\n          abortSignal,\n          headers,\n          includeRawChunks: false,\n        };\n\n        const transformer: Transformer<\n          LanguageModelV2StreamPart,\n          ObjectStreamInputPart\n        > = {\n          transform: (chunk, controller) => {\n            switch (chunk.type) {\n              case 'text-delta':\n                controller.enqueue(chunk.delta);\n                break;\n              case 'response-metadata':\n              case 'finish':\n              case 'error':\n                controller.enqueue(chunk);\n                break;\n            }\n          },\n        };\n\n        const {\n          result: { stream, response, request },\n          doStreamSpan,\n          startTimestampMs,\n        } = await retry(() =>\n          recordSpan({\n            name: 'ai.streamObject.doStream',\n            attributes: selectTelemetryAttributes({\n              telemetry,\n              attributes: {\n                ...assembleOperationName({\n                  operationId: 'ai.streamObject.doStream',\n                  telemetry,\n                }),\n                ...baseTelemetryAttributes,\n                'ai.prompt.messages': {\n                  input: () => stringifyForTelemetry(callOptions.prompt),\n                },\n\n                // standardized gen-ai llm span attributes:\n                'gen_ai.system': model.provider,\n                'gen_ai.request.model': model.modelId,\n                'gen_ai.request.frequency_penalty':\n                  callSettings.frequencyPenalty,\n                'gen_ai.request.max_tokens': callSettings.maxOutputTokens,\n                'gen_ai.request.presence_penalty': callSettings.presencePenalty,\n                'gen_ai.request.temperature': callSettings.temperature,\n                'gen_ai.request.top_k': callSettings.topK,\n                'gen_ai.request.top_p': callSettings.topP,\n              },\n            }),\n            tracer,\n            endWhenDone: false,\n            fn: async doStreamSpan => ({\n              startTimestampMs: now(),\n              doStreamSpan,\n              result: await model.doStream(callOptions),\n            }),\n          }),\n        );\n\n        self._request.resolve(request ?? {});\n\n        // store information for onFinish callback:\n        let warnings: LanguageModelV2CallWarning[] | undefined;\n        let usage: LanguageModelUsage = {\n          inputTokens: undefined,\n          outputTokens: undefined,\n          totalTokens: undefined,\n        };\n        let finishReason: LanguageModelV2FinishReason | undefined;\n        let providerMetadata: ProviderMetadata | undefined;\n        let object: RESULT | undefined;\n        let error: unknown | undefined;\n\n        // pipe chunks through a transformation stream that extracts metadata:\n        let accumulatedText = '';\n        let textDelta = '';\n        let fullResponse: {\n          id: string;\n          timestamp: Date;\n          modelId: string;\n        } = {\n          id: generateId(),\n          timestamp: currentDate(),\n          modelId: model.modelId,\n        };\n\n        // Keep track of raw parse result before type validation, since e.g. Zod might\n        // change the object by mapping properties.\n        let latestObjectJson: JSONValue | undefined = undefined;\n        let latestObject: PARTIAL | undefined = undefined;\n        let isFirstChunk = true;\n        let isFirstDelta = true;\n\n        const transformedStream = stream\n          .pipeThrough(new TransformStream(transformer))\n          .pipeThrough(\n            new TransformStream<\n              string | ObjectStreamInputPart,\n              ObjectStreamPart<PARTIAL>\n            >({\n              async transform(chunk, controller): Promise<void> {\n                if (\n                  typeof chunk === 'object' &&\n                  chunk.type === 'stream-start'\n                ) {\n                  warnings = chunk.warnings;\n                  return; // stream start chunks are sent immediately and do not count as first chunk\n                }\n\n                // Telemetry event for first chunk:\n                if (isFirstChunk) {\n                  const msToFirstChunk = now() - startTimestampMs;\n\n                  isFirstChunk = false;\n\n                  doStreamSpan.addEvent('ai.stream.firstChunk', {\n                    'ai.stream.msToFirstChunk': msToFirstChunk,\n                  });\n\n                  doStreamSpan.setAttributes({\n                    'ai.stream.msToFirstChunk': msToFirstChunk,\n                  });\n                }\n\n                // process partial text chunks\n                if (typeof chunk === 'string') {\n                  accumulatedText += chunk;\n                  textDelta += chunk;\n\n                  const { value: currentObjectJson, state: parseState } =\n                    await parsePartialJson(accumulatedText);\n\n                  if (\n                    currentObjectJson !== undefined &&\n                    !isDeepEqualData(latestObjectJson, currentObjectJson)\n                  ) {\n                    const validationResult =\n                      await outputStrategy.validatePartialResult({\n                        value: currentObjectJson,\n                        textDelta,\n                        latestObject,\n                        isFirstDelta,\n                        isFinalDelta: parseState === 'successful-parse',\n                      });\n\n                    if (\n                      validationResult.success &&\n                      !isDeepEqualData(\n                        latestObject,\n                        validationResult.value.partial,\n                      )\n                    ) {\n                      // inside inner check to correctly parse the final element in array mode:\n                      latestObjectJson = currentObjectJson;\n                      latestObject = validationResult.value.partial;\n\n                      controller.enqueue({\n                        type: 'object',\n                        object: latestObject,\n                      });\n\n                      controller.enqueue({\n                        type: 'text-delta',\n                        textDelta: validationResult.value.textDelta,\n                      });\n\n                      textDelta = '';\n                      isFirstDelta = false;\n                    }\n                  }\n\n                  return;\n                }\n\n                switch (chunk.type) {\n                  case 'response-metadata': {\n                    fullResponse = {\n                      id: chunk.id ?? fullResponse.id,\n                      timestamp: chunk.timestamp ?? fullResponse.timestamp,\n                      modelId: chunk.modelId ?? fullResponse.modelId,\n                    };\n                    break;\n                  }\n\n                  case 'finish': {\n                    // send final text delta:\n                    if (textDelta !== '') {\n                      controller.enqueue({ type: 'text-delta', textDelta });\n                    }\n\n                    // store finish reason for telemetry:\n                    finishReason = chunk.finishReason;\n\n                    // store usage and metadata for promises and onFinish callback:\n                    usage = chunk.usage;\n                    providerMetadata = chunk.providerMetadata;\n\n                    controller.enqueue({\n                      ...chunk,\n                      usage,\n                      response: fullResponse,\n                    });\n\n                    // resolve promises that can be resolved now:\n                    self._usage.resolve(usage);\n                    self._providerMetadata.resolve(providerMetadata);\n                    self._response.resolve({\n                      ...fullResponse,\n                      headers: response?.headers,\n                    });\n                    self._finishReason.resolve(finishReason ?? 'unknown');\n\n                    try {\n                      object = await parseAndValidateObjectResultWithRepair(\n                        accumulatedText,\n                        outputStrategy,\n                        repairText,\n                        {\n                          response: fullResponse,\n                          usage,\n                          finishReason,\n                        },\n                      );\n                      self._object.resolve(object);\n                    } catch (e) {\n                      error = e;\n                      self._object.reject(e);\n                    }\n                    break;\n                  }\n\n                  default: {\n                    controller.enqueue(chunk);\n                    break;\n                  }\n                }\n              },\n\n              // invoke onFinish callback and resolve toolResults promise when the stream is about to close:\n              async flush(controller) {\n                try {\n                  const finalUsage = usage ?? {\n                    promptTokens: NaN,\n                    completionTokens: NaN,\n                    totalTokens: NaN,\n                  };\n\n                  doStreamSpan.setAttributes(\n                    selectTelemetryAttributes({\n                      telemetry,\n                      attributes: {\n                        'ai.response.finishReason': finishReason,\n                        'ai.response.object': {\n                          output: () => JSON.stringify(object),\n                        },\n                        'ai.response.id': fullResponse.id,\n                        'ai.response.model': fullResponse.modelId,\n                        'ai.response.timestamp':\n                          fullResponse.timestamp.toISOString(),\n                        'ai.response.providerMetadata':\n                          JSON.stringify(providerMetadata),\n\n                        'ai.usage.inputTokens': finalUsage.inputTokens,\n                        'ai.usage.outputTokens': finalUsage.outputTokens,\n                        'ai.usage.totalTokens': finalUsage.totalTokens,\n                        'ai.usage.reasoningTokens': finalUsage.reasoningTokens,\n                        'ai.usage.cachedInputTokens':\n                          finalUsage.cachedInputTokens,\n\n                        // standardized gen-ai llm span attributes:\n                        'gen_ai.response.finish_reasons': [finishReason],\n                        'gen_ai.response.id': fullResponse.id,\n                        'gen_ai.response.model': fullResponse.modelId,\n                        'gen_ai.usage.input_tokens': finalUsage.inputTokens,\n                        'gen_ai.usage.output_tokens': finalUsage.outputTokens,\n                      },\n                    }),\n                  );\n\n                  // finish doStreamSpan before other operations for correct timing:\n                  doStreamSpan.end();\n\n                  // Add response information to the root span:\n                  rootSpan.setAttributes(\n                    selectTelemetryAttributes({\n                      telemetry,\n                      attributes: {\n                        'ai.usage.inputTokens': finalUsage.inputTokens,\n                        'ai.usage.outputTokens': finalUsage.outputTokens,\n                        'ai.usage.totalTokens': finalUsage.totalTokens,\n                        'ai.usage.reasoningTokens': finalUsage.reasoningTokens,\n                        'ai.usage.cachedInputTokens':\n                          finalUsage.cachedInputTokens,\n                        'ai.response.object': {\n                          output: () => JSON.stringify(object),\n                        },\n                        'ai.response.providerMetadata':\n                          JSON.stringify(providerMetadata),\n                      },\n                    }),\n                  );\n\n                  // call onFinish callback:\n                  await onFinish?.({\n                    usage: finalUsage,\n                    object,\n                    error,\n                    response: {\n                      ...fullResponse,\n                      headers: response?.headers,\n                    },\n                    warnings,\n                    providerMetadata,\n                  });\n                } catch (error) {\n                  controller.enqueue({ type: 'error', error });\n                } finally {\n                  rootSpan.end();\n                }\n              },\n            }),\n          );\n\n        stitchableStream.addStream(transformedStream);\n      },\n    })\n      .catch(error => {\n        // add an empty stream with an error to break the stream:\n        stitchableStream.addStream(\n          new ReadableStream({\n            start(controller) {\n              controller.enqueue({ type: 'error', error });\n              controller.close();\n            },\n          }),\n        );\n      })\n      .finally(() => {\n        stitchableStream.close();\n      });\n\n    this.outputStrategy = outputStrategy;\n  }\n\n  get object() {\n    return this._object.promise;\n  }\n\n  get usage() {\n    return this._usage.promise;\n  }\n\n  get providerMetadata() {\n    return this._providerMetadata.promise;\n  }\n\n  get warnings() {\n    return this._warnings.promise;\n  }\n\n  get request() {\n    return this._request.promise;\n  }\n\n  get response() {\n    return this._response.promise;\n  }\n\n  get finishReason() {\n    return this._finishReason.promise;\n  }\n\n  get partialObjectStream(): AsyncIterableStream<PARTIAL> {\n    return createAsyncIterableStream(\n      this.baseStream.pipeThrough(\n        new TransformStream<ObjectStreamPart<PARTIAL>, PARTIAL>({\n          transform(chunk, controller) {\n            switch (chunk.type) {\n              case 'object':\n                controller.enqueue(chunk.object);\n                break;\n\n              case 'text-delta':\n              case 'finish':\n              case 'error': // suppress error (use onError instead)\n                break;\n\n              default: {\n                const _exhaustiveCheck: never = chunk;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          },\n        }),\n      ),\n    );\n  }\n\n  get elementStream(): ELEMENT_STREAM {\n    return this.outputStrategy.createElementStream(this.baseStream);\n  }\n\n  get textStream(): AsyncIterableStream<string> {\n    return createAsyncIterableStream(\n      this.baseStream.pipeThrough(\n        new TransformStream<ObjectStreamPart<PARTIAL>, string>({\n          transform(chunk, controller) {\n            switch (chunk.type) {\n              case 'text-delta':\n                controller.enqueue(chunk.textDelta);\n                break;\n\n              case 'object':\n              case 'finish':\n              case 'error': // suppress error (use onError instead)\n                break;\n\n              default: {\n                const _exhaustiveCheck: never = chunk;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          },\n        }),\n      ),\n    );\n  }\n\n  get fullStream(): AsyncIterableStream<ObjectStreamPart<PARTIAL>> {\n    return createAsyncIterableStream(this.baseStream);\n  }\n\n  pipeTextStreamToResponse(response: ServerResponse, init?: ResponseInit) {\n    pipeTextStreamToResponse({\n      response,\n      textStream: this.textStream,\n      ...init,\n    });\n  }\n\n  toTextStreamResponse(init?: ResponseInit): Response {\n    return createTextStreamResponse({\n      textStream: this.textStream,\n      ...init,\n    });\n  }\n}\n\nexport type ObjectStreamInputPart =\n  | string\n  | {\n      type: 'stream-start';\n      warnings: LanguageModelV2CallWarning[];\n    }\n  | {\n      type: 'error';\n      error: unknown;\n    }\n  | {\n      type: 'response-metadata';\n      id?: string;\n      timestamp?: Date;\n      modelId?: string;\n    }\n  | {\n      type: 'finish';\n      finishReason: LanguageModelV2FinishReason;\n      usage: LanguageModelV2Usage;\n      providerMetadata?: SharedV2ProviderMetadata;\n    };\n","import { InvalidArgumentError } from '../error/invalid-argument-error';\n\n/**\n * Calculates the cosine similarity between two vectors. This is a useful metric for\n * comparing the similarity of two vectors such as embeddings.\n *\n * @param vector1 - The first vector.\n * @param vector2 - The second vector.\n *\n * @returns The cosine similarity between vector1 and vector2.\n * @returns 0 if either vector is the zero vector.\n *\n * @throws {InvalidArgumentError} If the vectors do not have the same length.\n */\nexport function cosineSimilarity(vector1: number[], vector2: number[]): number {\n  if (vector1.length !== vector2.length) {\n    throw new InvalidArgumentError({\n      parameter: 'vector1,vector2',\n      value: { vector1Length: vector1.length, vector2Length: vector2.length },\n      message: `Vectors must have the same length`,\n    });\n  }\n\n  const n = vector1.length;\n\n  if (n === 0) {\n    return 0; // Return 0 for empty vectors if no error is thrown\n  }\n\n  let magnitudeSquared1 = 0;\n  let magnitudeSquared2 = 0;\n  let dotProduct = 0;\n\n  for (let i = 0; i < n; i++) {\n    const value1 = vector1[i];\n    const value2 = vector2[i];\n\n    magnitudeSquared1 += value1 * value1;\n    magnitudeSquared2 += value2 * value2;\n    dotProduct += value1 * value2;\n  }\n\n  return magnitudeSquared1 === 0 || magnitudeSquared2 === 0\n    ? 0\n    : dotProduct /\n        (Math.sqrt(magnitudeSquared1) * Math.sqrt(magnitudeSquared2));\n}\n","/**\n * Converts a data URL of type text/* to a text string.\n */\nexport function getTextFromDataUrl(dataUrl: string): string {\n  const [header, base64Content] = dataUrl.split(',');\n  const mediaType = header.split(';')[0].split(':')[1];\n\n  if (mediaType == null || base64Content == null) {\n    throw new Error('Invalid data URL format');\n  }\n\n  try {\n    return window.atob(base64Content);\n  } catch (error) {\n    throw new Error(`Error decoding data URL`);\n  }\n}\n","/**\n * Performs a deep-equal comparison of two parsed JSON objects.\n *\n * @param {any} obj1 - The first object to compare.\n * @param {any} obj2 - The second object to compare.\n * @returns {boolean} - Returns true if the two objects are deeply equal, false otherwise.\n */\nexport function isDeepEqualData(obj1: any, obj2: any): boolean {\n  // Check for strict equality first\n  if (obj1 === obj2) return true;\n\n  // Check if either is null or undefined\n  if (obj1 == null || obj2 == null) return false;\n\n  // Check if both are objects\n  if (typeof obj1 !== 'object' && typeof obj2 !== 'object')\n    return obj1 === obj2;\n\n  // If they are not strictly equal, they both need to be Objects\n  if (obj1.constructor !== obj2.constructor) return false;\n\n  // Special handling for Date objects\n  if (obj1 instanceof Date && obj2 instanceof Date) {\n    return obj1.getTime() === obj2.getTime();\n  }\n\n  // Handle arrays: compare length and then perform a recursive deep comparison on each item\n  if (Array.isArray(obj1)) {\n    if (obj1.length !== obj2.length) return false;\n    for (let i = 0; i < obj1.length; i++) {\n      if (!isDeepEqualData(obj1[i], obj2[i])) return false;\n    }\n    return true; // All array elements matched\n  }\n\n  // Compare the set of keys in each object\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n  if (keys1.length !== keys2.length) return false;\n\n  // Check each key-value pair recursively\n  for (const key of keys1) {\n    if (!keys2.includes(key)) return false;\n    if (!isDeepEqualData(obj1[key], obj2[key])) return false;\n  }\n\n  return true; // All keys and values matched\n}\n","import { Job } from './job';\n\nexport class SerialJobExecutor {\n  private queue: Array<Job> = [];\n  private isProcessing = false;\n\n  private async processQueue() {\n    if (this.isProcessing) {\n      return;\n    }\n\n    this.isProcessing = true;\n\n    while (this.queue.length > 0) {\n      await this.queue[0]();\n      this.queue.shift();\n    }\n\n    this.isProcessing = false;\n  }\n\n  async run(job: Job): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.queue.push(async () => {\n        try {\n          await job();\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      void this.processQueue();\n    });\n  }\n}\n","import { delay as delayFunction } from '@ai-sdk/provider-utils';\n\n/**\n * Creates a ReadableStream that emits the provided values with an optional delay between each value.\n *\n * @param options - The configuration options\n * @param options.chunks - Array of values to be emitted by the stream\n * @param options.initialDelayInMs - Optional initial delay in milliseconds before emitting the first value (default: 0). Can be set to `null` to skip the initial delay. The difference between `initialDelayInMs: null` and `initialDelayInMs: 0` is that `initialDelayInMs: null` will emit the values without any delay, while `initialDelayInMs: 0` will emit the values with a delay of 0 milliseconds.\n * @param options.chunkDelayInMs - Optional delay in milliseconds between emitting each value (default: 0). Can be set to `null` to skip the delay. The difference between `chunkDelayInMs: null` and `chunkDelayInMs: 0` is that `chunkDelayInMs: null` will emit the values without any delay, while `chunkDelayInMs: 0` will emit the values with a delay of 0 milliseconds.\n * @returns A ReadableStream that emits the provided values\n */\nexport function simulateReadableStream<T>({\n  chunks,\n  initialDelayInMs = 0,\n  chunkDelayInMs = 0,\n  _internal,\n}: {\n  chunks: T[];\n  initialDelayInMs?: number | null;\n  chunkDelayInMs?: number | null;\n  _internal?: {\n    delay?: (ms: number | null) => Promise<void>;\n  };\n}): ReadableStream<T> {\n  const delay = _internal?.delay ?? delayFunction;\n\n  let index = 0;\n\n  return new ReadableStream({\n    async pull(controller) {\n      if (index < chunks.length) {\n        await delay(index === 0 ? initialDelayInMs : chunkDelayInMs);\n        controller.enqueue(chunks[index++]);\n      } else {\n        controller.close();\n      }\n    },\n  });\n}\n","import { AISDKError } from '@ai-sdk/provider';\nimport { SpeechModelResponseMetadata } from '../types/speech-model-response-metadata';\n\n/**\nError that is thrown when no speech audio was generated.\n */\nexport class NoSpeechGeneratedError extends AISDKError {\n  readonly responses: Array<SpeechModelResponseMetadata>;\n\n  constructor(options: { responses: Array<SpeechModelResponseMetadata> }) {\n    super({\n      name: 'AI_NoSpeechGeneratedError',\n      message: 'No speech audio generated.',\n    });\n\n    this.responses = options.responses;\n  }\n}\n","import {\n  GeneratedFile,\n  DefaultGeneratedFile,\n} from '../generate-text/generated-file';\n\n/**\n * A generated audio file.\n */\nexport interface GeneratedAudioFile extends GeneratedFile {\n  /**\n   * Audio format of the file (e.g., 'mp3', 'wav', etc.)\n   */\n  readonly format: string;\n}\n\nexport class DefaultGeneratedAudioFile\n  extends DefaultGeneratedFile\n  implements GeneratedAudioFile\n{\n  readonly format: string;\n\n  constructor({\n    data,\n    mediaType,\n  }: {\n    data: string | Uint8Array;\n    mediaType: string;\n  }) {\n    super({ data, mediaType });\n    let format = 'mp3';\n\n    // If format is not provided, try to determine it from the media type\n    if (mediaType) {\n      const mediaTypeParts = mediaType.split('/');\n\n      if (mediaTypeParts.length === 2) {\n        // Handle special cases for audio formats\n        if (mediaType !== 'audio/mpeg') {\n          format = mediaTypeParts[1];\n        }\n      }\n    }\n\n    if (!format) {\n      // TODO this should be an AI SDK error\n      throw new Error(\n        'Audio format must be provided or determinable from media type',\n      );\n    }\n\n    this.format = format;\n  }\n}\n\nexport class DefaultGeneratedAudioFileWithType extends DefaultGeneratedAudioFile {\n  readonly type = 'audio';\n\n  constructor(options: {\n    data: string | Uint8Array;\n    mediaType: string;\n    format: string;\n  }) {\n    super(options);\n  }\n}\n","import { JSONValue, SpeechModelV2 } from '@ai-sdk/provider';\nimport { ProviderOptions } from '@ai-sdk/provider-utils';\nimport { NoSpeechGeneratedError } from '../error/no-speech-generated-error';\nimport {\n  audioMediaTypeSignatures,\n  detectMediaType,\n} from '../util/detect-media-type';\nimport { prepareRetries } from '../util/prepare-retries';\nimport { UnsupportedModelVersionError } from '../error/unsupported-model-version-error';\nimport { SpeechWarning } from '../types/speech-model';\nimport { SpeechModelResponseMetadata } from '../types/speech-model-response-metadata';\nimport { SpeechResult } from './generate-speech-result';\nimport {\n  DefaultGeneratedAudioFile,\n  GeneratedAudioFile,\n} from './generated-audio-file';\n\n/**\nGenerates speech audio using a speech model.\n\n@param model - The speech model to use.\n@param text - The text to convert to speech.\n@param voice - The voice to use for speech generation.\n@param outputFormat - The output format to use for speech generation e.g. \"mp3\", \"wav\", etc.\n@param instructions - Instructions for the speech generation e.g. \"Speak in a slow and steady tone\".\n@param speed - The speed of the speech generation.\n@param providerOptions - Additional provider-specific options that are passed through to the provider\nas body parameters.\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@returns A result object that contains the generated audio data.\n */\nexport async function generateSpeech({\n  model,\n  text,\n  voice,\n  outputFormat,\n  instructions,\n  speed,\n  language,\n  providerOptions = {},\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n}: {\n  /**\nThe speech model to use.\n     */\n  model: SpeechModelV2;\n\n  /**\nThe text to convert to speech.\n   */\n  text: string;\n\n  /**\nThe voice to use for speech generation.\n   */\n  voice?: string;\n\n  /**\n   * The desired output format for the audio e.g. \"mp3\", \"wav\", etc.\n   */\n  outputFormat?: 'mp3' | 'wav' | (string & {});\n\n  /**\n    Instructions for the speech generation e.g. \"Speak in a slow and steady tone\".\n  */\n  instructions?: string;\n\n  /**\n  The speed of the speech generation.\n   */\n  speed?: number;\n\n  /**\n  The language for speech generation. This should be an ISO 639-1 language code (e.g. \"en\", \"es\", \"fr\")\n  or \"auto\" for automatic language detection. Provider support varies.\n   */\n  language?: string;\n\n  /**\nAdditional provider-specific options that are passed through to the provider\nas body parameters.\n\nThe outer record is keyed by the provider name, and the inner\nrecord is keyed by the provider-specific metadata key.\n```ts\n{\n  \"openai\": {}\n}\n```\n     */\n  providerOptions?: ProviderOptions;\n\n  /**\nMaximum number of retries per speech model call. Set to 0 to disable retries.\n\n@default 2\n   */\n  maxRetries?: number;\n\n  /**\nAbort signal.\n */\n  abortSignal?: AbortSignal;\n\n  /**\nAdditional headers to include in the request.\nOnly applicable for HTTP-based providers.\n */\n  headers?: Record<string, string>;\n}): Promise<SpeechResult> {\n  if (model.specificationVersion !== 'v2') {\n    throw new UnsupportedModelVersionError({\n      version: model.specificationVersion,\n      provider: model.provider,\n      modelId: model.modelId,\n    });\n  }\n\n  const { retry } = prepareRetries({\n    maxRetries: maxRetriesArg,\n    abortSignal,\n  });\n\n  const result = await retry(() =>\n    model.doGenerate({\n      text,\n      voice,\n      outputFormat,\n      instructions,\n      speed,\n      language,\n      abortSignal,\n      headers,\n      providerOptions,\n    }),\n  );\n\n  if (!result.audio || result.audio.length === 0) {\n    throw new NoSpeechGeneratedError({ responses: [result.response] });\n  }\n\n  return new DefaultSpeechResult({\n    audio: new DefaultGeneratedAudioFile({\n      data: result.audio,\n      mediaType:\n        detectMediaType({\n          data: result.audio,\n          signatures: audioMediaTypeSignatures,\n        }) ?? 'audio/mp3',\n    }),\n    warnings: result.warnings,\n    responses: [result.response],\n    providerMetadata: result.providerMetadata,\n  });\n}\n\nclass DefaultSpeechResult implements SpeechResult {\n  readonly audio: GeneratedAudioFile;\n  readonly warnings: Array<SpeechWarning>;\n  readonly responses: Array<SpeechModelResponseMetadata>;\n  readonly providerMetadata: Record<string, Record<string, JSONValue>>;\n\n  constructor(options: {\n    audio: GeneratedAudioFile;\n    warnings: Array<SpeechWarning>;\n    responses: Array<SpeechModelResponseMetadata>;\n    providerMetadata: Record<string, Record<string, JSONValue>> | undefined;\n  }) {\n    this.audio = options.audio;\n    this.warnings = options.warnings;\n    this.responses = options.responses;\n    this.providerMetadata = options.providerMetadata ?? {};\n  }\n}\n","import { LanguageModelV2CallOptions } from '@ai-sdk/provider';\nimport {\n  asSchema,\n  safeParseJSON,\n  safeValidateTypes,\n  Schema,\n} from '@ai-sdk/provider-utils';\nimport * as z3 from 'zod/v3';\nimport * as z4 from 'zod/v4';\nimport { NoObjectGeneratedError } from '../error/no-object-generated-error';\nimport { DeepPartial } from '../util/deep-partial';\nimport { parsePartialJson } from '../util/parse-partial-json';\nimport { FinishReason } from '../types/language-model';\nimport { LanguageModelResponseMetadata } from '../types/language-model-response-metadata';\nimport { LanguageModelUsage } from '../types/usage';\n\nexport interface Output<OUTPUT, PARTIAL> {\n  readonly type: 'object' | 'text';\n\n  responseFormat: LanguageModelV2CallOptions['responseFormat'];\n\n  parsePartial(options: {\n    text: string;\n  }): Promise<{ partial: PARTIAL } | undefined>;\n\n  parseOutput(\n    options: { text: string },\n    context: {\n      response: LanguageModelResponseMetadata;\n      usage: LanguageModelUsage;\n      finishReason: FinishReason;\n    },\n  ): Promise<OUTPUT>;\n}\n\nexport const text = (): Output<string, string> => ({\n  type: 'text',\n\n  responseFormat: { type: 'text' },\n\n  async parsePartial({ text }: { text: string }) {\n    return { partial: text };\n  },\n\n  async parseOutput({ text }: { text: string }) {\n    return text;\n  },\n});\n\nexport const object = <OUTPUT>({\n  schema: inputSchema,\n}: {\n  schema:\n    | z4.core.$ZodType<OUTPUT, any>\n    | z3.Schema<OUTPUT, z3.ZodTypeDef, any>\n    | Schema<OUTPUT>;\n}): Output<OUTPUT, DeepPartial<OUTPUT>> => {\n  const schema = asSchema(inputSchema);\n\n  return {\n    type: 'object',\n\n    responseFormat: {\n      type: 'json',\n      schema: schema.jsonSchema,\n    },\n\n    async parsePartial({ text }: { text: string }) {\n      const result = await parsePartialJson(text);\n\n      switch (result.state) {\n        case 'failed-parse':\n        case 'undefined-input':\n          return undefined;\n\n        case 'repaired-parse':\n        case 'successful-parse':\n          return {\n            // Note: currently no validation of partial results:\n            partial: result.value as DeepPartial<OUTPUT>,\n          };\n\n        default: {\n          const _exhaustiveCheck: never = result.state;\n          throw new Error(`Unsupported parse state: ${_exhaustiveCheck}`);\n        }\n      }\n    },\n\n    async parseOutput(\n      { text }: { text: string },\n      context: {\n        response: LanguageModelResponseMetadata;\n        usage: LanguageModelUsage;\n        finishReason: FinishReason;\n      },\n    ) {\n      const parseResult = await safeParseJSON({ text });\n\n      if (!parseResult.success) {\n        throw new NoObjectGeneratedError({\n          message: 'No object generated: could not parse the response.',\n          cause: parseResult.error,\n          text,\n          response: context.response,\n          usage: context.usage,\n          finishReason: context.finishReason,\n        });\n      }\n\n      const validationResult = await safeValidateTypes({\n        value: parseResult.value,\n        schema,\n      });\n\n      if (!validationResult.success) {\n        throw new NoObjectGeneratedError({\n          message: 'No object generated: response did not match schema.',\n          cause: validationResult.error,\n          text,\n          response: context.response,\n          usage: context.usage,\n          finishReason: context.finishReason,\n        });\n      }\n\n      return validationResult.value;\n    },\n  };\n};\n","import { delay as originalDelay } from '@ai-sdk/provider-utils';\nimport { TextStreamPart } from './stream-text-result';\nimport { ToolSet } from './tool-set';\nimport { InvalidArgumentError } from '@ai-sdk/provider';\n\nconst CHUNKING_REGEXPS = {\n  word: /\\S+\\s+/m,\n  line: /\\n+/m,\n};\n\n/**\n * Detects the first chunk in a buffer.\n *\n * @param buffer - The buffer to detect the first chunk in.\n *\n * @returns The first detected chunk, or `undefined` if no chunk was detected.\n */\nexport type ChunkDetector = (buffer: string) => string | undefined | null;\n\n/**\n * Smooths text streaming output.\n *\n * @param delayInMs - The delay in milliseconds between each chunk. Defaults to 10ms. Can be set to `null` to skip the delay.\n * @param chunking - Controls how the text is chunked for streaming. Use \"word\" to stream word by word (default), \"line\" to stream line by line, or provide a custom RegExp pattern for custom chunking.\n *\n * @returns A transform stream that smooths text streaming output.\n */\nexport function smoothStream<TOOLS extends ToolSet>({\n  delayInMs = 10,\n  chunking = 'word',\n  _internal: { delay = originalDelay } = {},\n}: {\n  delayInMs?: number | null;\n  chunking?: 'word' | 'line' | RegExp | ChunkDetector;\n  /**\n   * Internal. For test use only. May change without notice.\n   */\n  _internal?: {\n    delay?: (delayInMs: number | null) => Promise<void>;\n  };\n} = {}): (options: {\n  tools: TOOLS;\n}) => TransformStream<TextStreamPart<TOOLS>, TextStreamPart<TOOLS>> {\n  let detectChunk: ChunkDetector;\n\n  if (typeof chunking === 'function') {\n    detectChunk = buffer => {\n      const match = chunking(buffer);\n\n      if (match == null) {\n        return null;\n      }\n\n      if (!match.length) {\n        throw new Error(`Chunking function must return a non-empty string.`);\n      }\n\n      if (!buffer.startsWith(match)) {\n        throw new Error(\n          `Chunking function must return a match that is a prefix of the buffer. Received: \"${match}\" expected to start with \"${buffer}\"`,\n        );\n      }\n\n      return match;\n    };\n  } else {\n    const chunkingRegex =\n      typeof chunking === 'string' ? CHUNKING_REGEXPS[chunking] : chunking;\n\n    if (chunkingRegex == null) {\n      throw new InvalidArgumentError({\n        argument: 'chunking',\n        message: `Chunking must be \"word\" or \"line\" or a RegExp. Received: ${chunking}`,\n      });\n    }\n\n    detectChunk = buffer => {\n      const match = chunkingRegex.exec(buffer);\n\n      if (!match) {\n        return null;\n      }\n\n      return buffer.slice(0, match.index) + match?.[0];\n    };\n  }\n\n  return () => {\n    let buffer = '';\n    let id = '';\n\n    return new TransformStream<TextStreamPart<TOOLS>, TextStreamPart<TOOLS>>({\n      async transform(chunk, controller) {\n        if (chunk.type !== 'text-delta') {\n          if (buffer.length > 0) {\n            controller.enqueue({ type: 'text-delta', text: buffer, id });\n            buffer = '';\n          }\n\n          controller.enqueue(chunk);\n          return;\n        }\n\n        if (chunk.id !== id && buffer.length > 0) {\n          controller.enqueue({ type: 'text-delta', text: buffer, id });\n          buffer = '';\n        }\n\n        buffer += chunk.text;\n        id = chunk.id;\n\n        let match;\n\n        while ((match = detectChunk(buffer)) != null) {\n          controller.enqueue({ type: 'text-delta', text: match, id });\n          buffer = buffer.slice(match.length);\n\n          await delay(delayInMs);\n        }\n      },\n    });\n  };\n}\n","import { LanguageModelV2CallOptions } from '@ai-sdk/provider';\nimport { LanguageModelMiddleware } from '../types';\nimport { mergeObjects } from '../util/merge-objects';\n\n/**\n * Applies default settings for a language model.\n */\nexport function defaultSettingsMiddleware({\n  settings,\n}: {\n  settings: Partial<{\n    maxOutputTokens?: LanguageModelV2CallOptions['maxOutputTokens'];\n    temperature?: LanguageModelV2CallOptions['temperature'];\n    stopSequences?: LanguageModelV2CallOptions['stopSequences'];\n    topP?: LanguageModelV2CallOptions['topP'];\n    topK?: LanguageModelV2CallOptions['topK'];\n    presencePenalty?: LanguageModelV2CallOptions['presencePenalty'];\n    frequencyPenalty?: LanguageModelV2CallOptions['frequencyPenalty'];\n    responseFormat?: LanguageModelV2CallOptions['responseFormat'];\n    seed?: LanguageModelV2CallOptions['seed'];\n    tools?: LanguageModelV2CallOptions['tools'];\n    toolChoice?: LanguageModelV2CallOptions['toolChoice'];\n    headers?: LanguageModelV2CallOptions['headers'];\n    providerOptions?: LanguageModelV2CallOptions['providerOptions'];\n  }>;\n}): LanguageModelMiddleware {\n  return {\n    middlewareVersion: 'v2',\n    transformParams: async ({ params }) => {\n      return mergeObjects(settings, params) as LanguageModelV2CallOptions;\n    },\n  };\n}\n","/**\n * Returns the index of the start of the searchedText in the text, or null if it\n * is not found.\n */\nexport function getPotentialStartIndex(\n  text: string,\n  searchedText: string,\n): number | null {\n  // Return null immediately if searchedText is empty.\n  if (searchedText.length === 0) {\n    return null;\n  }\n\n  // Check if the searchedText exists as a direct substring of text.\n  const directIndex = text.indexOf(searchedText);\n  if (directIndex !== -1) {\n    return directIndex;\n  }\n\n  // Otherwise, look for the largest suffix of \"text\" that matches\n  // a prefix of \"searchedText\". We go from the end of text inward.\n  for (let i = text.length - 1; i >= 0; i--) {\n    const suffix = text.substring(i);\n    if (searchedText.startsWith(suffix)) {\n      return i;\n    }\n  }\n\n  return null;\n}\n","import type {\n  LanguageModelV2Content,\n  LanguageModelV2StreamPart,\n} from '@ai-sdk/provider';\nimport { LanguageModelMiddleware } from '../types/language-model-middleware';\nimport { getPotentialStartIndex } from '../util/get-potential-start-index';\n\n/**\n * Extract an XML-tagged reasoning section from the generated text and exposes it\n * as a `reasoning` property on the result.\n *\n * @param tagName - The name of the XML tag to extract reasoning from.\n * @param separator - The separator to use between reasoning and text sections.\n * @param startWithReasoning - Whether to start with reasoning tokens.\n */\nexport function extractReasoningMiddleware({\n  tagName,\n  separator = '\\n',\n  startWithReasoning = false,\n}: {\n  tagName: string;\n  separator?: string;\n  startWithReasoning?: boolean;\n}): LanguageModelMiddleware {\n  const openingTag = `<${tagName}>`;\n  const closingTag = `<\\/${tagName}>`;\n\n  return {\n    middlewareVersion: 'v2',\n    wrapGenerate: async ({ doGenerate }) => {\n      const { content, ...rest } = await doGenerate();\n\n      const transformedContent: LanguageModelV2Content[] = [];\n      for (const part of content) {\n        if (part.type !== 'text') {\n          transformedContent.push(part);\n          continue;\n        }\n\n        const text = startWithReasoning ? openingTag + part.text : part.text;\n\n        const regexp = new RegExp(`${openingTag}(.*?)${closingTag}`, 'gs');\n        const matches = Array.from(text.matchAll(regexp));\n\n        if (!matches.length) {\n          transformedContent.push(part);\n          continue;\n        }\n\n        const reasoningText = matches.map(match => match[1]).join(separator);\n\n        let textWithoutReasoning = text;\n        for (let i = matches.length - 1; i >= 0; i--) {\n          const match = matches[i];\n\n          const beforeMatch = textWithoutReasoning.slice(0, match.index);\n          const afterMatch = textWithoutReasoning.slice(\n            match.index! + match[0].length,\n          );\n\n          textWithoutReasoning =\n            beforeMatch +\n            (beforeMatch.length > 0 && afterMatch.length > 0 ? separator : '') +\n            afterMatch;\n        }\n\n        transformedContent.push({\n          type: 'reasoning',\n          text: reasoningText,\n        });\n\n        transformedContent.push({\n          type: 'text',\n          text: textWithoutReasoning,\n        });\n      }\n\n      return { content: transformedContent, ...rest };\n    },\n\n    wrapStream: async ({ doStream }) => {\n      const { stream, ...rest } = await doStream();\n\n      const reasoningExtractions: Record<\n        string,\n        {\n          isFirstReasoning: boolean;\n          isFirstText: boolean;\n          afterSwitch: boolean;\n          isReasoning: boolean;\n          buffer: string;\n          idCounter: number;\n          textId: string;\n        }\n      > = {};\n\n      let delayedTextStart: LanguageModelV2StreamPart | undefined;\n\n      return {\n        stream: stream.pipeThrough(\n          new TransformStream<\n            LanguageModelV2StreamPart,\n            LanguageModelV2StreamPart\n          >({\n            transform: (chunk, controller) => {\n              // do not send `text-start` before `reasoning-start`\n              // https://github.com/vercel/ai/issues/7774\n              if (chunk.type === 'text-start') {\n                delayedTextStart = chunk;\n                return;\n              }\n\n              if (chunk.type === 'text-end' && delayedTextStart) {\n                controller.enqueue(delayedTextStart);\n                delayedTextStart = undefined;\n              }\n\n              if (chunk.type !== 'text-delta') {\n                controller.enqueue(chunk);\n                return;\n              }\n\n              if (reasoningExtractions[chunk.id] == null) {\n                reasoningExtractions[chunk.id] = {\n                  isFirstReasoning: true,\n                  isFirstText: true,\n                  afterSwitch: false,\n                  isReasoning: startWithReasoning,\n                  buffer: '',\n                  idCounter: 0,\n                  textId: chunk.id,\n                };\n              }\n\n              const activeExtraction = reasoningExtractions[chunk.id];\n\n              activeExtraction.buffer += chunk.delta;\n\n              function publish(text: string) {\n                if (text.length > 0) {\n                  const prefix =\n                    activeExtraction.afterSwitch &&\n                    (activeExtraction.isReasoning\n                      ? !activeExtraction.isFirstReasoning\n                      : !activeExtraction.isFirstText)\n                      ? separator\n                      : '';\n\n                  if (\n                    activeExtraction.isReasoning &&\n                    (activeExtraction.afterSwitch ||\n                      activeExtraction.isFirstReasoning)\n                  ) {\n                    controller.enqueue({\n                      type: 'reasoning-start',\n                      id: `reasoning-${activeExtraction.idCounter}`,\n                    });\n                  }\n\n                  if (activeExtraction.isReasoning) {\n                    controller.enqueue({\n                      type: 'reasoning-delta',\n                      delta: prefix + text,\n                      id: `reasoning-${activeExtraction.idCounter}`,\n                    });\n                  } else {\n                    if (delayedTextStart) {\n                      controller.enqueue(delayedTextStart);\n                      delayedTextStart = undefined;\n                    }\n                    controller.enqueue({\n                      type: 'text-delta',\n                      delta: prefix + text,\n                      id: activeExtraction.textId,\n                    });\n                  }\n                  activeExtraction.afterSwitch = false;\n\n                  if (activeExtraction.isReasoning) {\n                    activeExtraction.isFirstReasoning = false;\n                  } else {\n                    activeExtraction.isFirstText = false;\n                  }\n                }\n              }\n\n              do {\n                const nextTag = activeExtraction.isReasoning\n                  ? closingTag\n                  : openingTag;\n\n                const startIndex = getPotentialStartIndex(\n                  activeExtraction.buffer,\n                  nextTag,\n                );\n\n                // no opening or closing tag found, publish the buffer\n                if (startIndex == null) {\n                  publish(activeExtraction.buffer);\n                  activeExtraction.buffer = '';\n                  break;\n                }\n\n                // publish text before the tag\n                publish(activeExtraction.buffer.slice(0, startIndex));\n\n                const foundFullMatch =\n                  startIndex + nextTag.length <= activeExtraction.buffer.length;\n\n                if (foundFullMatch) {\n                  activeExtraction.buffer = activeExtraction.buffer.slice(\n                    startIndex + nextTag.length,\n                  );\n\n                  // reasoning part finished:\n                  if (activeExtraction.isReasoning) {\n                    controller.enqueue({\n                      type: 'reasoning-end',\n                      id: `reasoning-${activeExtraction.idCounter++}`,\n                    });\n                  }\n\n                  activeExtraction.isReasoning = !activeExtraction.isReasoning;\n                  activeExtraction.afterSwitch = true;\n                } else {\n                  activeExtraction.buffer =\n                    activeExtraction.buffer.slice(startIndex);\n                  break;\n                }\n              } while (true);\n            },\n          }),\n        ),\n        ...rest,\n      };\n    },\n  };\n}\n","import type { LanguageModelV2StreamPart } from '@ai-sdk/provider';\nimport { LanguageModelMiddleware } from '../types';\n\n/**\n * Simulates streaming chunks with the response from a generate call.\n */\nexport function simulateStreamingMiddleware(): LanguageModelMiddleware {\n  return {\n    middlewareVersion: 'v2',\n    wrapStream: async ({ doGenerate }) => {\n      const result = await doGenerate();\n\n      let id = 0;\n\n      const simulatedStream = new ReadableStream<LanguageModelV2StreamPart>({\n        start(controller) {\n          controller.enqueue({\n            type: 'stream-start',\n            warnings: result.warnings,\n          });\n\n          controller.enqueue({ type: 'response-metadata', ...result.response });\n\n          for (const part of result.content) {\n            switch (part.type) {\n              case 'text': {\n                if (part.text.length > 0) {\n                  controller.enqueue({ type: 'text-start', id: String(id) });\n                  controller.enqueue({\n                    type: 'text-delta',\n                    id: String(id),\n                    delta: part.text,\n                  });\n                  controller.enqueue({ type: 'text-end', id: String(id) });\n                  id++;\n                }\n                break;\n              }\n              case 'reasoning': {\n                controller.enqueue({\n                  type: 'reasoning-start',\n                  id: String(id),\n                  providerMetadata: part.providerMetadata,\n                });\n                controller.enqueue({\n                  type: 'reasoning-delta',\n                  id: String(id),\n                  delta: part.text,\n                });\n                controller.enqueue({ type: 'reasoning-end', id: String(id) });\n                id++;\n                break;\n              }\n              default: {\n                controller.enqueue(part);\n                break;\n              }\n            }\n          }\n\n          controller.enqueue({\n            type: 'finish',\n            finishReason: result.finishReason,\n            usage: result.usage,\n            providerMetadata: result.providerMetadata,\n          });\n\n          controller.close();\n        },\n      });\n\n      return {\n        stream: simulatedStream,\n        request: result.request,\n        response: result.response,\n      };\n    },\n  };\n}\n","import { LanguageModelV2, LanguageModelV2CallOptions } from '@ai-sdk/provider';\nimport { LanguageModelMiddleware } from '../types';\nimport { asArray } from '../util/as-array';\n\n/**\n * Wraps a LanguageModelV2 instance with middleware functionality.\n * This function allows you to apply middleware to transform parameters,\n * wrap generate operations, and wrap stream operations of a language model.\n *\n * @param options - Configuration options for wrapping the language model.\n * @param options.model - The original LanguageModelV2 instance to be wrapped.\n * @param options.middleware - The middleware to be applied to the language model. When multiple middlewares are provided, the first middleware will transform the input first, and the last middleware will be wrapped directly around the model.\n * @param options.modelId - Optional custom model ID to override the original model's ID.\n * @param options.providerId - Optional custom provider ID to override the original model's provider ID.\n * @returns A new LanguageModelV2 instance with middleware applied.\n */\nexport const wrapLanguageModel = ({\n  model,\n  middleware: middlewareArg,\n  modelId,\n  providerId,\n}: {\n  model: LanguageModelV2;\n  middleware: LanguageModelMiddleware | LanguageModelMiddleware[];\n  modelId?: string;\n  providerId?: string;\n}): LanguageModelV2 => {\n  return asArray(middlewareArg)\n    .reverse()\n    .reduce((wrappedModel, middleware) => {\n      return doWrap({ model: wrappedModel, middleware, modelId, providerId });\n    }, model);\n};\n\nconst doWrap = ({\n  model,\n  middleware: {\n    transformParams,\n    wrapGenerate,\n    wrapStream,\n    overrideProvider,\n    overrideModelId,\n    overrideSupportedUrls,\n  },\n  modelId,\n  providerId,\n}: {\n  model: LanguageModelV2;\n  middleware: LanguageModelMiddleware;\n  modelId?: string;\n  providerId?: string;\n}): LanguageModelV2 => {\n  async function doTransform({\n    params,\n    type,\n  }: {\n    params: LanguageModelV2CallOptions;\n    type: 'generate' | 'stream';\n  }) {\n    return transformParams\n      ? await transformParams({ params, type, model })\n      : params;\n  }\n\n  return {\n    specificationVersion: 'v2',\n\n    provider: providerId ?? overrideProvider?.({ model }) ?? model.provider,\n    modelId: modelId ?? overrideModelId?.({ model }) ?? model.modelId,\n    supportedUrls: overrideSupportedUrls?.({ model }) ?? model.supportedUrls,\n\n    async doGenerate(\n      params: LanguageModelV2CallOptions,\n    ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n      const transformedParams = await doTransform({ params, type: 'generate' });\n      const doGenerate = async () => model.doGenerate(transformedParams);\n      const doStream = async () => model.doStream(transformedParams);\n      return wrapGenerate\n        ? wrapGenerate({\n            doGenerate,\n            doStream,\n            params: transformedParams,\n            model,\n          })\n        : doGenerate();\n    },\n\n    async doStream(\n      params: LanguageModelV2CallOptions,\n    ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n      const transformedParams = await doTransform({ params, type: 'stream' });\n      const doGenerate = async () => model.doGenerate(transformedParams);\n      const doStream = async () => model.doStream(transformedParams);\n      return wrapStream\n        ? wrapStream({ doGenerate, doStream, params: transformedParams, model })\n        : doStream();\n    },\n  };\n};\n","import type { ProviderV2 } from '@ai-sdk/provider';\nimport { LanguageModelMiddleware } from '../types/language-model-middleware';\nimport { wrapLanguageModel } from './wrap-language-model';\n\n/**\n * Wraps a ProviderV2 instance with middleware functionality.\n * This function allows you to apply middleware to all language models\n * from the provider, enabling you to transform parameters, wrap generate\n * operations, and wrap stream operations for every language model.\n *\n * @param options - Configuration options for wrapping the provider.\n * @param options.provider - The original ProviderV2 instance to be wrapped.\n * @param options.languageModelMiddleware - The middleware to be applied to all language models from the provider. When multiple middlewares are provided, the first middleware will transform the input first, and the last middleware will be wrapped directly around the model.\n * @returns A new ProviderV2 instance with middleware applied to all language models.\n */\nexport function wrapProvider({\n  provider,\n  languageModelMiddleware,\n}: {\n  provider: ProviderV2;\n  languageModelMiddleware: LanguageModelMiddleware | LanguageModelMiddleware[];\n}): ProviderV2 {\n  const wrappedProvider = {\n    languageModel(modelId: string) {\n      let model = provider.languageModel(modelId);\n      model = wrapLanguageModel({\n        model,\n        middleware: languageModelMiddleware,\n      });\n      return model;\n    },\n    textEmbeddingModel: provider.textEmbeddingModel,\n    imageModel: provider.imageModel,\n    transcriptionModel: provider.transcriptionModel,\n    speechModel: provider.speechModel,\n  };\n\n  return wrappedProvider;\n}\n","import {\n  EmbeddingModelV2,\n  ImageModelV2,\n  LanguageModelV2,\n  NoSuchModelError,\n  ProviderV2,\n  SpeechModelV2,\n  TranscriptionModelV2,\n} from '@ai-sdk/provider';\n\n/**\n * Creates a custom provider with specified language models, text embedding models, image models, transcription models, speech models, and an optional fallback provider.\n *\n * @param {Object} options - The options for creating the custom provider.\n * @param {Record<string, LanguageModel>} [options.languageModels] - A record of language models, where keys are model IDs and values are LanguageModel instances.\n * @param {Record<string, EmbeddingModel<string>>} [options.textEmbeddingModels] - A record of text embedding models, where keys are model IDs and values are EmbeddingModel<string> instances.\n * @param {Record<string, ImageModel>} [options.imageModels] - A record of image models, where keys are model IDs and values are ImageModel instances.\n * @param {Record<string, TranscriptionModel>} [options.transcriptionModels] - A record of transcription models, where keys are model IDs and values are TranscriptionModel instances.\n * @param {Record<string, SpeechModel>} [options.speechModels] - A record of speech models, where keys are model IDs and values are SpeechModel instances.\n * @param {Provider} [options.fallbackProvider] - An optional fallback provider to use when a requested model is not found in the custom provider.\n * @returns {Provider} A Provider object with languageModel, textEmbeddingModel, imageModel, transcriptionModel, and speechModel methods.\n *\n * @throws {NoSuchModelError} Throws when a requested model is not found and no fallback provider is available.\n */\nexport function customProvider<\n  LANGUAGE_MODELS extends Record<string, LanguageModelV2>,\n  EMBEDDING_MODELS extends Record<string, EmbeddingModelV2<string>>,\n  IMAGE_MODELS extends Record<string, ImageModelV2>,\n  TRANSCRIPTION_MODELS extends Record<string, TranscriptionModelV2>,\n  SPEECH_MODELS extends Record<string, SpeechModelV2>,\n>({\n  languageModels,\n  textEmbeddingModels,\n  imageModels,\n  transcriptionModels,\n  speechModels,\n  fallbackProvider,\n}: {\n  languageModels?: LANGUAGE_MODELS;\n  textEmbeddingModels?: EMBEDDING_MODELS;\n  imageModels?: IMAGE_MODELS;\n  transcriptionModels?: TRANSCRIPTION_MODELS;\n  speechModels?: SPEECH_MODELS;\n  fallbackProvider?: ProviderV2;\n}): ProviderV2 & {\n  languageModel(modelId: ExtractModelId<LANGUAGE_MODELS>): LanguageModelV2;\n  textEmbeddingModel(\n    modelId: ExtractModelId<EMBEDDING_MODELS>,\n  ): EmbeddingModelV2<string>;\n  imageModel(modelId: ExtractModelId<IMAGE_MODELS>): ImageModelV2;\n  transcriptionModel(\n    modelId: ExtractModelId<TRANSCRIPTION_MODELS>,\n  ): TranscriptionModelV2;\n  speechModel(modelId: ExtractModelId<SPEECH_MODELS>): SpeechModelV2;\n} {\n  return {\n    languageModel(modelId: ExtractModelId<LANGUAGE_MODELS>): LanguageModelV2 {\n      if (languageModels != null && modelId in languageModels) {\n        return languageModels[modelId];\n      }\n\n      if (fallbackProvider) {\n        return fallbackProvider.languageModel(modelId);\n      }\n\n      throw new NoSuchModelError({ modelId, modelType: 'languageModel' });\n    },\n\n    textEmbeddingModel(\n      modelId: ExtractModelId<EMBEDDING_MODELS>,\n    ): EmbeddingModelV2<string> {\n      if (textEmbeddingModels != null && modelId in textEmbeddingModels) {\n        return textEmbeddingModels[modelId];\n      }\n\n      if (fallbackProvider) {\n        return fallbackProvider.textEmbeddingModel(modelId);\n      }\n\n      throw new NoSuchModelError({ modelId, modelType: 'textEmbeddingModel' });\n    },\n\n    imageModel(modelId: ExtractModelId<IMAGE_MODELS>): ImageModelV2 {\n      if (imageModels != null && modelId in imageModels) {\n        return imageModels[modelId];\n      }\n\n      if (fallbackProvider?.imageModel) {\n        return fallbackProvider.imageModel(modelId);\n      }\n\n      throw new NoSuchModelError({ modelId, modelType: 'imageModel' });\n    },\n\n    transcriptionModel(\n      modelId: ExtractModelId<TRANSCRIPTION_MODELS>,\n    ): TranscriptionModelV2 {\n      if (transcriptionModels != null && modelId in transcriptionModels) {\n        return transcriptionModels[modelId];\n      }\n\n      if (fallbackProvider?.transcriptionModel) {\n        return fallbackProvider.transcriptionModel(modelId);\n      }\n\n      throw new NoSuchModelError({ modelId, modelType: 'transcriptionModel' });\n    },\n\n    speechModel(modelId: ExtractModelId<SPEECH_MODELS>): SpeechModelV2 {\n      if (speechModels != null && modelId in speechModels) {\n        return speechModels[modelId];\n      }\n\n      if (fallbackProvider?.speechModel) {\n        return fallbackProvider.speechModel(modelId);\n      }\n\n      throw new NoSuchModelError({ modelId, modelType: 'speechModel' });\n    },\n  };\n}\n\n/**\n * @deprecated Use `customProvider` instead.\n */\nexport const experimental_customProvider = customProvider;\n\ntype ExtractModelId<MODELS extends Record<string, unknown>> = Extract<\n  keyof MODELS,\n  string\n>;\n","import { AISDKError, NoSuchModelError } from '@ai-sdk/provider';\n\nconst name = 'AI_NoSuchProviderError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class NoSuchProviderError extends NoSuchModelError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly providerId: string;\n  readonly availableProviders: string[];\n\n  constructor({\n    modelId,\n    modelType,\n    providerId,\n    availableProviders,\n    message = `No such provider: ${providerId} (available providers: ${availableProviders.join()})`,\n  }: {\n    modelId: string;\n    modelType:\n      | 'languageModel'\n      | 'textEmbeddingModel'\n      | 'imageModel'\n      | 'transcriptionModel'\n      | 'speechModel';\n    providerId: string;\n    availableProviders: string[];\n    message?: string;\n  }) {\n    super({ errorName: name, modelId, modelType, message });\n\n    this.providerId = providerId;\n    this.availableProviders = availableProviders;\n  }\n\n  static isInstance(error: unknown): error is NoSuchProviderError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import {\n  EmbeddingModelV2,\n  ImageModelV2,\n  LanguageModelV2,\n  NoSuchModelError,\n  ProviderV2,\n  SpeechModelV2,\n  TranscriptionModelV2,\n} from '@ai-sdk/provider';\nimport { wrapLanguageModel } from '../middleware/wrap-language-model';\nimport { LanguageModelMiddleware } from '../types';\nimport { NoSuchProviderError } from './no-such-provider-error';\n\ntype ExtractLiteralUnion<T> = T extends string\n  ? string extends T\n    ? never\n    : T\n  : never;\n\nexport interface ProviderRegistryProvider<\n  PROVIDERS extends Record<string, ProviderV2> = Record<string, ProviderV2>,\n  SEPARATOR extends string = ':',\n> {\n  languageModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string\n      ? `${KEY & string}${SEPARATOR}${ExtractLiteralUnion<Parameters<NonNullable<PROVIDERS[KEY]['languageModel']>>[0]>}`\n      : never,\n  ): LanguageModelV2;\n  languageModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string ? `${KEY & string}${SEPARATOR}${string}` : never,\n  ): LanguageModelV2;\n\n  textEmbeddingModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string\n      ? `${KEY & string}${SEPARATOR}${ExtractLiteralUnion<Parameters<NonNullable<PROVIDERS[KEY]['textEmbeddingModel']>>[0]>}`\n      : never,\n  ): EmbeddingModelV2<string>;\n  textEmbeddingModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string ? `${KEY & string}${SEPARATOR}${string}` : never,\n  ): EmbeddingModelV2<string>;\n\n  imageModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string\n      ? `${KEY & string}${SEPARATOR}${ExtractLiteralUnion<Parameters<NonNullable<PROVIDERS[KEY]['imageModel']>>[0]>}`\n      : never,\n  ): ImageModelV2;\n  imageModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string ? `${KEY & string}${SEPARATOR}${string}` : never,\n  ): ImageModelV2;\n\n  transcriptionModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string\n      ? `${KEY & string}${SEPARATOR}${ExtractLiteralUnion<Parameters<NonNullable<PROVIDERS[KEY]['transcriptionModel']>>[0]>}`\n      : never,\n  ): TranscriptionModelV2;\n  transcriptionModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string ? `${KEY & string}${SEPARATOR}${string}` : never,\n  ): TranscriptionModelV2;\n\n  speechModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string\n      ? `${KEY & string}${SEPARATOR}${ExtractLiteralUnion<Parameters<NonNullable<PROVIDERS[KEY]['speechModel']>>[0]>}`\n      : never,\n  ): SpeechModelV2;\n  speechModel<KEY extends keyof PROVIDERS>(\n    id: KEY extends string ? `${KEY & string}${SEPARATOR}${string}` : never,\n  ): SpeechModelV2;\n}\n\n/**\n * Creates a registry for the given providers with optional middleware functionality.\n * This function allows you to register multiple providers and optionally apply middleware\n * to all language models from the registry, enabling you to transform parameters, wrap generate\n * operations, and wrap stream operations for every language model accessed through the registry.\n *\n * @param providers - A record of provider instances to be registered in the registry.\n * @param options - Configuration options for the provider registry.\n * @param options.separator - The separator used between provider ID and model ID in the combined identifier. Defaults to ':'.\n * @param options.languageModelMiddleware - Optional middleware to be applied to all language models from the registry. When multiple middlewares are provided, the first middleware will transform the input first, and the last middleware will be wrapped directly around the model.\n * @returns A new ProviderRegistryProvider instance that provides access to all registered providers with optional middleware applied to language models.\n */\nexport function createProviderRegistry<\n  PROVIDERS extends Record<string, ProviderV2>,\n  SEPARATOR extends string = ':',\n>(\n  providers: PROVIDERS,\n  {\n    separator = ':' as SEPARATOR,\n    languageModelMiddleware,\n  }: {\n    separator?: SEPARATOR;\n    languageModelMiddleware?:\n      | LanguageModelMiddleware\n      | LanguageModelMiddleware[];\n  } = {},\n): ProviderRegistryProvider<PROVIDERS, SEPARATOR> {\n  const registry = new DefaultProviderRegistry<PROVIDERS, SEPARATOR>({\n    separator,\n    languageModelMiddleware,\n  });\n\n  for (const [id, provider] of Object.entries(providers)) {\n    registry.registerProvider({ id, provider } as {\n      id: keyof PROVIDERS;\n      provider: PROVIDERS[keyof PROVIDERS];\n    });\n  }\n\n  return registry;\n}\n\n/**\n * @deprecated Use `createProviderRegistry` instead.\n */\nexport const experimental_createProviderRegistry = createProviderRegistry;\n\nclass DefaultProviderRegistry<\n  PROVIDERS extends Record<string, ProviderV2>,\n  SEPARATOR extends string,\n> implements ProviderRegistryProvider<PROVIDERS, SEPARATOR>\n{\n  private providers: PROVIDERS = {} as PROVIDERS;\n  private separator: SEPARATOR;\n  private languageModelMiddleware?:\n    | LanguageModelMiddleware\n    | LanguageModelMiddleware[];\n\n  constructor({\n    separator,\n    languageModelMiddleware,\n  }: {\n    separator: SEPARATOR;\n    languageModelMiddleware?:\n      | LanguageModelMiddleware\n      | LanguageModelMiddleware[];\n  }) {\n    this.separator = separator;\n    this.languageModelMiddleware = languageModelMiddleware;\n  }\n\n  registerProvider<K extends keyof PROVIDERS>({\n    id,\n    provider,\n  }: {\n    id: K;\n    provider: PROVIDERS[K];\n  }): void {\n    this.providers[id] = provider;\n  }\n\n  private getProvider(\n    id: string,\n    modelType:\n      | 'languageModel'\n      | 'textEmbeddingModel'\n      | 'imageModel'\n      | 'transcriptionModel'\n      | 'speechModel',\n  ): ProviderV2 {\n    const provider = this.providers[id as keyof PROVIDERS];\n\n    if (provider == null) {\n      throw new NoSuchProviderError({\n        modelId: id,\n        modelType,\n        providerId: id,\n        availableProviders: Object.keys(this.providers),\n      });\n    }\n\n    return provider;\n  }\n\n  private splitId(\n    id: string,\n    modelType:\n      | 'languageModel'\n      | 'textEmbeddingModel'\n      | 'imageModel'\n      | 'transcriptionModel'\n      | 'speechModel',\n  ): [string, string] {\n    const index = id.indexOf(this.separator);\n\n    if (index === -1) {\n      throw new NoSuchModelError({\n        modelId: id,\n        modelType,\n        message:\n          `Invalid ${modelType} id for registry: ${id} ` +\n          `(must be in the format \"providerId${this.separator}modelId\")`,\n      });\n    }\n\n    return [id.slice(0, index), id.slice(index + this.separator.length)];\n  }\n\n  languageModel<KEY extends keyof PROVIDERS>(\n    id: `${KEY & string}${SEPARATOR}${string}`,\n  ): LanguageModelV2 {\n    const [providerId, modelId] = this.splitId(id, 'languageModel');\n    let model = this.getProvider(providerId, 'languageModel').languageModel?.(\n      modelId,\n    );\n\n    if (model == null) {\n      throw new NoSuchModelError({ modelId: id, modelType: 'languageModel' });\n    }\n\n    if (this.languageModelMiddleware != null) {\n      model = wrapLanguageModel({\n        model,\n        middleware: this.languageModelMiddleware,\n      });\n    }\n\n    return model;\n  }\n\n  textEmbeddingModel<KEY extends keyof PROVIDERS>(\n    id: `${KEY & string}${SEPARATOR}${string}`,\n  ): EmbeddingModelV2<string> {\n    const [providerId, modelId] = this.splitId(id, 'textEmbeddingModel');\n    const provider = this.getProvider(providerId, 'textEmbeddingModel');\n\n    const model = provider.textEmbeddingModel?.(modelId);\n\n    if (model == null) {\n      throw new NoSuchModelError({\n        modelId: id,\n        modelType: 'textEmbeddingModel',\n      });\n    }\n\n    return model;\n  }\n\n  imageModel<KEY extends keyof PROVIDERS>(\n    id: `${KEY & string}${SEPARATOR}${string}`,\n  ): ImageModelV2 {\n    const [providerId, modelId] = this.splitId(id, 'imageModel');\n    const provider = this.getProvider(providerId, 'imageModel');\n\n    const model = provider.imageModel?.(modelId);\n\n    if (model == null) {\n      throw new NoSuchModelError({ modelId: id, modelType: 'imageModel' });\n    }\n\n    return model;\n  }\n\n  transcriptionModel<KEY extends keyof PROVIDERS>(\n    id: `${KEY & string}${SEPARATOR}${string}`,\n  ): TranscriptionModelV2 {\n    const [providerId, modelId] = this.splitId(id, 'transcriptionModel');\n    const provider = this.getProvider(providerId, 'transcriptionModel');\n\n    const model = provider.transcriptionModel?.(modelId);\n\n    if (model == null) {\n      throw new NoSuchModelError({\n        modelId: id,\n        modelType: 'transcriptionModel',\n      });\n    }\n\n    return model;\n  }\n\n  speechModel<KEY extends keyof PROVIDERS>(\n    id: `${KEY & string}${SEPARATOR}${string}`,\n  ): SpeechModelV2 {\n    const [providerId, modelId] = this.splitId(id, 'speechModel');\n    const provider = this.getProvider(providerId, 'speechModel');\n\n    const model = provider.speechModel?.(modelId);\n\n    if (model == null) {\n      throw new NoSuchModelError({ modelId: id, modelType: 'speechModel' });\n    }\n\n    return model;\n  }\n}\n","import { JSONSchema7 } from '@ai-sdk/provider';\nimport {\n  dynamicTool,\n  jsonSchema,\n  Tool,\n  tool,\n  ToolCallOptions,\n} from '@ai-sdk/provider-utils';\nimport { z, ZodType } from 'zod/v4';\nimport { MCPClientError } from '../../error/mcp-client-error';\nimport {\n  JSONRPCError,\n  JSONRPCNotification,\n  JSONRPCRequest,\n  JSONRPCResponse,\n} from './json-rpc-message';\nimport {\n  createMcpTransport,\n  isCustomMcpTransport,\n  MCPTransport,\n  MCPTransportConfig,\n} from './mcp-transport';\nimport {\n  CallToolResult,\n  CallToolResultSchema,\n  Configuration as ClientConfiguration,\n  InitializeResultSchema,\n  LATEST_PROTOCOL_VERSION,\n  ListToolsResult,\n  ListToolsResultSchema,\n  McpToolSet,\n  Notification,\n  PaginatedRequest,\n  Request,\n  RequestOptions,\n  ServerCapabilities,\n  SUPPORTED_PROTOCOL_VERSIONS,\n  ToolSchemas,\n} from './types';\n\nconst CLIENT_VERSION = '1.0.0';\n\nexport interface MCPClientConfig {\n  /** Transport configuration for connecting to the MCP server */\n  transport: MCPTransportConfig | MCPTransport;\n  /** Optional callback for uncaught errors */\n  onUncaughtError?: (error: unknown) => void;\n  /** Optional client name, defaults to 'ai-sdk-mcp-client' */\n  name?: string;\n}\n\nexport async function createMCPClient(\n  config: MCPClientConfig,\n): Promise<MCPClient> {\n  const client = new DefaultMCPClient(config);\n  await client.init();\n  return client;\n}\n\nexport interface MCPClient {\n  tools<TOOL_SCHEMAS extends ToolSchemas = 'automatic'>(options?: {\n    schemas?: TOOL_SCHEMAS;\n  }): Promise<McpToolSet<TOOL_SCHEMAS>>;\n\n  close: () => Promise<void>;\n}\n\n/**\n * A lightweight MCP Client implementation\n *\n * The primary purpose of this client is tool conversion between MCP<>AI SDK\n * but can later be extended to support other MCP features\n *\n * Tool parameters are automatically inferred from the server's JSON schema\n * if not explicitly provided in the tools configuration\n *\n * This client is meant to be used to communicate with a single server. To communicate and fetch tools across multiple servers, it's recommended to create a new client instance per server.\n *\n * Not supported:\n * - Client options (e.g. sampling, roots) as they are not needed for tool conversion\n * - Accepting notifications\n * - Session management (when passing a sessionId to an instance of the Streamable HTTP transport)\n * - Resumable SSE streams\n */\nclass DefaultMCPClient implements MCPClient {\n  private transport: MCPTransport;\n  private onUncaughtError?: (error: unknown) => void;\n  private clientInfo: ClientConfiguration;\n  private requestMessageId = 0;\n  private responseHandlers: Map<\n    number,\n    (response: JSONRPCResponse | Error) => void\n  > = new Map();\n  private serverCapabilities: ServerCapabilities = {};\n  private isClosed = true;\n\n  constructor({\n    transport: transportConfig,\n    name = 'ai-sdk-mcp-client',\n    onUncaughtError,\n  }: MCPClientConfig) {\n    this.onUncaughtError = onUncaughtError;\n\n    if (isCustomMcpTransport(transportConfig)) {\n      this.transport = transportConfig;\n    } else {\n      this.transport = createMcpTransport(transportConfig);\n    }\n\n    this.transport.onclose = () => this.onClose();\n    this.transport.onerror = (error: Error) => this.onError(error);\n    this.transport.onmessage = message => {\n      if ('method' in message) {\n        // This lightweight client implementation does not support\n        // receiving notifications or requests from server.\n        // If we get an unsupported message, we can safely ignore it and pass to the onError handler:\n        this.onError(\n          new MCPClientError({\n            message: 'Unsupported message type',\n          }),\n        );\n        return;\n      }\n\n      this.onResponse(message);\n    };\n\n    this.clientInfo = {\n      name,\n      version: CLIENT_VERSION,\n    };\n  }\n\n  async init(): Promise<this> {\n    try {\n      await this.transport.start();\n      this.isClosed = false;\n\n      const result = await this.request({\n        request: {\n          method: 'initialize',\n          params: {\n            protocolVersion: LATEST_PROTOCOL_VERSION,\n            capabilities: {},\n            clientInfo: this.clientInfo,\n          },\n        },\n        resultSchema: InitializeResultSchema,\n      });\n\n      if (result === undefined) {\n        throw new MCPClientError({\n          message: 'Server sent invalid initialize result',\n        });\n      }\n\n      if (!SUPPORTED_PROTOCOL_VERSIONS.includes(result.protocolVersion)) {\n        throw new MCPClientError({\n          message: `Server's protocol version is not supported: ${result.protocolVersion}`,\n        });\n      }\n\n      this.serverCapabilities = result.capabilities;\n\n      // Complete initialization handshake:\n      await this.notification({\n        method: 'notifications/initialized',\n      });\n\n      return this;\n    } catch (error) {\n      await this.close();\n      throw error;\n    }\n  }\n\n  async close(): Promise<void> {\n    if (this.isClosed) return;\n    await this.transport?.close();\n    this.onClose();\n  }\n\n  private assertCapability(method: string): void {\n    switch (method) {\n      case 'initialize':\n        break;\n      case 'tools/list':\n      case 'tools/call':\n        if (!this.serverCapabilities.tools) {\n          throw new MCPClientError({\n            message: `Server does not support tools`,\n          });\n        }\n        break;\n      default:\n        throw new MCPClientError({\n          message: `Unsupported method: ${method}`,\n        });\n    }\n  }\n\n  private async request<T extends ZodType<object>>({\n    request,\n    resultSchema,\n    options,\n  }: {\n    request: Request;\n    resultSchema: T;\n    options?: RequestOptions;\n  }): Promise<z.infer<T>> {\n    return new Promise((resolve, reject) => {\n      if (this.isClosed) {\n        return reject(\n          new MCPClientError({\n            message: 'Attempted to send a request from a closed client',\n          }),\n        );\n      }\n\n      this.assertCapability(request.method);\n\n      const signal = options?.signal;\n      signal?.throwIfAborted();\n\n      const messageId = this.requestMessageId++;\n      const jsonrpcRequest: JSONRPCRequest = {\n        ...request,\n        jsonrpc: '2.0',\n        id: messageId,\n      };\n\n      const cleanup = () => {\n        this.responseHandlers.delete(messageId);\n      };\n\n      this.responseHandlers.set(messageId, response => {\n        if (signal?.aborted) {\n          return reject(\n            new MCPClientError({\n              message: 'Request was aborted',\n              cause: signal.reason,\n            }),\n          );\n        }\n\n        if (response instanceof Error) {\n          return reject(response);\n        }\n\n        try {\n          const result = resultSchema.parse(response.result);\n          resolve(result);\n        } catch (error) {\n          const parseError = new MCPClientError({\n            message: 'Failed to parse server response',\n            cause: error,\n          });\n          reject(parseError);\n        }\n      });\n\n      this.transport.send(jsonrpcRequest).catch(error => {\n        cleanup();\n        reject(error);\n      });\n    });\n  }\n\n  private async listTools({\n    params,\n    options,\n  }: {\n    params?: PaginatedRequest['params'];\n    options?: RequestOptions;\n  } = {}): Promise<ListToolsResult> {\n    try {\n      return this.request({\n        request: { method: 'tools/list', params },\n        resultSchema: ListToolsResultSchema,\n        options,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async callTool({\n    name,\n    args,\n    options,\n  }: {\n    name: string;\n    args: Record<string, unknown>;\n    options?: ToolCallOptions;\n  }): Promise<CallToolResult> {\n    try {\n      return this.request({\n        request: { method: 'tools/call', params: { name, arguments: args } },\n        resultSchema: CallToolResultSchema,\n        options: {\n          signal: options?.abortSignal,\n        },\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private async notification(notification: Notification): Promise<void> {\n    const jsonrpcNotification: JSONRPCNotification = {\n      ...notification,\n      jsonrpc: '2.0',\n    };\n    await this.transport.send(jsonrpcNotification);\n  }\n\n  /**\n   * Returns a set of AI SDK tools from the MCP server\n   * @returns A record of tool names to their implementations\n   */\n  async tools<TOOL_SCHEMAS extends ToolSchemas = 'automatic'>({\n    schemas = 'automatic',\n  }: {\n    schemas?: TOOL_SCHEMAS;\n  } = {}): Promise<McpToolSet<TOOL_SCHEMAS>> {\n    const tools: Record<string, Tool> = {};\n\n    try {\n      const listToolsResult = await this.listTools();\n\n      for (const { name, description, inputSchema } of listToolsResult.tools) {\n        if (schemas !== 'automatic' && !(name in schemas)) {\n          continue;\n        }\n\n        const self = this;\n\n        const execute = async (\n          args: any,\n          options: ToolCallOptions,\n        ): Promise<CallToolResult> => {\n          options?.abortSignal?.throwIfAborted();\n          return self.callTool({ name, args, options });\n        };\n\n        const toolWithExecute =\n          schemas === 'automatic'\n            ? dynamicTool({\n                description,\n                inputSchema: jsonSchema({\n                  ...inputSchema,\n                  properties: inputSchema.properties ?? {},\n                  additionalProperties: false,\n                } as JSONSchema7),\n                execute,\n              })\n            : tool({\n                description,\n                inputSchema: schemas[name].inputSchema,\n                execute,\n              });\n\n        tools[name] = toolWithExecute;\n      }\n\n      return tools as McpToolSet<TOOL_SCHEMAS>;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private onClose(): void {\n    if (this.isClosed) return;\n\n    this.isClosed = true;\n    const error = new MCPClientError({\n      message: 'Connection closed',\n    });\n\n    for (const handler of this.responseHandlers.values()) {\n      handler(error);\n    }\n\n    this.responseHandlers.clear();\n  }\n\n  private onError(error: unknown): void {\n    if (this.onUncaughtError) {\n      this.onUncaughtError(error);\n    }\n  }\n\n  private onResponse(response: JSONRPCResponse | JSONRPCError): void {\n    const messageId = Number(response.id);\n    const handler = this.responseHandlers.get(messageId);\n\n    if (handler === undefined) {\n      throw new MCPClientError({\n        message: `Protocol error: Received a response for an unknown message ID: ${JSON.stringify(\n          response,\n        )}`,\n      });\n    }\n\n    this.responseHandlers.delete(messageId);\n\n    handler(\n      'result' in response\n        ? response\n        : new MCPClientError({\n            message: response.error.message,\n            cause: response.error,\n          }),\n    );\n  }\n}\n","import { EventSourceParserStream } from '@ai-sdk/provider-utils';\nimport { MCPClientError } from '../../error/mcp-client-error';\nimport { JSONRPCMessage, JSONRPCMessageSchema } from './json-rpc-message';\nimport { MCPTransport } from './mcp-transport';\n\nexport class SseMCPTransport implements MCPTransport {\n  private endpoint?: URL;\n  private abortController?: AbortController;\n  private url: URL;\n  private connected = false;\n  private sseConnection?: {\n    close: () => void;\n  };\n  private headers?: Record<string, string>;\n\n  onclose?: () => void;\n  onerror?: (error: unknown) => void;\n  onmessage?: (message: JSONRPCMessage) => void;\n\n  constructor({\n    url,\n    headers,\n  }: {\n    url: string;\n    headers?: Record<string, string>;\n  }) {\n    this.url = new URL(url);\n    this.headers = headers;\n  }\n\n  async start(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (this.connected) {\n        return resolve();\n      }\n\n      this.abortController = new AbortController();\n\n      const establishConnection = async () => {\n        try {\n          const headers = new Headers(this.headers);\n          headers.set('Accept', 'text/event-stream');\n          const response = await fetch(this.url.href, {\n            headers,\n            signal: this.abortController?.signal,\n          });\n\n          if (!response.ok || !response.body) {\n            const error = new MCPClientError({\n              message: `MCP SSE Transport Error: ${response.status} ${response.statusText}`,\n            });\n            this.onerror?.(error);\n            return reject(error);\n          }\n\n          const stream = response.body\n            .pipeThrough(new TextDecoderStream())\n            .pipeThrough(new EventSourceParserStream());\n\n          const reader = stream.getReader();\n\n          const processEvents = async () => {\n            try {\n              while (true) {\n                const { done, value } = await reader.read();\n\n                if (done) {\n                  if (this.connected) {\n                    this.connected = false;\n                    throw new MCPClientError({\n                      message:\n                        'MCP SSE Transport Error: Connection closed unexpectedly',\n                    });\n                  }\n                  return;\n                }\n\n                const { event, data } = value;\n\n                if (event === 'endpoint') {\n                  this.endpoint = new URL(data, this.url);\n\n                  if (this.endpoint.origin !== this.url.origin) {\n                    throw new MCPClientError({\n                      message: `MCP SSE Transport Error: Endpoint origin does not match connection origin: ${this.endpoint.origin}`,\n                    });\n                  }\n\n                  this.connected = true;\n                  resolve();\n                } else if (event === 'message') {\n                  try {\n                    const message = JSONRPCMessageSchema.parse(\n                      JSON.parse(data),\n                    );\n                    this.onmessage?.(message);\n                  } catch (error) {\n                    const e = new MCPClientError({\n                      message:\n                        'MCP SSE Transport Error: Failed to parse message',\n                      cause: error,\n                    });\n                    this.onerror?.(e);\n                    // We do not throw here so we continue processing events after reporting the error\n                  }\n                }\n              }\n            } catch (error) {\n              if (error instanceof Error && error.name === 'AbortError') {\n                return;\n              }\n\n              this.onerror?.(error);\n              reject(error);\n            }\n          };\n\n          this.sseConnection = {\n            close: () => reader.cancel(),\n          };\n\n          processEvents();\n        } catch (error) {\n          if (error instanceof Error && error.name === 'AbortError') {\n            return;\n          }\n\n          this.onerror?.(error);\n          reject(error);\n        }\n      };\n\n      establishConnection();\n    });\n  }\n\n  async close(): Promise<void> {\n    this.connected = false;\n    this.sseConnection?.close();\n    this.abortController?.abort();\n    this.onclose?.();\n  }\n\n  async send(message: JSONRPCMessage): Promise<void> {\n    if (!this.endpoint || !this.connected) {\n      throw new MCPClientError({\n        message: 'MCP SSE Transport Error: Not connected',\n      });\n    }\n\n    try {\n      const headers = new Headers(this.headers);\n      headers.set('Content-Type', 'application/json');\n      const init = {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(message),\n        signal: this.abortController?.signal,\n      };\n\n      const response = await fetch(this.endpoint, init);\n\n      if (!response.ok) {\n        const text = await response.text().catch(() => null);\n        const error = new MCPClientError({\n          message: `MCP SSE Transport Error: POSTing to endpoint (HTTP ${response.status}): ${text}`,\n        });\n        this.onerror?.(error);\n        return;\n      }\n    } catch (error) {\n      this.onerror?.(error);\n      return;\n    }\n  }\n}\n\nexport function deserializeMessage(line: string): JSONRPCMessage {\n  return JSONRPCMessageSchema.parse(JSON.parse(line));\n}\n","import { z } from 'zod/v4';\nimport { BaseParamsSchema, RequestSchema, ResultSchema } from './types';\n\nconst JSONRPC_VERSION = '2.0';\n\nconst JSONRPCRequestSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n    id: z.union([z.string(), z.number().int()]),\n  })\n  .merge(RequestSchema)\n  .strict();\n\nexport type JSONRPCRequest = z.infer<typeof JSONRPCRequestSchema>;\n\nconst JSONRPCResponseSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n    id: z.union([z.string(), z.number().int()]),\n    result: ResultSchema,\n  })\n  .strict();\n\nexport type JSONRPCResponse = z.infer<typeof JSONRPCResponseSchema>;\n\nconst JSONRPCErrorSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n    id: z.union([z.string(), z.number().int()]),\n    error: z.object({\n      code: z.number().int(),\n      message: z.string(),\n      data: z.optional(z.unknown()),\n    }),\n  })\n  .strict();\n\nexport type JSONRPCError = z.infer<typeof JSONRPCErrorSchema>;\n\nconst JSONRPCNotificationSchema = z\n  .object({\n    jsonrpc: z.literal(JSONRPC_VERSION),\n  })\n  .merge(\n    z.object({\n      method: z.string(),\n      params: z.optional(BaseParamsSchema),\n    }),\n  )\n  .strict();\n\nexport type JSONRPCNotification = z.infer<typeof JSONRPCNotificationSchema>;\n\nexport const JSONRPCMessageSchema = z.union([\n  JSONRPCRequestSchema,\n  JSONRPCNotificationSchema,\n  JSONRPCResponseSchema,\n  JSONRPCErrorSchema,\n]);\n\nexport type JSONRPCMessage = z.infer<typeof JSONRPCMessageSchema>;\n","import { z } from 'zod/v4';\nimport { JSONObject } from '@ai-sdk/provider';\nimport { FlexibleSchema, Tool } from '@ai-sdk/provider-utils';\n\nexport const LATEST_PROTOCOL_VERSION = '2025-06-18';\nexport const SUPPORTED_PROTOCOL_VERSIONS = [\n  LATEST_PROTOCOL_VERSION,\n  '2025-03-26',\n  '2024-11-05',\n];\n\nexport type ToolSchemas =\n  | Record<string, { inputSchema: FlexibleSchema<JSONObject | unknown> }>\n  | 'automatic'\n  | undefined;\n\nexport type McpToolSet<TOOL_SCHEMAS extends ToolSchemas = 'automatic'> =\n  TOOL_SCHEMAS extends Record<string, { inputSchema: FlexibleSchema<any> }>\n    ? {\n        [K in keyof TOOL_SCHEMAS]: TOOL_SCHEMAS[K] extends {\n          inputSchema: FlexibleSchema<infer INPUT>;\n        }\n          ? Tool<INPUT, CallToolResult> &\n              Required<Pick<Tool<INPUT, CallToolResult>, 'execute'>>\n          : never;\n      }\n    : McpToolSet<Record<string, { inputSchema: FlexibleSchema<unknown> }>>;\n\nconst ClientOrServerImplementationSchema = z.looseObject({\n  name: z.string(),\n  version: z.string(),\n});\n\nexport type Configuration = z.infer<typeof ClientOrServerImplementationSchema>;\n\nexport const BaseParamsSchema = z.looseObject({\n  _meta: z.optional(z.object({}).loose()),\n});\ntype BaseParams = z.infer<typeof BaseParamsSchema>;\nexport const ResultSchema = BaseParamsSchema;\n\nexport const RequestSchema = z.object({\n  method: z.string(),\n  params: z.optional(BaseParamsSchema),\n});\nexport type Request = z.infer<typeof RequestSchema>;\nexport type RequestOptions = {\n  signal?: AbortSignal;\n  timeout?: number;\n  maxTotalTimeout?: number;\n};\n\nexport type Notification = z.infer<typeof RequestSchema>;\n\nconst ServerCapabilitiesSchema = z.looseObject({\n  experimental: z.optional(z.object({}).loose()),\n  logging: z.optional(z.object({}).loose()),\n  prompts: z.optional(\n    z.looseObject({\n      listChanged: z.optional(z.boolean()),\n    }),\n  ),\n  resources: z.optional(\n    z.looseObject({\n      subscribe: z.optional(z.boolean()),\n      listChanged: z.optional(z.boolean()),\n    }),\n  ),\n  tools: z.optional(\n    z.looseObject({\n      listChanged: z.optional(z.boolean()),\n    }),\n  ),\n});\n\nexport type ServerCapabilities = z.infer<typeof ServerCapabilitiesSchema>;\n\nexport const InitializeResultSchema = ResultSchema.extend({\n  protocolVersion: z.string(),\n  capabilities: ServerCapabilitiesSchema,\n  serverInfo: ClientOrServerImplementationSchema,\n  instructions: z.optional(z.string()),\n});\nexport type InitializeResult = z.infer<typeof InitializeResultSchema>;\n\nexport type PaginatedRequest = Request & {\n  params?: BaseParams & {\n    cursor?: string;\n  };\n};\n\nconst PaginatedResultSchema = ResultSchema.extend({\n  nextCursor: z.optional(z.string()),\n});\n\nconst ToolSchema = z\n  .object({\n    name: z.string(),\n    description: z.optional(z.string()),\n    inputSchema: z\n      .object({\n        type: z.literal('object'),\n        properties: z.optional(z.object({}).loose()),\n      })\n      .loose(),\n  })\n  .loose();\nexport type MCPTool = z.infer<typeof ToolSchema>;\nexport const ListToolsResultSchema = PaginatedResultSchema.extend({\n  tools: z.array(ToolSchema),\n});\nexport type ListToolsResult = z.infer<typeof ListToolsResultSchema>;\n\nconst TextContentSchema = z\n  .object({\n    type: z.literal('text'),\n    text: z.string(),\n  })\n  .loose();\nconst ImageContentSchema = z\n  .object({\n    type: z.literal('image'),\n    data: z.base64(),\n    mimeType: z.string(),\n  })\n  .loose();\nconst ResourceContentsSchema = z\n  .object({\n    /**\n     * The URI of this resource.\n     */\n    uri: z.string(),\n    /**\n     * The MIME type of this resource, if known.\n     */\n    mimeType: z.optional(z.string()),\n  })\n  .loose();\nconst TextResourceContentsSchema = ResourceContentsSchema.extend({\n  text: z.string(),\n});\nconst BlobResourceContentsSchema = ResourceContentsSchema.extend({\n  blob: z.base64(),\n});\nconst EmbeddedResourceSchema = z\n  .object({\n    type: z.literal('resource'),\n    resource: z.union([TextResourceContentsSchema, BlobResourceContentsSchema]),\n  })\n  .loose();\n\nexport const CallToolResultSchema = ResultSchema.extend({\n  content: z.array(\n    z.union([TextContentSchema, ImageContentSchema, EmbeddedResourceSchema]),\n  ),\n  isError: z.boolean().default(false).optional(),\n}).or(\n  ResultSchema.extend({\n    toolResult: z.unknown(),\n  }),\n);\nexport type CallToolResult = z.infer<typeof CallToolResultSchema>;\n","import { MCPClientError } from '../../error/mcp-client-error';\nimport { JSONRPCMessage } from './json-rpc-message';\nimport { SseMCPTransport } from './mcp-sse-transport';\n\n/**\n * Transport interface for MCP (Model Context Protocol) communication.\n * Maps to the `Transport` interface in the MCP spec.\n */\nexport interface MCPTransport {\n  /**\n   * Initialize and start the transport\n   */\n  start(): Promise<void>;\n\n  /**\n   * Send a JSON-RPC message through the transport\n   * @param message The JSON-RPC message to send\n   */\n  send(message: JSONRPCMessage): Promise<void>;\n\n  /**\n   * Clean up and close the transport\n   */\n  close(): Promise<void>;\n\n  /**\n   * Event handler for transport closure\n   */\n  onclose?: () => void;\n\n  /**\n   * Event handler for transport errors\n   */\n  onerror?: (error: Error) => void;\n\n  /**\n   * Event handler for received messages\n   */\n  onmessage?: (message: JSONRPCMessage) => void;\n}\n\nexport type MCPTransportConfig = {\n  type: 'sse';\n\n  /**\n   * The URL of the MCP server.\n   */\n  url: string;\n\n  /**\n   * Additional HTTP headers to be sent with requests.\n   */\n  headers?: Record<string, string>;\n};\n\nexport function createMcpTransport(config: MCPTransportConfig): MCPTransport {\n  if (config.type !== 'sse') {\n    throw new MCPClientError({\n      message:\n        'Unsupported or invalid transport configuration. If you are using a custom transport, make sure it implements the MCPTransport interface.',\n    });\n  }\n\n  return new SseMCPTransport(config);\n}\n\nexport function isCustomMcpTransport(\n  transport: MCPTransportConfig | MCPTransport,\n): transport is MCPTransport {\n  return (\n    'start' in transport &&\n    typeof transport.start === 'function' &&\n    'send' in transport &&\n    typeof transport.send === 'function' &&\n    'close' in transport &&\n    typeof transport.close === 'function'\n  );\n}\n","import { AISDKError } from '@ai-sdk/provider';\nimport { TranscriptionModelResponseMetadata } from '../types/transcription-model-response-metadata';\n\n/**\nError that is thrown when no transcript was generated.\n */\nexport class NoTranscriptGeneratedError extends AISDKError {\n  readonly responses: Array<TranscriptionModelResponseMetadata>;\n\n  constructor(options: {\n    responses: Array<TranscriptionModelResponseMetadata>;\n  }) {\n    super({\n      name: 'AI_NoTranscriptGeneratedError',\n      message: 'No transcript generated.',\n    });\n\n    this.responses = options.responses;\n  }\n}\n","import { JSONValue, TranscriptionModelV2 } from '@ai-sdk/provider';\nimport { ProviderOptions } from '@ai-sdk/provider-utils';\nimport { NoTranscriptGeneratedError } from '../error/no-transcript-generated-error';\nimport {\n  audioMediaTypeSignatures,\n  detectMediaType,\n} from '../util/detect-media-type';\nimport { download } from '../util/download';\nimport { prepareRetries } from '../util/prepare-retries';\nimport { UnsupportedModelVersionError } from '../error/unsupported-model-version-error';\nimport { DataContent } from '../prompt';\nimport { convertDataContentToUint8Array } from '../prompt/data-content';\nimport { TranscriptionWarning } from '../types/transcription-model';\nimport { TranscriptionModelResponseMetadata } from '../types/transcription-model-response-metadata';\nimport { TranscriptionResult } from './transcribe-result';\n\n/**\nGenerates transcripts using a transcription model.\n\n@param model - The transcription model to use.\n@param audio - The audio data to transcribe as DataContent (string | Uint8Array | ArrayBuffer | Buffer) or a URL.\n@param providerOptions - Additional provider-specific options that are passed through to the provider\nas body parameters.\n@param maxRetries - Maximum number of retries. Set to 0 to disable retries. Default: 2.\n@param abortSignal - An optional abort signal that can be used to cancel the call.\n@param headers - Additional HTTP headers to be sent with the request. Only applicable for HTTP-based providers.\n\n@returns A result object that contains the generated transcript.\n */\nexport async function transcribe({\n  model,\n  audio,\n  providerOptions = {},\n  maxRetries: maxRetriesArg,\n  abortSignal,\n  headers,\n}: {\n  /**\nThe transcription model to use.\n     */\n  model: TranscriptionModelV2;\n\n  /**\nThe audio data to transcribe.\n   */\n  audio: DataContent | URL;\n\n  /**\nAdditional provider-specific options that are passed through to the provider\nas body parameters.\n\nThe outer record is keyed by the provider name, and the inner\nrecord is keyed by the provider-specific metadata key.\n```ts\n{\n  \"openai\": {\n    \"temperature\": 0\n  }\n}\n```\n     */\n  providerOptions?: ProviderOptions;\n\n  /**\nMaximum number of retries per transcript model call. Set to 0 to disable retries.\n\n@default 2\n   */\n  maxRetries?: number;\n\n  /**\nAbort signal.\n */\n  abortSignal?: AbortSignal;\n\n  /**\nAdditional headers to include in the request.\nOnly applicable for HTTP-based providers.\n */\n  headers?: Record<string, string>;\n}): Promise<TranscriptionResult> {\n  if (model.specificationVersion !== 'v2') {\n    throw new UnsupportedModelVersionError({\n      version: model.specificationVersion,\n      provider: model.provider,\n      modelId: model.modelId,\n    });\n  }\n\n  const { retry } = prepareRetries({\n    maxRetries: maxRetriesArg,\n    abortSignal,\n  });\n\n  const audioData =\n    audio instanceof URL\n      ? (await download({ url: audio })).data\n      : convertDataContentToUint8Array(audio);\n\n  const result = await retry(() =>\n    model.doGenerate({\n      audio: audioData,\n      abortSignal,\n      headers,\n      providerOptions,\n      mediaType:\n        detectMediaType({\n          data: audioData,\n          signatures: audioMediaTypeSignatures,\n        }) ?? 'audio/wav',\n    }),\n  );\n\n  if (!result.text) {\n    throw new NoTranscriptGeneratedError({ responses: [result.response] });\n  }\n\n  return new DefaultTranscriptionResult({\n    text: result.text,\n    segments: result.segments,\n    language: result.language,\n    durationInSeconds: result.durationInSeconds,\n    warnings: result.warnings,\n    responses: [result.response],\n    providerMetadata: result.providerMetadata,\n  });\n}\n\nclass DefaultTranscriptionResult implements TranscriptionResult {\n  readonly text: string;\n  readonly segments: Array<{\n    text: string;\n    startSecond: number;\n    endSecond: number;\n  }>;\n  readonly language: string | undefined;\n  readonly durationInSeconds: number | undefined;\n  readonly warnings: Array<TranscriptionWarning>;\n  readonly responses: Array<TranscriptionModelResponseMetadata>;\n  readonly providerMetadata: Record<string, Record<string, JSONValue>>;\n\n  constructor(options: {\n    text: string;\n    segments: Array<{\n      text: string;\n      startSecond: number;\n      endSecond: number;\n    }>;\n    language: string | undefined;\n    durationInSeconds: number | undefined;\n    warnings: Array<TranscriptionWarning>;\n    responses: Array<TranscriptionModelResponseMetadata>;\n    providerMetadata: Record<string, Record<string, JSONValue>> | undefined;\n  }) {\n    this.text = options.text;\n    this.segments = options.segments;\n    this.language = options.language;\n    this.durationInSeconds = options.durationInSeconds;\n    this.warnings = options.warnings;\n    this.responses = options.responses;\n    this.providerMetadata = options.providerMetadata ?? {};\n  }\n}\n","import { parseJsonEventStream, ParseResult } from '@ai-sdk/provider-utils';\nimport {\n  UIMessageChunk,\n  uiMessageChunkSchema,\n} from '../ui-message-stream/ui-message-chunks';\nimport { consumeStream } from '../util/consume-stream';\nimport { processTextStream } from './process-text-stream';\n\n// use function to allow for mocking in tests:\nconst getOriginalFetch = () => fetch;\n\nexport async function callCompletionApi({\n  api,\n  prompt,\n  credentials,\n  headers,\n  body,\n  streamProtocol = 'data',\n  setCompletion,\n  setLoading,\n  setError,\n  setAbortController,\n  onFinish,\n  onError,\n  fetch = getOriginalFetch(),\n}: {\n  api: string;\n  prompt: string;\n  credentials: RequestCredentials | undefined;\n  headers: HeadersInit | undefined;\n  body: Record<string, any>;\n  streamProtocol: 'data' | 'text' | undefined;\n  setCompletion: (completion: string) => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: Error | undefined) => void;\n  setAbortController: (abortController: AbortController | null) => void;\n  onFinish: ((prompt: string, completion: string) => void) | undefined;\n  onError: ((error: Error) => void) | undefined;\n  fetch: ReturnType<typeof getOriginalFetch> | undefined;\n}) {\n  try {\n    setLoading(true);\n    setError(undefined);\n\n    const abortController = new AbortController();\n    setAbortController(abortController);\n\n    // Empty the completion immediately.\n    setCompletion('');\n\n    const response = await fetch(api, {\n      method: 'POST',\n      body: JSON.stringify({\n        prompt,\n        ...body,\n      }),\n      credentials,\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n      signal: abortController.signal,\n    }).catch(err => {\n      throw err;\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        (await response.text()) ?? 'Failed to fetch the chat response.',\n      );\n    }\n\n    if (!response.body) {\n      throw new Error('The response body is empty.');\n    }\n\n    let result = '';\n\n    switch (streamProtocol) {\n      case 'text': {\n        await processTextStream({\n          stream: response.body,\n          onTextPart: chunk => {\n            result += chunk;\n            setCompletion(result);\n          },\n        });\n        break;\n      }\n      case 'data': {\n        await consumeStream({\n          stream: parseJsonEventStream({\n            stream: response.body,\n            schema: uiMessageChunkSchema,\n          }).pipeThrough(\n            new TransformStream<ParseResult<UIMessageChunk>, UIMessageChunk>({\n              async transform(part) {\n                if (!part.success) {\n                  throw part.error;\n                }\n\n                const streamPart = part.value;\n                if (streamPart.type === 'text-delta') {\n                  result += streamPart.delta;\n                  setCompletion(result);\n                } else if (streamPart.type === 'error') {\n                  throw new Error(streamPart.errorText);\n                }\n              },\n            }),\n          ),\n          onError: error => {\n            throw error;\n          },\n        });\n        break;\n      }\n      default: {\n        const exhaustiveCheck: never = streamProtocol;\n        throw new Error(`Unknown stream protocol: ${exhaustiveCheck}`);\n      }\n    }\n\n    if (onFinish) {\n      onFinish(prompt, result);\n    }\n\n    setAbortController(null);\n    return result;\n  } catch (err) {\n    // Ignore abort errors as they are expected.\n    if ((err as any).name === 'AbortError') {\n      setAbortController(null);\n      return null;\n    }\n\n    if (err instanceof Error) {\n      if (onError) {\n        onError(err);\n      }\n    }\n\n    setError(err as Error);\n  } finally {\n    setLoading(false);\n  }\n}\n","export async function processTextStream({\n  stream,\n  onTextPart,\n}: {\n  stream: ReadableStream<Uint8Array>;\n  onTextPart: (chunk: string) => Promise<void> | void;\n}): Promise<void> {\n  const reader = stream.pipeThrough(new TextDecoderStream()).getReader();\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) {\n      break;\n    }\n    await onTextPart(value);\n  }\n}\n","import {\n  generateId as generateIdFunc,\n  IdGenerator,\n  StandardSchemaV1,\n  Validator,\n} from '@ai-sdk/provider-utils';\nimport { UIMessageChunk } from '../ui-message-stream/ui-message-chunks';\nimport { consumeStream } from '../util/consume-stream';\nimport { SerialJobExecutor } from '../util/serial-job-executor';\nimport { ChatTransport } from './chat-transport';\nimport { convertFileListToFileUIParts } from './convert-file-list-to-file-ui-parts';\nimport { DefaultChatTransport } from './default-chat-transport';\nimport {\n  createStreamingUIMessageState,\n  processUIMessageStream,\n  StreamingUIMessageState,\n} from './process-ui-message-stream';\nimport {\n  InferUIMessageToolCall,\n  isToolUIPart,\n  type DataUIPart,\n  type FileUIPart,\n  type InferUIMessageData,\n  type InferUIMessageMetadata,\n  type InferUIMessageTools,\n  type UIDataTypes,\n  type UIMessage,\n} from './ui-messages';\n\nexport type CreateUIMessage<UI_MESSAGE extends UIMessage> = Omit<\n  UI_MESSAGE,\n  'id' | 'role'\n> & {\n  id?: UI_MESSAGE['id'];\n  role?: UI_MESSAGE['role'];\n};\n\nexport type UIDataPartSchemas = Record<\n  string,\n  Validator<any> | StandardSchemaV1<any>\n>;\n\nexport type UIDataTypesToSchemas<T extends UIDataTypes> = {\n  [K in keyof T]: Validator<T[K]> | StandardSchemaV1<T[K]>;\n};\n\nexport type InferUIDataParts<T extends UIDataPartSchemas> = {\n  [K in keyof T]: T[K] extends Validator<infer U>\n    ? U\n    : T[K] extends StandardSchemaV1<infer U>\n      ? U\n      : unknown;\n};\n\nexport type ChatRequestOptions = {\n  /**\n  Additional headers that should be to be passed to the API endpoint.\n   */\n  headers?: Record<string, string> | Headers;\n\n  /**\n  Additional body JSON properties that should be sent to the API endpoint.\n   */\n  body?: object; // TODO JSONStringifyable\n\n  metadata?: unknown;\n};\n\nexport type ChatStatus = 'submitted' | 'streaming' | 'ready' | 'error';\n\ntype ActiveResponse<UI_MESSAGE extends UIMessage> = {\n  state: StreamingUIMessageState<UI_MESSAGE>;\n  abortController: AbortController;\n};\n\nexport interface ChatState<UI_MESSAGE extends UIMessage> {\n  status: ChatStatus;\n\n  error: Error | undefined;\n\n  messages: UI_MESSAGE[];\n  pushMessage: (message: UI_MESSAGE) => void;\n  popMessage: () => void;\n  replaceMessage: (index: number, message: UI_MESSAGE) => void;\n\n  snapshot: <T>(thing: T) => T;\n}\n\nexport type ChatOnErrorCallback = (error: Error) => void;\n\nexport type ChatOnToolCallCallback<UI_MESSAGE extends UIMessage = UIMessage> =\n  (options: {\n    toolCall: InferUIMessageToolCall<UI_MESSAGE>;\n  }) => void | PromiseLike<void>;\n\nexport type ChatOnDataCallback<UI_MESSAGE extends UIMessage> = (\n  dataPart: DataUIPart<InferUIMessageData<UI_MESSAGE>>,\n) => void;\n\nexport type ChatOnFinishCallback<UI_MESSAGE extends UIMessage> = (options: {\n  message: UI_MESSAGE;\n}) => void;\n\nexport interface ChatInit<UI_MESSAGE extends UIMessage> {\n  /**\n   * A unique identifier for the chat. If not provided, a random one will be\n   * generated.\n   */\n  id?: string;\n\n  messageMetadataSchema?:\n    | Validator<InferUIMessageMetadata<UI_MESSAGE>>\n    | StandardSchemaV1<InferUIMessageMetadata<UI_MESSAGE>>;\n  dataPartSchemas?: UIDataTypesToSchemas<InferUIMessageData<UI_MESSAGE>>;\n\n  messages?: UI_MESSAGE[];\n\n  /**\n   * A way to provide a function that is going to be used for ids for messages and the chat.\n   * If not provided the default AI SDK `generateId` is used.\n   */\n  generateId?: IdGenerator;\n\n  transport?: ChatTransport<UI_MESSAGE>;\n\n  /**\n   * Callback function to be called when an error is encountered.\n   */\n  onError?: ChatOnErrorCallback;\n\n  /**\n  Optional callback function that is invoked when a tool call is received.\n  Intended for automatic client-side tool execution.\n\n  You can optionally return a result for the tool call,\n  either synchronously or asynchronously.\n     */\n  onToolCall?: ChatOnToolCallCallback<UI_MESSAGE>;\n\n  /**\n   * Optional callback function that is called when the assistant message is finished streaming.\n   *\n   * @param message The message that was streamed.\n   */\n  onFinish?: ChatOnFinishCallback<UI_MESSAGE>;\n\n  /**\n   * Optional callback function that is called when a data part is received.\n   *\n   * @param data The data part that was received.\n   */\n  onData?: ChatOnDataCallback<UI_MESSAGE>;\n\n  /**\n   * When provided, this function will be called when the stream is finished or a tool call is added\n   * to determine if the current messages should be resubmitted.\n   */\n  sendAutomaticallyWhen?: (options: {\n    messages: UI_MESSAGE[];\n  }) => boolean | PromiseLike<boolean>;\n}\n\nexport abstract class AbstractChat<UI_MESSAGE extends UIMessage> {\n  readonly id: string;\n  readonly generateId: IdGenerator;\n\n  protected state: ChatState<UI_MESSAGE>;\n\n  private messageMetadataSchema:\n    | Validator<InferUIMessageMetadata<UI_MESSAGE>>\n    | StandardSchemaV1<InferUIMessageMetadata<UI_MESSAGE>>\n    | undefined;\n  private dataPartSchemas:\n    | UIDataTypesToSchemas<InferUIMessageData<UI_MESSAGE>>\n    | undefined;\n  private readonly transport: ChatTransport<UI_MESSAGE>;\n  private onError?: ChatInit<UI_MESSAGE>['onError'];\n  private onToolCall?: ChatInit<UI_MESSAGE>['onToolCall'];\n  private onFinish?: ChatInit<UI_MESSAGE>['onFinish'];\n  private onData?: ChatInit<UI_MESSAGE>['onData'];\n  private sendAutomaticallyWhen?: ChatInit<UI_MESSAGE>['sendAutomaticallyWhen'];\n\n  private activeResponse: ActiveResponse<UI_MESSAGE> | undefined = undefined;\n  private jobExecutor = new SerialJobExecutor();\n\n  constructor({\n    generateId = generateIdFunc,\n    id = generateId(),\n    transport = new DefaultChatTransport(),\n    messageMetadataSchema,\n    dataPartSchemas,\n    state,\n    onError,\n    onToolCall,\n    onFinish,\n    onData,\n    sendAutomaticallyWhen,\n  }: Omit<ChatInit<UI_MESSAGE>, 'messages'> & {\n    state: ChatState<UI_MESSAGE>;\n  }) {\n    this.id = id;\n    this.transport = transport;\n    this.generateId = generateId;\n    this.messageMetadataSchema = messageMetadataSchema;\n    this.dataPartSchemas = dataPartSchemas;\n    this.state = state;\n    this.onError = onError;\n    this.onToolCall = onToolCall;\n    this.onFinish = onFinish;\n    this.onData = onData;\n    this.sendAutomaticallyWhen = sendAutomaticallyWhen;\n  }\n\n  /**\n   * Hook status:\n   *\n   * - `submitted`: The message has been sent to the API and we're awaiting the start of the response stream.\n   * - `streaming`: The response is actively streaming in from the API, receiving chunks of data.\n   * - `ready`: The full response has been received and processed; a new user message can be submitted.\n   * - `error`: An error occurred during the API request, preventing successful completion.\n   */\n  get status(): ChatStatus {\n    return this.state.status;\n  }\n\n  protected setStatus({\n    status,\n    error,\n  }: {\n    status: ChatStatus;\n    error?: Error;\n  }) {\n    if (this.status === status) return;\n\n    this.state.status = status;\n    this.state.error = error;\n  }\n\n  get error() {\n    return this.state.error;\n  }\n\n  get messages(): UI_MESSAGE[] {\n    return this.state.messages;\n  }\n\n  get lastMessage(): UI_MESSAGE | undefined {\n    return this.state.messages[this.state.messages.length - 1];\n  }\n\n  set messages(messages: UI_MESSAGE[]) {\n    this.state.messages = messages;\n  }\n\n  /**\n   * Appends or replaces a user message to the chat list. This triggers the API call to fetch\n   * the assistant's response.\n   *\n   * If a messageId is provided, the message will be replaced.\n   */\n  sendMessage = async (\n    message?:\n      | (CreateUIMessage<UI_MESSAGE> & {\n          text?: never;\n          files?: never;\n          messageId?: string;\n        })\n      | {\n          text: string;\n          files?: FileList | FileUIPart[];\n          metadata?: InferUIMessageMetadata<UI_MESSAGE>;\n          parts?: never;\n          messageId?: string;\n        }\n      | {\n          files: FileList | FileUIPart[];\n          metadata?: InferUIMessageMetadata<UI_MESSAGE>;\n          parts?: never;\n          messageId?: string;\n        },\n    options?: ChatRequestOptions,\n  ): Promise<void> => {\n    if (message == null) {\n      await this.makeRequest({\n        trigger: 'submit-message',\n        messageId: this.lastMessage?.id,\n        ...options,\n      });\n      return;\n    }\n\n    let uiMessage: CreateUIMessage<UI_MESSAGE>;\n\n    if ('text' in message || 'files' in message) {\n      const fileParts = Array.isArray(message.files)\n        ? message.files\n        : await convertFileListToFileUIParts(message.files);\n\n      uiMessage = {\n        parts: [\n          ...fileParts,\n          ...('text' in message && message.text != null\n            ? [{ type: 'text' as const, text: message.text }]\n            : []),\n        ],\n      } as UI_MESSAGE;\n    } else {\n      uiMessage = message;\n    }\n\n    if (message.messageId != null) {\n      const messageIndex = this.state.messages.findIndex(\n        m => m.id === message.messageId,\n      );\n\n      if (messageIndex === -1) {\n        throw new Error(`message with id ${message.messageId} not found`);\n      }\n\n      if (this.state.messages[messageIndex].role !== 'user') {\n        throw new Error(\n          `message with id ${message.messageId} is not a user message`,\n        );\n      }\n\n      // remove all messages after the message with the given id\n      this.state.messages = this.state.messages.slice(0, messageIndex + 1);\n\n      // update the message with the new content\n      this.state.replaceMessage(messageIndex, {\n        ...uiMessage,\n        id: message.messageId,\n        role: uiMessage.role ?? 'user',\n        metadata: message.metadata,\n      } as UI_MESSAGE);\n    } else {\n      this.state.pushMessage({\n        ...uiMessage,\n        id: uiMessage.id ?? this.generateId(),\n        role: uiMessage.role ?? 'user',\n        metadata: message.metadata,\n      } as UI_MESSAGE);\n    }\n\n    await this.makeRequest({\n      trigger: 'submit-message',\n      messageId: message.messageId,\n      ...options,\n    });\n  };\n\n  /**\n   * Regenerate the assistant message with the provided message id.\n   * If no message id is provided, the last assistant message will be regenerated.\n   */\n  regenerate = async ({\n    messageId,\n    ...options\n  }: {\n    messageId?: string;\n  } & ChatRequestOptions = {}): Promise<void> => {\n    const messageIndex =\n      messageId == null\n        ? this.state.messages.length - 1\n        : this.state.messages.findIndex(message => message.id === messageId);\n\n    if (messageIndex === -1) {\n      throw new Error(`message ${messageId} not found`);\n    }\n\n    // set the messages to the message before the assistant message\n    this.state.messages = this.state.messages.slice(\n      0,\n      // if the message is a user message, we need to include it in the request:\n      this.messages[messageIndex].role === 'assistant'\n        ? messageIndex\n        : messageIndex + 1,\n    );\n\n    await this.makeRequest({\n      trigger: 'regenerate-message',\n      messageId,\n      ...options,\n    });\n  };\n\n  /**\n   * Attempt to resume an ongoing streaming response.\n   */\n  resumeStream = async (options: ChatRequestOptions = {}): Promise<void> => {\n    await this.makeRequest({ trigger: 'resume-stream', ...options });\n  };\n\n  /**\n   * Clear the error state and set the status to ready if the chat is in an error state.\n   */\n  clearError = () => {\n    if (this.status === 'error') {\n      this.state.error = undefined;\n      this.setStatus({ status: 'ready' });\n    }\n  };\n\n  addToolResult = async <TOOL extends keyof InferUIMessageTools<UI_MESSAGE>>({\n    tool,\n    toolCallId,\n    output,\n  }: {\n    tool: TOOL;\n    toolCallId: string;\n    output: InferUIMessageTools<UI_MESSAGE>[TOOL]['output'];\n  }) =>\n    this.jobExecutor.run(async () => {\n      const messages = this.state.messages;\n      const lastMessage = messages[messages.length - 1];\n\n      this.state.replaceMessage(messages.length - 1, {\n        ...lastMessage,\n        parts: lastMessage.parts.map(part =>\n          isToolUIPart(part) && part.toolCallId === toolCallId\n            ? { ...part, state: 'output-available', output }\n            : part,\n        ),\n      });\n\n      // update the active response if it exists\n      if (this.activeResponse) {\n        this.activeResponse.state.message.parts =\n          this.activeResponse.state.message.parts.map(part =>\n            isToolUIPart(part) && part.toolCallId === toolCallId\n              ? {\n                  ...part,\n                  state: 'output-available',\n                  output,\n                  errorText: undefined,\n                }\n              : part,\n          );\n      }\n\n      // automatically send the message if the sendAutomaticallyWhen function returns true\n      if (\n        this.status !== 'streaming' &&\n        this.status !== 'submitted' &&\n        this.sendAutomaticallyWhen?.({ messages: this.state.messages })\n      ) {\n        // no await to avoid deadlocking\n        this.makeRequest({\n          trigger: 'submit-message',\n          messageId: this.lastMessage?.id,\n        });\n      }\n    });\n\n  /**\n   * Abort the current request immediately, keep the generated tokens if any.\n   */\n  stop = async () => {\n    if (this.status !== 'streaming' && this.status !== 'submitted') return;\n\n    if (this.activeResponse?.abortController) {\n      this.activeResponse.abortController.abort();\n    }\n  };\n\n  private async makeRequest({\n    trigger,\n    metadata,\n    headers,\n    body,\n    messageId,\n  }: {\n    trigger: 'submit-message' | 'resume-stream' | 'regenerate-message';\n    messageId?: string;\n  } & ChatRequestOptions) {\n    this.setStatus({ status: 'submitted', error: undefined });\n\n    const lastMessage = this.lastMessage;\n\n    try {\n      const activeResponse = {\n        state: createStreamingUIMessageState({\n          lastMessage: this.state.snapshot(lastMessage),\n          messageId: this.generateId(),\n        }),\n        abortController: new AbortController(),\n      } as ActiveResponse<UI_MESSAGE>;\n\n      this.activeResponse = activeResponse;\n\n      let stream: ReadableStream<UIMessageChunk>;\n\n      if (trigger === 'resume-stream') {\n        const reconnect = await this.transport.reconnectToStream({\n          chatId: this.id,\n          metadata,\n          headers,\n          body,\n        });\n\n        if (reconnect == null) {\n          this.setStatus({ status: 'ready' });\n          return; // no active stream found, so we do not resume\n        }\n\n        stream = reconnect;\n      } else {\n        stream = await this.transport.sendMessages({\n          chatId: this.id,\n          messages: this.state.messages,\n          abortSignal: activeResponse.abortController.signal,\n          metadata,\n          headers,\n          body,\n          trigger,\n          messageId,\n        });\n      }\n\n      const runUpdateMessageJob = (\n        job: (options: {\n          state: StreamingUIMessageState<UI_MESSAGE>;\n          write: () => void;\n        }) => Promise<void>,\n      ) =>\n        // serialize the job execution to avoid race conditions:\n        this.jobExecutor.run(() =>\n          job({\n            state: activeResponse.state,\n            write: () => {\n              // streaming is set on first write (before it should be \"submitted\")\n              this.setStatus({ status: 'streaming' });\n\n              const replaceLastMessage =\n                activeResponse.state.message.id === this.lastMessage?.id;\n\n              if (replaceLastMessage) {\n                this.state.replaceMessage(\n                  this.state.messages.length - 1,\n                  activeResponse.state.message,\n                );\n              } else {\n                this.state.pushMessage(activeResponse.state.message);\n              }\n            },\n          }),\n        );\n\n      await consumeStream({\n        stream: processUIMessageStream({\n          stream,\n          onToolCall: this.onToolCall,\n          onData: this.onData,\n          messageMetadataSchema: this.messageMetadataSchema,\n          dataPartSchemas: this.dataPartSchemas,\n          runUpdateMessageJob,\n          onError: error => {\n            throw error;\n          },\n        }),\n        onError: error => {\n          throw error;\n        },\n      });\n\n      this.onFinish?.({ message: activeResponse.state.message });\n\n      this.setStatus({ status: 'ready' });\n    } catch (err) {\n      // Ignore abort errors as they are expected.\n      if ((err as any).name === 'AbortError') {\n        this.setStatus({ status: 'ready' });\n        return null;\n      }\n\n      if (this.onError && err instanceof Error) {\n        this.onError(err);\n      }\n\n      this.setStatus({ status: 'error', error: err as Error });\n    } finally {\n      this.activeResponse = undefined;\n    }\n\n    // automatically send the message if the sendAutomaticallyWhen function returns true\n    if (this.sendAutomaticallyWhen?.({ messages: this.state.messages })) {\n      await this.makeRequest({\n        trigger: 'submit-message',\n        messageId: this.lastMessage?.id,\n        metadata,\n        headers,\n        body,\n      });\n    }\n  }\n}\n","import { FileUIPart } from './ui-messages';\n\nexport async function convertFileListToFileUIParts(\n  files: FileList | undefined,\n): Promise<Array<FileUIPart>> {\n  if (files == null) {\n    return [];\n  }\n\n  // React-native doesn't have a FileList global:\n  if (!globalThis.FileList || !(files instanceof globalThis.FileList)) {\n    throw new Error('FileList is not supported in the current environment');\n  }\n\n  return Promise.all(\n    Array.from(files).map(async file => {\n      const { name, type } = file;\n\n      const dataUrl = await new Promise<string>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = readerEvent => {\n          resolve(readerEvent.target?.result as string);\n        };\n        reader.onerror = error => reject(error);\n        reader.readAsDataURL(file);\n      });\n\n      return {\n        type: 'file',\n        mediaType: type,\n        filename: name,\n        url: dataUrl,\n      };\n    }),\n  );\n}\n","import { parseJsonEventStream, ParseResult } from '@ai-sdk/provider-utils';\nimport {\n  UIMessageChunk,\n  uiMessageChunkSchema,\n} from '../ui-message-stream/ui-message-chunks';\nimport {\n  HttpChatTransport,\n  HttpChatTransportInitOptions,\n} from './http-chat-transport';\nimport { UIMessage } from './ui-messages';\n\nexport class DefaultChatTransport<\n  UI_MESSAGE extends UIMessage,\n> extends HttpChatTransport<UI_MESSAGE> {\n  constructor(options: HttpChatTransportInitOptions<UI_MESSAGE> = {}) {\n    super(options);\n  }\n\n  protected processResponseStream(\n    stream: ReadableStream<Uint8Array<ArrayBufferLike>>,\n  ): ReadableStream<UIMessageChunk> {\n    return parseJsonEventStream({\n      stream,\n      schema: uiMessageChunkSchema,\n    }).pipeThrough(\n      new TransformStream<ParseResult<UIMessageChunk>, UIMessageChunk>({\n        async transform(chunk, controller) {\n          if (!chunk.success) {\n            throw chunk.error;\n          }\n          controller.enqueue(chunk.value);\n        },\n      }),\n    );\n  }\n}\n","import { FetchFunction, Resolvable, resolve } from '@ai-sdk/provider-utils';\nimport { UIMessageChunk } from '../ui-message-stream/ui-message-chunks';\nimport { ChatTransport } from './chat-transport';\nimport { UIMessage } from './ui-messages';\n\nexport type PrepareSendMessagesRequest<UI_MESSAGE extends UIMessage> = (\n  options: {\n    id: string;\n    messages: UI_MESSAGE[];\n    requestMetadata: unknown;\n    body: Record<string, any> | undefined;\n    credentials: RequestCredentials | undefined;\n    headers: HeadersInit | undefined;\n    api: string;\n  } & {\n    trigger: 'submit-message' | 'regenerate-message';\n    messageId: string | undefined;\n  },\n) =>\n  | {\n      body: object;\n      headers?: HeadersInit;\n      credentials?: RequestCredentials;\n      api?: string;\n    }\n  | PromiseLike<{\n      body: object;\n      headers?: HeadersInit;\n      credentials?: RequestCredentials;\n      api?: string;\n    }>;\n\nexport type PrepareReconnectToStreamRequest = (options: {\n  id: string;\n  requestMetadata: unknown;\n  body: Record<string, any> | undefined;\n  credentials: RequestCredentials | undefined;\n  headers: HeadersInit | undefined;\n  api: string;\n}) =>\n  | {\n      headers?: HeadersInit;\n      credentials?: RequestCredentials;\n      api?: string;\n    }\n  | PromiseLike<{\n      headers?: HeadersInit;\n      credentials?: RequestCredentials;\n      api?: string;\n    }>;\n\n/**\n * Options for the `HttpChatTransport` class.\n *\n * @param UI_MESSAGE - The type of message to be used in the chat.\n */\nexport type HttpChatTransportInitOptions<UI_MESSAGE extends UIMessage> = {\n  /**\n   * The API URL to be used for the chat transport.\n   * Defaults to '/api/chat'.\n   */\n  api?: string;\n\n  /**\n   * The credentials mode to be used for the fetch request.\n   * Possible values are: 'omit', 'same-origin', 'include'.\n   * Defaults to 'same-origin'.\n   */\n  credentials?: Resolvable<RequestCredentials>;\n\n  /**\n   * HTTP headers to be sent with the API request.\n   */\n  headers?: Resolvable<Record<string, string> | Headers>;\n\n  /**\n   * Extra body object to be sent with the API request.\n   * @example\n   * Send a `sessionId` to the API along with the messages.\n   * ```js\n   * useChat({\n   *   body: {\n   *     sessionId: '123',\n   *   }\n   * })\n   * ```\n   */\n  body?: Resolvable<object>;\n\n  /**\n  Custom fetch implementation. You can use it as a middleware to intercept requests,\n  or to provide a custom fetch implementation for e.g. testing.\n      */\n  fetch?: FetchFunction;\n\n  /**\n   * When a function is provided, it will be used\n   * to prepare the request body for the chat API. This can be useful for\n   * customizing the request body based on the messages and data in the chat.\n   *\n   * @param id The id of the chat.\n   * @param messages The current messages in the chat.\n   * @param requestBody The request body object passed in the chat request.\n   */\n  prepareSendMessagesRequest?: PrepareSendMessagesRequest<UI_MESSAGE>;\n\n  /**\n   * When a function is provided, it will be used\n   * to prepare the request body for the chat API. This can be useful for\n   * customizing the request body based on the messages and data in the chat.\n   *\n   * @param id The id of the chat.\n   * @param messages The current messages in the chat.\n   * @param requestBody The request body object passed in the chat request.\n   */\n  prepareReconnectToStreamRequest?: PrepareReconnectToStreamRequest;\n};\n\nexport abstract class HttpChatTransport<UI_MESSAGE extends UIMessage>\n  implements ChatTransport<UI_MESSAGE>\n{\n  protected api: string;\n  protected credentials: HttpChatTransportInitOptions<UI_MESSAGE>['credentials'];\n  protected headers: HttpChatTransportInitOptions<UI_MESSAGE>['headers'];\n  protected body: HttpChatTransportInitOptions<UI_MESSAGE>['body'];\n  protected fetch?: FetchFunction;\n  protected prepareSendMessagesRequest?: PrepareSendMessagesRequest<UI_MESSAGE>;\n  protected prepareReconnectToStreamRequest?: PrepareReconnectToStreamRequest;\n\n  constructor({\n    api = '/api/chat',\n    credentials,\n    headers,\n    body,\n    fetch,\n    prepareSendMessagesRequest,\n    prepareReconnectToStreamRequest,\n  }: HttpChatTransportInitOptions<UI_MESSAGE>) {\n    this.api = api;\n    this.credentials = credentials;\n    this.headers = headers;\n    this.body = body;\n    this.fetch = fetch;\n    this.prepareSendMessagesRequest = prepareSendMessagesRequest;\n    this.prepareReconnectToStreamRequest = prepareReconnectToStreamRequest;\n  }\n\n  async sendMessages({\n    abortSignal,\n    ...options\n  }: Parameters<ChatTransport<UI_MESSAGE>['sendMessages']>[0]) {\n    const resolvedBody = await resolve(this.body);\n    const resolvedHeaders = await resolve(this.headers);\n    const resolvedCredentials = await resolve(this.credentials);\n\n    const preparedRequest = await this.prepareSendMessagesRequest?.({\n      api: this.api,\n      id: options.chatId,\n      messages: options.messages,\n      body: { ...resolvedBody, ...options.body },\n      headers: { ...resolvedHeaders, ...options.headers },\n      credentials: resolvedCredentials,\n      requestMetadata: options.metadata,\n      trigger: options.trigger,\n      messageId: options.messageId,\n    });\n\n    const api = preparedRequest?.api ?? this.api;\n    const headers =\n      preparedRequest?.headers !== undefined\n        ? preparedRequest.headers\n        : { ...resolvedHeaders, ...options.headers };\n    const body =\n      preparedRequest?.body !== undefined\n        ? preparedRequest.body\n        : {\n            ...resolvedBody,\n            ...options.body,\n            id: options.chatId,\n            messages: options.messages,\n            trigger: options.trigger,\n            messageId: options.messageId,\n          };\n    const credentials = preparedRequest?.credentials ?? resolvedCredentials;\n\n    // avoid caching globalThis.fetch in case it is patched by other libraries\n    const fetch = this.fetch ?? globalThis.fetch;\n\n    const response = await fetch(api, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n      body: JSON.stringify(body),\n      credentials,\n      signal: abortSignal,\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        (await response.text()) ?? 'Failed to fetch the chat response.',\n      );\n    }\n\n    if (!response.body) {\n      throw new Error('The response body is empty.');\n    }\n\n    return this.processResponseStream(response.body);\n  }\n\n  async reconnectToStream(\n    options: Parameters<ChatTransport<UI_MESSAGE>['reconnectToStream']>[0],\n  ): Promise<ReadableStream<UIMessageChunk> | null> {\n    const resolvedBody = await resolve(this.body);\n    const resolvedHeaders = await resolve(this.headers);\n    const resolvedCredentials = await resolve(this.credentials);\n\n    const preparedRequest = await this.prepareReconnectToStreamRequest?.({\n      api: this.api,\n      id: options.chatId,\n      body: { ...resolvedBody, ...options.body },\n      headers: { ...resolvedHeaders, ...options.headers },\n      credentials: resolvedCredentials,\n      requestMetadata: options.metadata,\n    });\n\n    const api = preparedRequest?.api ?? `${this.api}/${options.chatId}/stream`;\n    const headers =\n      preparedRequest?.headers !== undefined\n        ? preparedRequest.headers\n        : { ...resolvedHeaders, ...options.headers };\n    const credentials = preparedRequest?.credentials ?? resolvedCredentials;\n\n    // avoid caching globalThis.fetch in case it is patched by other libraries\n    const fetch = this.fetch ?? globalThis.fetch;\n\n    const response = await fetch(api, {\n      method: 'GET',\n      headers,\n      credentials,\n    });\n\n    // no active stream found, so we do not resume\n    if (response.status === 204) {\n      return null;\n    }\n\n    if (!response.ok) {\n      throw new Error(\n        (await response.text()) ?? 'Failed to fetch the chat response.',\n      );\n    }\n\n    if (!response.body) {\n      throw new Error('The response body is empty.');\n    }\n\n    return this.processResponseStream(response.body);\n  }\n\n  protected abstract processResponseStream(\n    stream: ReadableStream<Uint8Array<ArrayBufferLike>>,\n  ): ReadableStream<UIMessageChunk>;\n}\n","import {\n  AssistantContent,\n  ModelMessage,\n  ToolResultPart,\n} from '@ai-sdk/provider-utils';\nimport { ToolSet } from '../generate-text/tool-set';\nimport { createToolModelOutput } from '../prompt/create-tool-model-output';\nimport { MessageConversionError } from '../prompt/message-conversion-error';\nimport {\n  DynamicToolUIPart,\n  FileUIPart,\n  getToolName,\n  isToolUIPart,\n  ReasoningUIPart,\n  TextUIPart,\n  ToolUIPart,\n  UIMessage,\n  UITools,\n} from './ui-messages';\n\n/**\nConverts an array of messages from useChat into an array of CoreMessages that can be used\nwith the AI core functions (e.g. `streamText`).\n\n@param messages - The messages to convert.\n@param options.tools - The tools to use.\n@param options.ignoreIncompleteToolCalls - Whether to ignore incomplete tool calls. Default is `false`.\n */\nexport function convertToModelMessages(\n  messages: Array<Omit<UIMessage, 'id'>>,\n  options?: {\n    tools?: ToolSet;\n    ignoreIncompleteToolCalls?: boolean;\n  },\n): ModelMessage[] {\n  const modelMessages: ModelMessage[] = [];\n\n  if (options?.ignoreIncompleteToolCalls) {\n    messages = messages.map(message => ({\n      ...message,\n      parts: message.parts.filter(\n        part =>\n          !isToolUIPart(part) ||\n          (part.state !== 'input-streaming' &&\n            part.state !== 'input-available'),\n      ),\n    }));\n  }\n\n  for (const message of messages) {\n    switch (message.role) {\n      case 'system': {\n        const textParts = message.parts.filter(part => part.type === 'text');\n\n        const providerMetadata = textParts.reduce((acc, part) => {\n          if (part.providerMetadata != null) {\n            return { ...acc, ...part.providerMetadata };\n          }\n          return acc;\n        }, {});\n\n        modelMessages.push({\n          role: 'system',\n          content: textParts.map(part => part.text).join(''),\n          ...(Object.keys(providerMetadata).length > 0\n            ? { providerOptions: providerMetadata }\n            : {}),\n        });\n        break;\n      }\n\n      case 'user': {\n        modelMessages.push({\n          role: 'user',\n          content: message.parts\n            .filter(\n              (part): part is TextUIPart | FileUIPart =>\n                part.type === 'text' || part.type === 'file',\n            )\n            .map(part => {\n              switch (part.type) {\n                case 'text':\n                  return {\n                    type: 'text' as const,\n                    text: part.text,\n                    ...(part.providerMetadata != null\n                      ? { providerOptions: part.providerMetadata }\n                      : {}),\n                  };\n                case 'file':\n                  return {\n                    type: 'file' as const,\n                    mediaType: part.mediaType,\n                    filename: part.filename,\n                    data: part.url,\n                    ...(part.providerMetadata != null\n                      ? { providerOptions: part.providerMetadata }\n                      : {}),\n                  };\n                default:\n                  return part;\n              }\n            }),\n        });\n\n        break;\n      }\n\n      case 'assistant': {\n        if (message.parts != null) {\n          let block: Array<\n            | TextUIPart\n            | ToolUIPart<UITools>\n            | ReasoningUIPart\n            | FileUIPart\n            | DynamicToolUIPart\n          > = [];\n\n          function processBlock() {\n            if (block.length === 0) {\n              return;\n            }\n\n            const content: AssistantContent = [];\n\n            for (const part of block) {\n              if (part.type === 'text') {\n                content.push({\n                  type: 'text' as const,\n                  text: part.text,\n                  ...(part.providerMetadata != null\n                    ? { providerOptions: part.providerMetadata }\n                    : {}),\n                });\n              } else if (part.type === 'file') {\n                content.push({\n                  type: 'file' as const,\n                  mediaType: part.mediaType,\n                  filename: part.filename,\n                  data: part.url,\n                });\n              } else if (part.type === 'reasoning') {\n                content.push({\n                  type: 'reasoning' as const,\n                  text: part.text,\n                  providerOptions: part.providerMetadata,\n                });\n              } else if (part.type === 'dynamic-tool') {\n                const toolName = part.toolName;\n\n                if (part.state === 'input-streaming') {\n                  throw new MessageConversionError({\n                    originalMessage: message,\n                    message: `incomplete tool input is not supported: ${part.toolCallId}`,\n                  });\n                } else {\n                  content.push({\n                    type: 'tool-call' as const,\n                    toolCallId: part.toolCallId,\n                    toolName,\n                    input: part.input,\n                    ...(part.callProviderMetadata != null\n                      ? { providerOptions: part.callProviderMetadata }\n                      : {}),\n                  });\n                }\n              } else if (isToolUIPart(part)) {\n                const toolName = getToolName(part);\n\n                if (part.state === 'input-streaming') {\n                  throw new MessageConversionError({\n                    originalMessage: message,\n                    message: `incomplete tool input is not supported: ${part.toolCallId}`,\n                  });\n                } else {\n                  content.push({\n                    type: 'tool-call' as const,\n                    toolCallId: part.toolCallId,\n                    toolName,\n                    input:\n                      part.state === 'output-error'\n                        ? (part.input ?? part.rawInput)\n                        : part.input,\n                    providerExecuted: part.providerExecuted,\n                    ...(part.callProviderMetadata != null\n                      ? { providerOptions: part.callProviderMetadata }\n                      : {}),\n                  });\n\n                  if (\n                    part.providerExecuted === true &&\n                    (part.state === 'output-available' ||\n                      part.state === 'output-error')\n                  ) {\n                    content.push({\n                      type: 'tool-result',\n                      toolCallId: part.toolCallId,\n                      toolName,\n                      output: createToolModelOutput({\n                        output:\n                          part.state === 'output-error'\n                            ? part.errorText\n                            : part.output,\n                        tool: options?.tools?.[toolName],\n                        errorMode:\n                          part.state === 'output-error' ? 'json' : 'none',\n                      }),\n                    });\n                  }\n                }\n              } else {\n                const _exhaustiveCheck: never = part;\n                throw new Error(`Unsupported part: ${_exhaustiveCheck}`);\n              }\n            }\n\n            modelMessages.push({\n              role: 'assistant',\n              content,\n            });\n\n            // check if there are tool invocations with results in the block\n            const toolParts = block.filter(\n              part =>\n                (isToolUIPart(part) && part.providerExecuted !== true) ||\n                part.type === 'dynamic-tool',\n            ) as (ToolUIPart<UITools> | DynamicToolUIPart)[];\n\n            // tool message with tool results\n            if (toolParts.length > 0) {\n              modelMessages.push({\n                role: 'tool',\n                content: toolParts.map((toolPart): ToolResultPart => {\n                  switch (toolPart.state) {\n                    case 'output-error':\n                    case 'output-available': {\n                      const toolName =\n                        toolPart.type === 'dynamic-tool'\n                          ? toolPart.toolName\n                          : getToolName(toolPart);\n\n                      return {\n                        type: 'tool-result',\n                        toolCallId: toolPart.toolCallId,\n                        toolName,\n                        output: createToolModelOutput({\n                          output:\n                            toolPart.state === 'output-error'\n                              ? toolPart.errorText\n                              : toolPart.output,\n                          tool: options?.tools?.[toolName],\n                          errorMode:\n                            toolPart.state === 'output-error' ? 'text' : 'none',\n                        }),\n                      };\n                    }\n\n                    default: {\n                      throw new MessageConversionError({\n                        originalMessage: message,\n                        message: `Unsupported tool part state: ${toolPart.state}`,\n                      });\n                    }\n                  }\n                }),\n              });\n            }\n\n            // updates for next block\n            block = [];\n          }\n\n          for (const part of message.parts) {\n            if (\n              part.type === 'text' ||\n              part.type === 'reasoning' ||\n              part.type === 'file' ||\n              part.type === 'dynamic-tool' ||\n              isToolUIPart(part)\n            ) {\n              block.push(part);\n            } else if (part.type === 'step-start') {\n              processBlock();\n            }\n          }\n\n          processBlock();\n\n          break;\n        }\n\n        break;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = message.role;\n        throw new MessageConversionError({\n          originalMessage: message,\n          message: `Unsupported role: ${_exhaustiveCheck}`,\n        });\n      }\n    }\n  }\n\n  return modelMessages;\n}\n\n/**\n@deprecated Use `convertToModelMessages` instead.\n */\n// TODO remove in AI SDK 6\nexport const convertToCoreMessages = convertToModelMessages;\n","import { isToolUIPart, UIMessage } from './ui-messages';\n\n/**\nCheck if the message is an assistant message with completed tool calls.\nThe last step of the message must have at least one tool invocation and\nall tool invocations must have a result.\n */\nexport function lastAssistantMessageIsCompleteWithToolCalls({\n  messages,\n}: {\n  messages: UIMessage[];\n}): boolean {\n  const message = messages[messages.length - 1];\n\n  if (!message) {\n    return false;\n  }\n\n  if (message.role !== 'assistant') {\n    return false;\n  }\n\n  const lastStepStartIndex = message.parts.reduce((lastIndex, part, index) => {\n    return part.type === 'step-start' ? index : lastIndex;\n  }, -1);\n\n  const lastStepToolInvocations = message.parts\n    .slice(lastStepStartIndex + 1)\n    .filter(part => isToolUIPart(part) || part.type === 'dynamic-tool');\n\n  return (\n    lastStepToolInvocations.length > 0 &&\n    lastStepToolInvocations.every(part => part.state === 'output-available')\n  );\n}\n","import { UIMessageChunk } from '../ui-message-stream/ui-message-chunks';\n\nexport function transformTextToUiMessageStream({\n  stream,\n}: {\n  stream: ReadableStream<string>;\n}) {\n  return stream.pipeThrough(\n    new TransformStream<string, UIMessageChunk>({\n      start(controller) {\n        controller.enqueue({ type: 'start' });\n        controller.enqueue({ type: 'start-step' });\n        controller.enqueue({ type: 'text-start', id: 'text-1' });\n      },\n\n      async transform(part, controller) {\n        controller.enqueue({ type: 'text-delta', id: 'text-1', delta: part });\n      },\n\n      async flush(controller) {\n        controller.enqueue({ type: 'text-end', id: 'text-1' });\n        controller.enqueue({ type: 'finish-step' });\n        controller.enqueue({ type: 'finish' });\n      },\n    }),\n  );\n}\n","import { UIMessageChunk } from '../ui-message-stream/ui-message-chunks';\nimport {\n  HttpChatTransport,\n  HttpChatTransportInitOptions,\n} from './http-chat-transport';\nimport { transformTextToUiMessageStream } from './transform-text-to-ui-message-stream';\nimport { UIMessage } from './ui-messages';\n\nexport class TextStreamChatTransport<\n  UI_MESSAGE extends UIMessage,\n> extends HttpChatTransport<UI_MESSAGE> {\n  constructor(options: HttpChatTransportInitOptions<UI_MESSAGE> = {}) {\n    super(options);\n  }\n\n  protected processResponseStream(\n    stream: ReadableStream<Uint8Array<ArrayBufferLike>>,\n  ): ReadableStream<UIMessageChunk> {\n    return transformTextToUiMessageStream({\n      stream: stream.pipeThrough(new TextDecoderStream()),\n    });\n  }\n}\n","import { TypeValidationError } from '@ai-sdk/provider';\nimport {\n  StandardSchemaV1,\n  Tool,\n  validateTypes,\n  Validator,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { providerMetadataSchema } from '../types/provider-metadata';\nimport {\n  DataUIPart,\n  InferUIMessageData,\n  InferUIMessageTools,\n  ToolUIPart,\n  UIMessage,\n} from './ui-messages';\n\nconst textUIPartSchema = z.object({\n  type: z.literal('text'),\n  text: z.string(),\n  state: z.enum(['streaming', 'done']).optional(),\n  providerMetadata: providerMetadataSchema.optional(),\n});\n\nconst reasoningUIPartSchema = z.object({\n  type: z.literal('reasoning'),\n  text: z.string(),\n  state: z.enum(['streaming', 'done']).optional(),\n  providerMetadata: providerMetadataSchema.optional(),\n});\n\nconst sourceUrlUIPartSchema = z.object({\n  type: z.literal('source-url'),\n  sourceId: z.string(),\n  url: z.string(),\n  title: z.string().optional(),\n  providerMetadata: providerMetadataSchema.optional(),\n});\n\nconst sourceDocumentUIPartSchema = z.object({\n  type: z.literal('source-document'),\n  sourceId: z.string(),\n  mediaType: z.string(),\n  title: z.string(),\n  filename: z.string().optional(),\n  providerMetadata: providerMetadataSchema.optional(),\n});\n\nconst fileUIPartSchema = z.object({\n  type: z.literal('file'),\n  mediaType: z.string(),\n  filename: z.string().optional(),\n  url: z.string(),\n  providerMetadata: providerMetadataSchema.optional(),\n});\n\nconst stepStartUIPartSchema = z.object({\n  type: z.literal('step-start'),\n});\n\nconst dataUIPartSchema = z.object({\n  type: z.string().startsWith('data-'),\n  id: z.string().optional(),\n  data: z.unknown(),\n});\n\nconst dynamicToolUIPartSchemas = [\n  z.object({\n    type: z.literal('dynamic-tool'),\n    toolName: z.string(),\n    toolCallId: z.string(),\n    state: z.literal('input-streaming'),\n    input: z.unknown().optional(),\n    output: z.never().optional(),\n    errorText: z.never().optional(),\n  }),\n  z.object({\n    type: z.literal('dynamic-tool'),\n    toolName: z.string(),\n    toolCallId: z.string(),\n    state: z.literal('input-available'),\n    input: z.unknown(),\n    output: z.never().optional(),\n    errorText: z.never().optional(),\n    callProviderMetadata: providerMetadataSchema.optional(),\n  }),\n  z.object({\n    type: z.literal('dynamic-tool'),\n    toolName: z.string(),\n    toolCallId: z.string(),\n    state: z.literal('output-available'),\n    input: z.unknown(),\n    output: z.unknown(),\n    errorText: z.never().optional(),\n    callProviderMetadata: providerMetadataSchema.optional(),\n    preliminary: z.boolean().optional(),\n  }),\n  z.object({\n    type: z.literal('dynamic-tool'),\n    toolName: z.string(),\n    toolCallId: z.string(),\n    state: z.literal('output-error'),\n    input: z.unknown(),\n    output: z.never().optional(),\n    errorText: z.string(),\n    callProviderMetadata: providerMetadataSchema.optional(),\n  }),\n];\n\nconst toolUIPartSchemas = [\n  z.object({\n    type: z.string().startsWith('tool-'),\n    toolCallId: z.string(),\n    state: z.literal('input-streaming'),\n    input: z.unknown().optional(),\n    output: z.never().optional(),\n    errorText: z.never().optional(),\n  }),\n  z.object({\n    type: z.string().startsWith('tool-'),\n    toolCallId: z.string(),\n    state: z.literal('input-available'),\n    input: z.unknown(),\n    output: z.never().optional(),\n    errorText: z.never().optional(),\n    callProviderMetadata: providerMetadataSchema.optional(),\n  }),\n  z.object({\n    type: z.string().startsWith('tool-'),\n    toolCallId: z.string(),\n    state: z.literal('output-available'),\n    input: z.unknown(),\n    output: z.unknown(),\n    errorText: z.never().optional(),\n    callProviderMetadata: providerMetadataSchema.optional(),\n    preliminary: z.boolean().optional(),\n  }),\n  z.object({\n    type: z.string().startsWith('tool-'),\n    toolCallId: z.string(),\n    state: z.literal('output-error'),\n    input: z.unknown(),\n    output: z.never().optional(),\n    errorText: z.string(),\n    callProviderMetadata: providerMetadataSchema.optional(),\n  }),\n];\n\nconst uiMessageSchema = z.object({\n  id: z.string(),\n  role: z.enum(['system', 'user', 'assistant']),\n  metadata: z.unknown().optional(),\n  parts: z.array(\n    z.union([\n      textUIPartSchema,\n      reasoningUIPartSchema,\n      sourceUrlUIPartSchema,\n      sourceDocumentUIPartSchema,\n      fileUIPartSchema,\n      stepStartUIPartSchema,\n      dataUIPartSchema,\n      ...dynamicToolUIPartSchemas,\n      ...toolUIPartSchemas,\n    ]),\n  ),\n});\n\n/**\n * Validates a list of UI messages.\n *\n * Metadata, data parts, and generic tool call structures are only validated if\n * the corresponding schemas are provided. Otherwise, they are assumed to be\n * valid.\n */\nexport async function validateUIMessages<UI_MESSAGE extends UIMessage>({\n  messages,\n  metadataSchema,\n  dataSchemas,\n  tools,\n}: {\n  messages: unknown;\n  metadataSchema?:\n    | Validator<UIMessage['metadata']>\n    | StandardSchemaV1<unknown, UI_MESSAGE['metadata']>;\n  dataSchemas?: {\n    [NAME in keyof InferUIMessageData<UI_MESSAGE> & string]?:\n      | Validator<InferUIMessageData<UI_MESSAGE>[NAME]>\n      | StandardSchemaV1<unknown, InferUIMessageData<UI_MESSAGE>[NAME]>;\n  };\n  tools?: {\n    [NAME in keyof InferUIMessageTools<UI_MESSAGE> & string]?: Tool<\n      InferUIMessageTools<UI_MESSAGE>[NAME]['input'],\n      InferUIMessageTools<UI_MESSAGE>[NAME]['output']\n    >;\n  };\n}): Promise<Array<UI_MESSAGE>> {\n  const validatedMessages = await validateTypes({\n    value: messages,\n    schema: z.array(uiMessageSchema),\n  });\n\n  if (metadataSchema) {\n    for (const message of validatedMessages) {\n      await validateTypes({\n        value: message.metadata,\n        schema: metadataSchema,\n      });\n    }\n  }\n\n  if (dataSchemas) {\n    for (const message of validatedMessages) {\n      const dataParts = message.parts.filter(part =>\n        part.type.startsWith('data-'),\n      ) as DataUIPart<InferUIMessageData<UI_MESSAGE>>[];\n\n      for (const dataPart of dataParts) {\n        const dataName = dataPart.type.slice(5);\n        const dataSchema = dataSchemas[dataName];\n\n        if (!dataSchema) {\n          throw new TypeValidationError({\n            value: dataPart.data,\n            cause: `No data schema found for data part ${dataName}`,\n          });\n        }\n\n        await validateTypes({\n          value: dataPart.data,\n          schema: dataSchema,\n        });\n      }\n    }\n  }\n\n  if (tools) {\n    for (const message of validatedMessages) {\n      const toolParts = message.parts.filter(part =>\n        part.type.startsWith('tool-'),\n      ) as ToolUIPart<InferUIMessageTools<UI_MESSAGE>>[];\n\n      for (const toolPart of toolParts) {\n        const toolName = toolPart.type.slice(5);\n        const tool = tools[toolName];\n\n        if (!tool) {\n          throw new TypeValidationError({\n            value: toolPart.input,\n            cause: `No tool schema found for tool part ${toolName}`,\n          });\n        }\n\n        if (\n          toolPart.state === 'input-available' ||\n          toolPart.state === 'output-available' ||\n          toolPart.state === 'output-error'\n        ) {\n          await validateTypes({\n            value: toolPart.input,\n            schema: tool.inputSchema,\n          });\n        }\n\n        if (toolPart.state === 'output-available' && tool.outputSchema) {\n          await validateTypes({\n            value: toolPart.output,\n            schema: tool.outputSchema,\n          });\n        }\n      }\n    }\n  }\n\n  return validatedMessages as Array<UI_MESSAGE>;\n}\n","import {\n  generateId as generateIdFunc,\n  getErrorMessage,\n  IdGenerator,\n} from '@ai-sdk/provider-utils';\nimport { UIMessage } from '../ui/ui-messages';\nimport { handleUIMessageStreamFinish } from './handle-ui-message-stream-finish';\nimport { InferUIMessageChunk } from './ui-message-chunks';\nimport { UIMessageStreamOnFinishCallback } from './ui-message-stream-on-finish-callback';\nimport { UIMessageStreamWriter } from './ui-message-stream-writer';\n\nexport function createUIMessageStream<UI_MESSAGE extends UIMessage>({\n  execute,\n  onError = getErrorMessage,\n  originalMessages,\n  onFinish,\n  generateId = generateIdFunc,\n}: {\n  execute: (options: {\n    writer: UIMessageStreamWriter<UI_MESSAGE>;\n  }) => Promise<void> | void;\n  onError?: (error: unknown) => string;\n\n  /**\n   * The original messages. If they are provided, persistence mode is assumed,\n   * and a message ID is provided for the response message.\n   */\n  originalMessages?: UI_MESSAGE[];\n\n  onFinish?: UIMessageStreamOnFinishCallback<UI_MESSAGE>;\n\n  generateId?: IdGenerator;\n}): ReadableStream<InferUIMessageChunk<UI_MESSAGE>> {\n  let controller!: ReadableStreamDefaultController<\n    InferUIMessageChunk<UI_MESSAGE>\n  >;\n\n  const ongoingStreamPromises: Promise<void>[] = [];\n\n  const stream = new ReadableStream({\n    start(controllerArg) {\n      controller = controllerArg;\n    },\n  });\n\n  function safeEnqueue(data: InferUIMessageChunk<UI_MESSAGE>) {\n    try {\n      controller.enqueue(data);\n    } catch (error) {\n      // suppress errors when the stream has been closed\n    }\n  }\n\n  try {\n    const result = execute({\n      writer: {\n        write(part: InferUIMessageChunk<UI_MESSAGE>) {\n          safeEnqueue(part);\n        },\n        merge(streamArg) {\n          ongoingStreamPromises.push(\n            (async () => {\n              const reader = streamArg.getReader();\n              while (true) {\n                const { done, value } = await reader.read();\n                if (done) break;\n                safeEnqueue(value);\n              }\n            })().catch(error => {\n              safeEnqueue({\n                type: 'error',\n                errorText: onError(error),\n              } as InferUIMessageChunk<UI_MESSAGE>);\n            }),\n          );\n        },\n        onError,\n      },\n    });\n\n    if (result) {\n      ongoingStreamPromises.push(\n        result.catch(error => {\n          safeEnqueue({\n            type: 'error',\n            errorText: onError(error),\n          } as InferUIMessageChunk<UI_MESSAGE>);\n        }),\n      );\n    }\n  } catch (error) {\n    safeEnqueue({\n      type: 'error',\n      errorText: onError(error),\n    } as InferUIMessageChunk<UI_MESSAGE>);\n  }\n\n  // Wait until all ongoing streams are done. This approach enables merging\n  // streams even after execute has returned, as long as there is still an\n  // open merged stream. This is important to e.g. forward new streams and\n  // from callbacks.\n  const waitForStreams: Promise<void> = new Promise(async resolve => {\n    while (ongoingStreamPromises.length > 0) {\n      await ongoingStreamPromises.shift();\n    }\n    resolve();\n  });\n\n  waitForStreams.finally(() => {\n    try {\n      controller.close();\n    } catch (error) {\n      // suppress errors when the stream has been closed\n    }\n  });\n\n  return handleUIMessageStreamFinish<UI_MESSAGE>({\n    stream,\n    messageId: generateId(),\n    originalMessages,\n    onFinish,\n    onError,\n  });\n}\n","import { UIMessage } from '../ui/ui-messages';\nimport { UIMessageChunk } from './ui-message-chunks';\nimport {\n  createStreamingUIMessageState,\n  processUIMessageStream,\n  StreamingUIMessageState,\n} from '../ui/process-ui-message-stream';\nimport {\n  AsyncIterableStream,\n  createAsyncIterableStream,\n} from '../util/async-iterable-stream';\nimport { consumeStream } from '../util/consume-stream';\n\n/**\n * Transforms a stream of `UIMessageChunk`s into an `AsyncIterableStream` of `UIMessage`s.\n *\n * @param options.message - The last assistant message to use as a starting point when the conversation is resumed. Otherwise undefined.\n * @param options.stream - The stream of `UIMessageChunk`s to read.\n * @param options.terminateOnError - Whether to terminate the stream if an error occurs.\n * @param options.onError - A function that is called when an error occurs.\n *\n * @returns An `AsyncIterableStream` of `UIMessage`s. Each stream part is a different state of the same message\n * as it is being completed.\n */\nexport function readUIMessageStream<UI_MESSAGE extends UIMessage>({\n  message,\n  stream,\n  onError,\n  terminateOnError = false,\n}: {\n  message?: UI_MESSAGE;\n  stream: ReadableStream<UIMessageChunk>;\n  onError?: (error: unknown) => void;\n  terminateOnError?: boolean;\n}): AsyncIterableStream<UI_MESSAGE> {\n  let controller: ReadableStreamDefaultController<UI_MESSAGE> | undefined;\n  let hasErrored = false;\n\n  const outputStream = new ReadableStream<UI_MESSAGE>({\n    start(controllerParam) {\n      controller = controllerParam;\n    },\n  });\n\n  const state = createStreamingUIMessageState<UI_MESSAGE>({\n    messageId: message?.id ?? '',\n    lastMessage: message,\n  });\n\n  const handleError = (error: unknown) => {\n    onError?.(error);\n\n    if (!hasErrored && terminateOnError) {\n      hasErrored = true;\n      controller?.error(error);\n    }\n  };\n\n  consumeStream({\n    stream: processUIMessageStream({\n      stream,\n      runUpdateMessageJob(\n        job: (options: {\n          state: StreamingUIMessageState<UI_MESSAGE>;\n          write: () => void;\n        }) => Promise<void>,\n      ) {\n        return job({\n          state,\n          write: () => {\n            controller?.enqueue(structuredClone(state.message));\n          },\n        });\n      },\n      onError: handleError,\n    }),\n    onError: handleError,\n  }).finally(() => {\n    // Only close if no error occurred. Calling close() on an errored controller\n    // throws \"Invalid state: Controller is already closed\" TypeError.\n    if (!hasErrored) {\n      controller?.close();\n    }\n  });\n\n  return createAsyncIterableStream(outputStream);\n}\n"],"names":["asSchema","createIdGenerator","dynamicTool","generateId","jsonSchema","tool","getErrorMessage","AISDKError","AISDKError","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","text","AISDKError","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","AISDKError","getErrorMessage","name","marker","symbol","_a","AISDKError","AISDKError","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","AISDKError","name","marker","symbol","_a","_a","_a","AISDKError","convertBase64ToUint8Array","_a","AISDKError","convertBase64ToUint8Array","_a","object","name","tool","InvalidPromptError","z","z","z","z","z","z","z","z","InvalidPromptError","z","AISDKError","_a","name","name","attributes","APICallError","getErrorMessage","getErrorMessage","APICallError","content","convertBase64ToUint8Array","convertUint8ArrayToBase64","asSchema","safeValidateTypes","asSchema","tool","safeValidateTypes","_a","getErrorMessage","tool","generateId","_a","callSettings","tool","span","_b","_c","_d","_e","_f","getErrorMessage","toolCall","getErrorMessage","createIdGenerator","isAbortError","z","z","safeParseJSON","safeParseJSON","_a","part","resolve","resolve","_a","_a","executeTool","getErrorMessage","getErrorMessage","tool","executeTool","originalGenerateId","createIdGenerator","now","generateId","text","_a","isAbortError","includeRawChunks","stream","tool","doStreamSpan","_b","_c","_d","getErrorMessage","_a","embedding","usage","_a","embeddings","providerMetadata","usage","_a","createIdGenerator","content","TypeValidationError","UnsupportedFunctionalityError","asSchema","safeValidateTypes","UnsupportedFunctionalityError","safeValidateTypes","_a","TypeValidationError","asSchema","JSONParseError","TypeValidationError","safeParseJSON","safeParseJSON","JSONParseError","TypeValidationError","originalGenerateId","createIdGenerator","generateId","_a","span","result","text","reasoning","object","createIdGenerator","resolve","_a","delay","originalGenerateId","createIdGenerator","generateId","now","doStreamSpan","object","_a","error","AISDKError","text","_a","asSchema","safeParseJSON","safeValidateTypes","text","asSchema","safeParseJSON","safeValidateTypes","InvalidArgumentError","delay","text","text","_a","NoSuchModelError","AISDKError","NoSuchModelError","name","marker","symbol","_a","NoSuchModelError","NoSuchModelError","_a","z","z","z","resolve","_a","_b","_c","text","name","_a","resolve","AISDKError","_a","fetch","_a","name","resolve","_a","parseJsonEventStream","fetch","_a","parseJsonEventStream","generateId","_a","tool","processBlock","_a","TypeValidationError","validateTypes","z","z","validateTypes","TypeValidationError","tool","generateIdFunc","getErrorMessage","getErrorMessage","generateId","generateIdFunc","resolve","_a"],"mappings":"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","debugId":null}}]
}