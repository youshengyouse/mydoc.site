module.exports = [
"[externals]/node:child_process [external] (node:child_process, cjs)", ((__turbopack_context__, module, exports) => {

const mod = __turbopack_context__.x("node:child_process", () => require("node:child_process"));

module.exports = mod;
}),
"[externals]/node:module [external] (node:module, cjs)", ((__turbopack_context__, module, exports) => {

const mod = __turbopack_context__.x("node:module", () => require("node:module"));

module.exports = mod;
}),
"[externals]/child_process [external] (child_process, cjs)", ((__turbopack_context__, module, exports) => {

const mod = __turbopack_context__.x("child_process", () => require("child_process"));

module.exports = mod;
}),
"[project]/node_modules/.pnpm/oxc-transform@0.82.2/node_modules/oxc-transform/package.json (json)", ((__turbopack_context__) => {

__turbopack_context__.v(JSON.parse("{\"name\":\"oxc-transform\",\"version\":\"0.82.2\",\"type\":\"commonjs\",\"main\":\"index.js\",\"browser\":\"browser.js\",\"engines\":{\"node\":\">=14.0.0\"},\"description\":\"Oxc Transformer Node API\",\"keywords\":[\"oxc\",\"transform\"],\"author\":\"Boshen and oxc contributors\",\"license\":\"MIT\",\"homepage\":\"https://oxc.rs\",\"bugs\":\"https://github.com/oxc-project/oxc/issues\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/oxc-project/oxc.git\",\"directory\":\"napi/transform\"},\"funding\":{\"url\":\"https://github.com/sponsors/Boshen\"},\"files\":[\"index.d.ts\",\"index.js\",\"browser.js\",\"webcontainer-fallback.js\"],\"publishConfig\":{\"registry\":\"https://registry.npmjs.org/\",\"access\":\"public\"},\"devDependencies\":{\"vitest\":\"3.2.4\",\"typescript\":\"5.9.2\"},\"napi\":{\"binaryName\":\"transform\",\"packageName\":\"@oxc-transform/binding\",\"targets\":[\"x86_64-pc-windows-msvc\",\"aarch64-pc-windows-msvc\",\"x86_64-unknown-linux-gnu\",\"x86_64-unknown-linux-musl\",\"x86_64-unknown-freebsd\",\"aarch64-unknown-linux-gnu\",\"aarch64-unknown-linux-musl\",\"armv7-unknown-linux-gnueabihf\",\"armv7-unknown-linux-musleabihf\",\"s390x-unknown-linux-gnu\",\"riscv64gc-unknown-linux-gnu\",\"x86_64-apple-darwin\",\"aarch64-apple-darwin\",\"aarch64-linux-android\",\"wasm32-wasip1-threads\"],\"wasm\":{\"browser\":{\"fs\":false}}},\"optionalDependencies\":{\"@oxc-transform/binding-win32-x64-msvc\":\"0.82.2\",\"@oxc-transform/binding-win32-arm64-msvc\":\"0.82.2\",\"@oxc-transform/binding-linux-x64-gnu\":\"0.82.2\",\"@oxc-transform/binding-linux-x64-musl\":\"0.82.2\",\"@oxc-transform/binding-freebsd-x64\":\"0.82.2\",\"@oxc-transform/binding-linux-arm64-gnu\":\"0.82.2\",\"@oxc-transform/binding-linux-arm64-musl\":\"0.82.2\",\"@oxc-transform/binding-linux-arm-gnueabihf\":\"0.82.2\",\"@oxc-transform/binding-linux-arm-musleabihf\":\"0.82.2\",\"@oxc-transform/binding-linux-s390x-gnu\":\"0.82.2\",\"@oxc-transform/binding-linux-riscv64-gnu\":\"0.82.2\",\"@oxc-transform/binding-darwin-x64\":\"0.82.2\",\"@oxc-transform/binding-darwin-arm64\":\"0.82.2\",\"@oxc-transform/binding-android-arm64\":\"0.82.2\",\"@oxc-transform/binding-wasm32-wasi\":\"0.82.2\"},\"scripts\":{\"build-dev\":\"napi build --platform\",\"build-test\":\"pnpm run build-dev\",\"build\":\"pnpm run build-dev --features allocator --release\",\"postbuild-dev\":\"node patch.mjs\",\"test\":\"tsc && vitest run --dir ./test\"}}"));}),
"[project]/node_modules/.pnpm/oxc-transform@0.82.2/node_modules/oxc-transform/webcontainer-fallback.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {

const fs = __turbopack_context__.r("[externals]/node:fs [external] (node:fs, cjs)");
const childProcess = __turbopack_context__.r("[externals]/node:child_process [external] (node:child_process, cjs)");
const pkg = JSON.parse(fs.readFileSync("[project]/node_modules/.pnpm/oxc-transform@0.82.2/node_modules/oxc-transform/package.json (json)", 'utf-8'));
const version = pkg.version;
const baseDir = `/tmp/oxc-transform-${version}`;
const bindingEntry = `${baseDir}/node_modules/@oxc-transform/binding-wasm32-wasi/transform.wasi.cjs`;
if (!fs.existsSync(bindingEntry)) {
    fs.rmSync(baseDir, {
        recursive: true,
        force: true
    });
    fs.mkdirSync(baseDir, {
        recursive: true
    });
    const bindingPkg = `@oxc-transform/binding-wasm32-wasi@${version}`;
    // eslint-disable-next-line: no-console
    console.log(`[oxc-transform] Downloading ${bindingPkg} on WebContainer...`);
    childProcess.execFileSync('pnpm', [
        'i',
        bindingPkg
    ], {
        cwd: baseDir,
        stdio: 'inherit'
    });
}
module.exports = (()=>{
    const e = new Error("Cannot find module 'unknown'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
}),
"[project]/node_modules/.pnpm/oxc-transform@0.82.2/node_modules/oxc-transform/index.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {

// prettier-ignore
/* eslint-disable */ // @ts-nocheck
/* auto-generated by NAPI-RS */ const { createRequire } = __turbopack_context__.r("[externals]/node:module [external] (node:module, cjs)");
require = createRequire(("TURBOPACK compile-time value", "/ROOT/node_modules/.pnpm/oxc-transform@0.82.2/node_modules/oxc-transform/index.js"));
const { readFileSync } = __turbopack_context__.r("[externals]/node:fs [external] (node:fs, cjs)");
let nativeBinding = null;
const loadErrors = [];
const isMusl = ()=>{
    let musl = false;
    if ("TURBOPACK compile-time truthy", 1) {
        musl = isMuslFromFilesystem();
        if (musl === null) {
            musl = isMuslFromReport();
        }
        if (musl === null) {
            musl = isMuslFromChildProcess();
        }
    }
    return musl;
};
const isFileMusl = (f)=>f.includes('libc.musl-') || f.includes('ld-musl-');
const isMuslFromFilesystem = ()=>{
    try {
        return readFileSync('/usr/bin/ldd', 'utf-8').includes('musl');
    } catch  {
        return null;
    }
};
const isMuslFromReport = ()=>{
    let report = null;
    if (typeof process.report?.getReport === 'function') {
        process.report.excludeNetwork = true;
        report = process.report.getReport();
    }
    if (!report) {
        return null;
    }
    if (report.header && report.header.glibcVersionRuntime) {
        return false;
    }
    if (Array.isArray(report.sharedObjects)) {
        if (report.sharedObjects.some(isFileMusl)) {
            return true;
        }
    }
    return false;
};
const isMuslFromChildProcess = ()=>{
    try {
        return __turbopack_context__.r("[externals]/child_process [external] (child_process, cjs)").execSync('ldd --version', {
            encoding: 'utf8'
        }).includes('musl');
    } catch (e) {
        // If we reach this case, we don't know if the system is musl or not, so is better to just fallback to false
        return false;
    }
};
function requireNative() {
    if (process.env.NAPI_RS_NATIVE_LIBRARY_PATH) {
        try {
            nativeBinding = (()=>{
                const e = new Error("Cannot find module as expression is too dynamic");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })();
        } catch (err) {
            loadErrors.push(err);
        }
    } else if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
    ;
    else if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
    ;
    else if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
    ;
    else if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
    ;
    else if ("TURBOPACK compile-time truthy", 1) {
        if ("TURBOPACK compile-time truthy", 1) {
            if (isMusl()) {
                try {
                    return (()=>{
                        const e = new Error("Cannot find module './transform.linux-x64-musl.node'");
                        e.code = 'MODULE_NOT_FOUND';
                        throw e;
                    })();
                } catch (e) {
                    loadErrors.push(e);
                }
                try {
                    return (()=>{
                        throw new Error('could not resolve "' + '@oxc-transform/binding-linux-x64-musl' + '" into a module');
                    })();
                } catch (e) {
                    loadErrors.push(e);
                }
            } else {
                try {
                    return (()=>{
                        const e = new Error("Cannot find module './transform.linux-x64-gnu.node'");
                        e.code = 'MODULE_NOT_FOUND';
                        throw e;
                    })();
                } catch (e) {
                    loadErrors.push(e);
                }
                try {
                    return (()=>{
                        throw new Error('could not resolve "' + '@oxc-transform/binding-linux-x64-gnu' + '" into a module');
                    })();
                } catch (e) {
                    loadErrors.push(e);
                }
            }
        } else //TURBOPACK unreachable
        ;
    } else //TURBOPACK unreachable
    ;
}
nativeBinding = requireNative();
if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
    try {
        nativeBinding = (()=>{
            const e = new Error("Cannot find module './transform.wasi.cjs'");
            e.code = 'MODULE_NOT_FOUND';
            throw e;
        })();
    } catch (err) {
        if (process.env.NAPI_RS_FORCE_WASI) {
            loadErrors.push(err);
        }
    }
    if (!nativeBinding) {
        try {
            nativeBinding = (()=>{
                const e = new Error("Cannot find module '@oxc-transform/binding-wasm32-wasi'");
                e.code = 'MODULE_NOT_FOUND';
                throw e;
            })();
        } catch (err) {
            if (process.env.NAPI_RS_FORCE_WASI) {
                loadErrors.push(err);
            }
        }
    }
}
if (!nativeBinding && globalThis.process?.versions?.["webcontainer"]) {
    try {
        nativeBinding = __turbopack_context__.r("[project]/node_modules/.pnpm/oxc-transform@0.82.2/node_modules/oxc-transform/webcontainer-fallback.js [app-rsc] (ecmascript)");
    } catch (err) {
        loadErrors.push(err);
    }
}
if (!nativeBinding) {
    if (loadErrors.length > 0) {
        throw new Error(`Cannot find native binding. ` + `npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). ` + 'Please try `npm i` again after removing both package-lock.json and node_modules directory.', {
            cause: loadErrors
        });
    }
    throw new Error(`Failed to load native binding`);
}
module.exports = nativeBinding;
module.exports.Severity = nativeBinding.Severity;
module.exports.HelperMode = nativeBinding.HelperMode;
module.exports.isolatedDeclaration = nativeBinding.isolatedDeclaration;
module.exports.moduleRunnerTransform = nativeBinding.moduleRunnerTransform;
module.exports.transform = nativeBinding.transform;
}),
];

//# sourceMappingURL=%5Broot-of-the-server%5D__61625dfc._.js.map