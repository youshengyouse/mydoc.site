{"version":3,"file":"renderRouterToString.js","sources":["../../../src/ssr/renderRouterToString.tsx"],"sourcesContent":["import ReactDOMServer from 'react-dom/server'\nimport type { ReactNode } from 'react'\nimport type { AnyRouter } from '@tanstack/router-core'\n\nexport const renderRouterToString = async ({\n  router,\n  responseHeaders,\n  children,\n}: {\n  router: AnyRouter\n  responseHeaders: Headers\n  children: ReactNode\n}) => {\n  try {\n    let html = ReactDOMServer.renderToString(children)\n    const injectedHtml = await Promise.all(router.serverSsr!.injectedHtml).then(\n      (htmls) => htmls.join(''),\n    )\n    html = html.replace(`</body>`, `${injectedHtml}</body>`)\n    return new Response(`<!DOCTYPE html>${html}`, {\n      status: router.state.statusCode,\n      headers: responseHeaders,\n    })\n  } catch (error) {\n    console.error('Render to string error:', error)\n    return new Response('Internal Server Error', {\n      status: 500,\n      headers: responseHeaders,\n    })\n  }\n}\n"],"names":[],"mappings":";AAIO,MAAM,uBAAuB,OAAO;AAAA,EACzC;AAAA,EACA;AAAA,EACA;AACF,MAIM;AACA,MAAA;AACE,QAAA,OAAO,eAAe,eAAe,QAAQ;AACjD,UAAM,eAAe,MAAM,QAAQ,IAAI,OAAO,UAAW,YAAY,EAAE;AAAA,MACrE,CAAC,UAAU,MAAM,KAAK,EAAE;AAAA,IAC1B;AACA,WAAO,KAAK,QAAQ,WAAW,GAAG,YAAY,SAAS;AACvD,WAAO,IAAI,SAAS,kBAAkB,IAAI,IAAI;AAAA,MAC5C,QAAQ,OAAO,MAAM;AAAA,MACrB,SAAS;AAAA,IAAA,CACV;AAAA,WACM,OAAO;AACN,YAAA,MAAM,2BAA2B,KAAK;AACvC,WAAA,IAAI,SAAS,yBAAyB;AAAA,MAC3C,QAAQ;AAAA,MACR,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAEL;"}